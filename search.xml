<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python learning - Script</title>
    <url>/Python-learning-Script.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="例：获取播放量"><a href="#例：获取播放量" class="headerlink" title="例：获取播放量"></a>例：获取播放量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#html = requests.get(&quot;https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=1&quot;)</span></span><br><span class="line"><span class="comment">#html = urlopen(&quot;https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=1&quot;)</span></span><br><span class="line"><span class="comment">#html.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.csv&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    writer.writerow([<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Viewers&quot;</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># 设置不加载页面</span></span><br><span class="line">        option.add_argument(<span class="string">&quot;headless&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">        option.add_argument(<span class="string">&#x27;lang=zh_CN.UTF-8&#x27;</span>)</span><br><span class="line">        option.add_argument(<span class="string">&#x27;--disable - plugins&#x27;</span>)</span><br><span class="line">        <span class="comment">#option.add_argument(&#x27;blink-settings=imagesEnabled=false&#x27;)</span></span><br><span class="line">        <span class="comment">#prefs = &#123;&quot;profile.managed_default_content_settings.images&quot;: 2&#125;</span></span><br><span class="line">        <span class="comment">#option.add_experimental_option(&quot;prefs&quot;, prefs)</span></span><br><span class="line">        driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">        html = <span class="string">&quot;https://www.bilibili.com/anime/index/#st=1&amp;order=2&amp;season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;sort=0&amp;page=&quot;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(html)</span><br><span class="line">        html.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        driver.get(html)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        driver.minimize_window()</span><br><span class="line">        bsObj = BeautifulSoup(driver.page_source.replace(<span class="string">&#x27;&amp;nbsp;&#x27;</span>, <span class="string">&#x27; &#x27;</span>),<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        <span class="comment">#AnimeList = bsObj.select(&quot;bangumi-item&quot;)</span></span><br><span class="line">        AnimeList = bsObj.findAll(class_=<span class="string">&quot;bangumi-item&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> ani <span class="keyword">in</span> AnimeList:</span><br><span class="line">            writer.writerow([ani.find(<span class="string">&quot;a&quot;</span>,class_=<span class="string">&quot;bangumi-title&quot;</span>).get_text(),ani.find(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;shadow&quot;</span>).get_text()])</span><br><span class="line">            url = ani.find(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;common-lazy-img&quot;</span>).find(<span class="string">&quot;img&quot;</span>)[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(url) &lt; <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            reg = re.search(<span class="string">r&#x27;@(.*)&#x27;</span>,url).group()</span><br><span class="line">            url = url.replace(<span class="string">&#x27;//&#x27;</span>,<span class="string">&#x27;https://&#x27;</span>).replace(reg,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            urllib.request.urlretrieve(url,<span class="string">&quot;&#123;0&#125;.jpg&quot;</span>.<span class="built_in">format</span>(ani.find(<span class="string">&quot;a&quot;</span>,class_=<span class="string">&quot;bangumi-title&quot;</span>).get_text().replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;-&#x27;</span>)))</span><br><span class="line">            <span class="comment">#with open(&quot;testpic.png&quot;,&quot;wb&quot;) as pic:</span></span><br><span class="line">                <span class="comment">#pic.write(response.content)</span></span><br><span class="line">        driver.quit()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;except:</span></span><br><span class="line"><span class="string">    print(&quot;报错退出&quot;)</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">    driver.quit()&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#for anime in AnimeList:</span></span><br><span class="line">    <span class="comment">#print(anime.find(&quot;a&quot;,class_=&quot;bangumi-title&quot;).get_text())</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;taskkill /im chromedriver.exe /F</span></span><br><span class="line"><span class="string">　　taskkill /im chrome.exe /F&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="chrome-Options"><a href="#chrome-Options" class="headerlink" title="chrome Options"></a>chrome Options</h2><p>chromeOptions 是一个配置 chrome 启动是属性的类。通过这个类，我们可以为chrome配置如下参数：<br>&gt;<br>设置 chrome 二进制文件位置 (binary_location)<br>添加启动参数 (add_argument)<br>添加扩展应用 (add_extension, add_encoded_extension)<br>添加实验性质的设置参数 (add_experimental_option)<br>设置调试器地址 (debugger_address)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .\Lib\site-packages\selenium\webdriver\chrome\options.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Options</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置 chrome 二进制文件位置</span></span><br><span class="line">        <span class="variable language_">self</span>._binary_location = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 添加启动参数</span></span><br><span class="line">        <span class="variable language_">self</span>._arguments = []</span><br><span class="line">        <span class="comment"># 添加扩展应用</span></span><br><span class="line">        <span class="variable language_">self</span>._extension_files = []</span><br><span class="line">        <span class="variable language_">self</span>._extensions = []</span><br><span class="line">        <span class="comment"># 添加实验性质的设置参数</span></span><br><span class="line">        <span class="variable language_">self</span>._experimental_options = &#123;&#125;</span><br><span class="line">        <span class="comment"># 设置调试器地址</span></span><br><span class="line">        <span class="variable language_">self</span>._debugger_address = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;lang=zh_CN.UTF-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 禁止图片的加载</span></span><br><span class="line">prefs = &#123;<span class="string">&quot;profile.managed_default_content_settings.images&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;prefs&quot;</span>, prefs)</span><br><span class="line"></span><br><span class="line">options.add_argument(<span class="string">&#x27;--proxy-server=http://ip:port&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">proxyauth_plugin_path = create_proxyauth_extension(</span><br><span class="line">            proxy_host=<span class="string">&#x27;host&#x27;</span>,</span><br><span class="line">            proxy_port=<span class="string">&#x27;port&#x27;</span>,</span><br><span class="line">            proxy_username=<span class="string">&quot;username&quot;</span>,</span><br><span class="line">            proxy_password=<span class="string">&quot;password&quot;</span></span><br><span class="line">        )</span><br><span class="line">options.add_extension(proxyauth_plugin_path)</span><br><span class="line"></span><br><span class="line">options.add_argument(<span class="string">&#x27;window-size=1920x3000&#x27;</span>)  <span class="comment"># 指定浏览器分辨率</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)  <span class="comment"># 加上这个属性来规避bug</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--disable-infobars&#x27;</span>)  <span class="comment"># 禁用浏览器正在被自动化程序控制的提示</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--hide-scrollbars&#x27;</span>)  <span class="comment"># 隐藏滚动条, 应对一些特殊页面</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;blink-settings=imagesEnabled=false&#x27;</span>)  <span class="comment"># 不加载图片, 提升速度</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)  <span class="comment"># 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span></span><br><span class="line">options.binary_location = <span class="string">r&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</span>  <span class="comment"># 手动指定使用的浏览器位置</span></span><br><span class="line">driver = webdriver.Chrome(chrome_options = options)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Script</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python script save somethings</title>
    <url>/Python-script-save-somethings.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><p>用法：urlretrieve(url, filename=None, reporthook=None, data=None)<br>&gt;<br>参数 finename 指定了保存本地路径（如果参数未指定，urllib会生成一个临时文件保存数据）<br>参数 reporthook 是一个回调函数，当连接上服务器、以及相应的数据块传输完毕时会触发该回调，我们可以利用这个回调函数来显示当前的下载进度<br>参数 data 指 post 到服务器的数据，该方法返回一个包含两个元素的(filename, headers)元组，filename 表示保存到本地的路径，header 表示服务器的响应头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#常用</span></span><br><span class="line">img_src = <span class="string">&#x27;http://724.169pp.net/bizhi/2017/039/1.jpg&#x27;</span></span><br><span class="line">urllib.request.urlretrieve(img_src,<span class="string">r&#x27;C:\\Users\\ME\\Desktop\\1.jpg&#x27;</span>)</span><br><span class="line"><span class="comment">#second</span></span><br><span class="line">data = urllib.urlopen(img_src).read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;bbb.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>)<span class="keyword">as</span> f:  <span class="comment"># wb是写二进制</span></span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>
<h3 id="PIL-requests"><a href="#PIL-requests" class="headerlink" title="PIL+requests"></a>PIL+requests</h3><p>PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用<br>requests是python实现的最简单易用的HTTP库，建议爬虫使用requests库。默认安装好python之后，是没有安装requests模块的，需要单独通过pip安装<br>BytesIO是用来操作二进制数据的，因为图片是二进制数据，和它相对的自然是StringIO，这是用来存str的。他们的区别就好似python读写普通文件和二进制文件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">img_src = <span class="string">&#x27;http://724.169pp.net/bizhi/2017/039/1.jpg&#x27;</span></span><br><span class="line">response = requests.get(img_src)</span><br><span class="line">image = Image.<span class="built_in">open</span>(BytesIO(response.content))</span><br><span class="line"><span class="comment">#image = Image.open(StringIO(response.content))</span></span><br><span class="line">image.save(<span class="string">r&#x27;C:\\Users\\ME\\Desktop\\&#x27;</span> + <span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line"><span class="comment">#second 常用</span></span><br><span class="line">src = <span class="string">&quot;https://i0.hdslb.com/bfs/sycp/creative_img/201912/01b2f081d58e49c708c1d32b7b8c20ed.jpg&quot;</span></span><br><span class="line"><span class="comment">#r = requests.get(src,headers=header)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;bbb.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>)<span class="keyword">as</span> f:  <span class="comment"># wb是写二进制</span></span><br><span class="line">    f.write(requests.get(src,headers=header).content)</span><br></pre></td></tr></table></figure></p>
<h2 id="保存视频"><a href="#保存视频" class="headerlink" title="保存视频"></a>保存视频</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response =  requests.get(<span class="string">&#x27;https://vd4.bdstatic.com/mda-jcrx64vi5vct2d2u/sc/mda-jcrx64vi5vct2d2u.mp4?auth_key=1557734214-0-0-d6a29a90222c6caf233e8a2a34c2e37a&amp;bcevod_channel=searchbox_feed&amp;pd=bjh&amp;abtest=all&#x27;</span>)</span><br><span class="line">video = response.content         <span class="comment">#把文件保存成二进制</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\图片\绿色.mp4&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">    fw.write(video)           <span class="comment">#将文件内容写入该文件</span></span><br><span class="line">    fw.flush()               <span class="comment">#刷新</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
  </entry>
  <entry>
    <title>网络学习随记</title>
    <url>/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0.html</url>
    <content><![CDATA[<p><center></center><br>应用层-表示层-会话层—-HTTP/FTP/DNS/Telnet…<br>传输层—-TCP/UDP<br>网络层—-IP/ARP/ICMP/RARP<br>数据链路层<br>物理层<br><span id="more"></span></p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>-Bit流  </p>
<h2 id="数据链路层-帧"><a href="#数据链路层-帧" class="headerlink" title="数据链路层 帧"></a>数据链路层 帧</h2><p>交换机 可识别MAC<br>FCS|Data|SIP|DIP|SMAC|DMAC</p>
<h2 id="网络层-包"><a href="#网络层-包" class="headerlink" title="网络层 包"></a>网络层 包</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>IP、ARP、ICMP、IGMP<br>路由器 可识别IP<br>Data|SIP|DIP</p>
<h4 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h4><p>ARP广播查询目标MAC地址<br>ipconfig /all查看网卡MAC<br>arp -a查询局域网内MAC<br><strong><em>ARP欺骗</em></strong><br>arp -s ip mac设置静态MAC(更改网络通讯中IP对应的MAC)<br>网卡属性中修复可重置</p>
<h4 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h4><p>PING-Packet Internet Grope因特网包探索器<br>ping局域网延迟一般小于10ms<br>TTL数据包生存周期，每过一个路由-1，防止网络回路<br>ping ip -i n 通过n值查看途经路由器IP<br>默认TTL：</p>
<blockquote>
<p>Linux : 64<br>Windows : 128<br>Unix : 255</p>
</blockquote>
<p>tracert ip 跟踪数据包路径<br>pathping 跟踪数据包路径，计算丢包情况</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>静态路由 管理员配置路径<br>动态路由 RIP协议 最大15级</p>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>netstat -n查看会话<br>netstat -nb查看会话及会话进程<br>netstat -an查看监听端口</p>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>16位<br>常用端口：0-1023<br>登机端口：1024-49151<br>客户端端口：49152-65535<br>常见应用层协议端口</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>协议</th>
<th>端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>http</td>
<td>TCP:80  </td>
</tr>
<tr>
<td>https</td>
<td>TCP:443  </td>
</tr>
<tr>
<td>ftp</td>
<td>TCP:21  </td>
</tr>
<tr>
<td>RDP</td>
<td>TCP:3389  远程桌面</td>
</tr>
<tr>
<td>SMTP</td>
<td>TCP:25  </td>
</tr>
<tr>
<td>POP3</td>
<td>TCP:110  </td>
</tr>
<tr>
<td>Telnet</td>
<td>TCP:23  </td>
</tr>
<tr>
<td>SQL</td>
<td>TCP:1433</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>DNS</td>
<td>UDP:53(一般)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>socket=IP:Port</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>设置开/关机/登录启动脚本<br>gpedit.msc</p>
]]></content>
  </entry>
  <entry>
    <title>BBKTimeLock</title>
    <url>/BBKTimeLock.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a5e25fa6d879469d9929023d0590f0391b84f411b55991c3b8cb53116505016d">2a136ff4e8d63812c42116b4c696cbbd3f4fa23dea5b06b5c371a1d7cb617fc7795e5a2faba82db0f662403b6216aae32396ac4aaea84aa19a8b58270aa7b5904b79bed4a99aa2cad7df7c476ba0cdb369415a0b82d78cbe3daa19d26ec46af03ec292a409767a367053781970bd5a1dde8a90387ea91e65aa1f4ebf2e9758dbe41c00c755db63b83cd808d56abfa503e97a57a0dacc292b7bdbf1e6ebfa2eedc8e8a12a7fdcdc0cd25806528c6f759604665027dd52e8c232fdd8b8c8501e557272661c01b0c2a2983e3eddbe5c8180c9ba15d7fe0771e3a5e2f93db8848ea9688c88a7ea5cd9ad5c2d48f07d0facb13dbf43a2749cc5bec54046ede1cb16ab01d77103a31cf516520892c538ef95ef3106dc527f80495de4984fc8101993c9d9ad62e057e50ed73344b01593e5aa3a9104a96fe4174ce39eb1dec2c807cb5831f4ba0810504ce4cf611a32a0a4073847aaa374efeb7366001008c45d2118e2a0e072f8366458396682a5926a5679a3cbe3165b134a5968acd7d4697e944894fa354140ae57900727ced3b89c627d62d4f36342882d784ab996a21bd302a6d1a1b4ab090efead0157f166b745ec9351cc44e82a44801a1b82ad490a8ba70df325ed02a7f9e960d820efb3701299d20ed60118b1906fc646fc6c44c6ed4574ce375357a1bfcc3bf38ec3002d809e82b812e816d003ef9af4273dd6838532deeded4e99f919605648ae88bcc2da63805bb00c579905a804ed683f3eb3625579c089169bc62307d350b1293691c09f419dda076753748314b97f440705d04cb16cd17a98956bc08c8144b1479103a4e8f5d35282057fa5149be0df25e8c0e24cf210017c10a39d27fba9f76e8ab8baba06dfa2ab8da137b542a032208d3b320993c76f27af35f5081e45e2a9e666526d607a493c19530628566243c82686388315f948c84d3b24e8e6677c3747aa8ba9b7d9c955511537d9e1129632e4b43602ac23eec9aad2e513a3f19a7b9f0658a38afe320919cf5e590591b34570dcc0eec0c51bd2d6651dfac146f03158fd0ef93e5e52ae64625ab21d291f4aedcc41fe520be66eb8e0b52c5bafd9e2cbc9483692df44016ff9869cda3cd6ace1930c22b134900dcf88aa8c188ded2a5f34291aa369801987a8703512bde53c28ce011cbcaf2a7a0d669ce41e6ef15196f5fd46b82500a3e6d3e393609ac3e0a62cfc2a2f5b9c8368ccc765bfdcdba842cdd8b8765ae5fb5b9532135b7e8c7c82e94e4a8ca3546edc55ffd3be48f44f51d29af9a2c2e7be95b8556d7617fa35d4ebbabf6d18845452774783dd7e21866cafceb8c7eb6ec52074bdd3ae44285de2641d69d35acc3d2b998bf23e4e829d96c79545654caad2cb9b8423c9e007c9388538ae9fecf1c7af47eee108041c0a841534a4963c584eb11b59365ba501df175c652b47de297b5855ed44860212408f06e24ee952a80fd017f749ec4c7020161602ac1c5c52d688b02c0d1d43b568890ebb6e14a4c8308a821a894d56689aa9b3d86ff067384458c6560cf3d8c660ee842f3d937722e93a977e935b8818532373d77d729249520669e11c81f7a16172ff10f91f2a92941f4bb5a49c78a6c91b6d0aba964b2525c2649d629da66fe66cf311eab12439aa7769e385c32858a1fb0853a4efb87e12dd8fec047ef959c4caeb08a174d84a5154bb0d4efdaaecd1a3faa7a06d2e93e09d4d3c13f957981dcab3b05171ea79d4d4038cd91c4a6e236eb2f8dd9806a5ddc700d940a30ef95da0b2dd499f5cbd07d358e869b6d070de7d864d2e15d13398aa6aad44be4c7f2602542ef9e44fc745ac808a6817319e6ebf2d0cf52d9ac8b3ec08bb6d34b55435f0b042dd56b3a97448ab4e2543c0a3deff46427d4d0c6b0548ddba6438c8aa62a9fd2849bc129dc6c6914e93b0be4dd477edefef3659e4839cfd6e7378f2e766b745e98886a91802b2af63cc759c6fe779313f4ab8e95fe266ea542700aff71c69388dad2aed7ce504f7698dca4075f32a2b1dbcd5c01c7bdc5ece6b230bb1889aca108b832177bb2dcef23af20fedb08f09024df5e440ff84e6b8e2130174be90eeec751c6376810878c778390b6f6ca39f0311bbf455210dbdc2d392d215353eb74881317b9ec24517d1376fb079a4360966aa081090f1635c8f522424036da91add535b2715f1e575681afa4830d9932dd03b3575f2292f0b38fc1f1e16256062b2c49e9568f5247aeb22414c92b94f8112e404e06a73d5fbfd94fae150eb0b6f7d2122760d11d777909a137f99019bd83826cf04075c9cc3e8a3f85dae4d2cf0dbf50231ffcf4bd47af72e31241e5aa2e0f8854dde1fb6b24a4caf3cae669e380597e535200d75724486133bdf62a7f62bd7f609a04c6c36d9cbae62e105aecd8588468b912c5b2b7f8b19fcc06cb0054659672c1a8846f7a43eb67ad7ca2a74bb54d55c6b57462a250fc3a9903f3ee82c3eca6d9f81f4424b0e3c5a64a2018048ccf4fa23e41d34b7876bc6f5aaaeb0dbd2ec0285766becfbae39de8bf30005956c6e1e2171a35c64af99d7603b8b744c80dd69a7489d926675a328c1d647fc4a7e4c1084023112ae4a2a48c233d26b55871bfc940b6e890524feca6d240b24dc326cf8c79be6589659b5ad977aadf5c2666c27658045a3b4bf669e97eb6a280ee61390fa7a0aae7fdf26b19ae319129a5524b607c34d5e39dc681b523ecff1e9f55f3ec4107e078a7f5255b622660351f925974f8d834b737621caea82a92f8419294c6c6fdeb8e74c52d829898e5d7b73ef50ee757b7e56f210c19f81c88cbe2778cf3810f0053b68bfeba2dfc5f876ec782f72a71cdc9bf6e5d74f7701ed26462fcfb114b00646abf1c85785038453308f9e01b15dfe9a9ec667e9853ddffd0f14c482ea4011072cf48dc21890afab741500610cc448d3cf519d166e8deff0a97eae15edd37fff1367cbd406e97100c61367b89a7d4b9c15539bb05ce250bfbca4b6892bab63dd58326330fce5987bf9f7491871645a72d31a51992fb51e45b0981c065cee0fdfca3bad3c9e219bace4e314327841cf746f967bdd91749c26a4e1c5df7076adb8f9755e31ba80151778596c7605a3a24578c46729daf5bd42008862c37cf2caba983c019e9d17485ae9c843172972fcadd43f27466b24bc9f9b97b6e09631a1022c42c22387b8757121126da4e19321f8d14191442975261d1624d37f42ac8d7adeed8c8d842bad231d0f4bf875b6bc7498a602f0c7a8d91587030c7b320ad780e1f296e52715ad083cf36bbbad7c42dc2210f22f5922ad53c504347ba9fef270d7554a3028f3d0bc06f03fe9a11e1df28b15ab0aa1df04b66f985ff99d0940537457acda63f72bb880df95e3db3177f15bd7675cf8b831472afd4fa1ed96ee388eb05607520da99385092f40d209703c3aa6e907dc5b89566a050bcd038cd08203e1cd7e26662339c0d8c768e674c5040c4e50984611e22ea6dd50e3a2f88ff58581a06aef68d88721b10541d47d11c90813cb7e37368330148b5cd81f372f6443e5aa48f032d632085867237216aa5d3fad2ef5261d9ac5c94f0b3a3d3c40a42865cc2520566bdd68b4f660ccb10b359b5ecae4fb847facad7a45205caecdaf46f88394175d99396c403ab5771fd70d7e1cc14fc111808c35db28b131d67a56caf3aa15627284ee9e96fe9d3cb5e0b1c1b43985952318243d385002838583961bc986423c98d97471868b14cfed4a101963600339fe21e2ed19f4cad74c9b2fcee67c41c050f69b14892068abff5b21ed3ce0595bfa7b7a14664026a7bbd3822610b17c342a4ebb55d8b83087c090ecc75333a8c8302b8eb42289d6fbdb5d3c295dbd24aa722883b5ff9bd148da771cb3c0475a4b4282974f43d30b4a0ad2af359668e7cef983cd07a47f083c4253c19904a1c73375bc9da7ad84537f3d5f5cb9474b59e63de23a3481274bb2a32a5e1c25731000de630d4737e688171b08e36e94239315cc419914a708b214273a1bc293a7846b61d1f5703e740eb3ee8c7537d0795528ba114cf47d1a50660962a411d571e11ee13470789e6befe65a6f1ad8365067360b9b183bc233096b4521cb7fe7432cbbb732de8b74f11a6992217a13215f71caa6416d78e99dc5be19fe6e2cf8d86c5a835dbf34fe8346a55aa16a42aae2c99ea7bd852aa6878226679bafb542f28616463c2eed334e821f4e9fabeaaa818c99e1bd13b18cae162015a47ba7ded682d32236bf6b6d9a04a25425c228e903b90fe01b88a0eea8d50a64df578cbdc64b5ba6fd468c8b28cf4b255f48de9ee2e2b1141c6993545a68e7df8bc88d63c23f81528ea2973c2c196dbd9baad30b775b466f44ca9596cc7e6fbaef9482d771a04640ef17af3567d4a30c5e634f32dbf6c4f0691271882b8ab071fb0aafcce448bfe87fc01a3d82dbecf59e5c66c4c4d52725f7191113684a362279f3e63ab9025d77a8349e44298afa2e8987fc5ec16d9c1412959ef35c91850d4118300baa034e42733056eb193fd04545c8cf6099bb9b2b2771cecf219935df40edee29c467b3277f6798debd0f3db558ef1698e94129a8ebbaa27f8c625d5eff20298ddfb8492b257b37911fe66708d02ce7c36740e087bb8ad7f9671a5bec386c26d9b819cb2a11f84d13cfef88ded379de344617bbd5039569ec</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Enter password to read！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK检测线联网</title>
    <url>/BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91.html</url>
    <content><![CDATA[<p><center></center><br>检测线联网相关的基本配置说明<br><span id="more"></span></p>
<h2 id="设备设置"><a href="#设备设置" class="headerlink" title="设备设置"></a>设备设置</h2><p>1、设备及服务器安装好运行环境<br>2、关闭防火墙<br>3、分配IP<br>4、保证工位与服务器相互可以Ping通</p>
<h2 id="工位配置"><a href="#工位配置" class="headerlink" title="工位配置"></a>工位配置</h2><h3 id="PostgreSQL配置"><a href="#PostgreSQL配置" class="headerlink" title="PostgreSQL配置"></a>PostgreSQL配置</h3><p>打开PostgreSQL菜单：工具-服务器配置-pg_hba.conf<br>新增如图配置后保存<br><img src="BBK检测线联网/Postgreconfi.png" alt="Config"></p>
<h3 id="BBK软件配置"><a href="#BBK软件配置" class="headerlink" title="BBK软件配置"></a>BBK软件配置</h3><p>1、确认流程中有初始化联网步骤，一般在Init_InitConst中一般命名为InitNet<br><img src="BBK检测线联网/InitNet.png" alt="InitNet"></p>
<p>2、确认流程中有上图中的红框中的设备号、线号的步骤<br>若没有可参考带有初始化联网的程序进行添加<br>3、打开BBK软件在菜单中配置<em>线号、设备号、服务器IP</em><br><img src="BBK检测线联网/BBKConfig.png" alt="BBKConfig"></p>
<h2 id="服务器软件配置"><a href="#服务器软件配置" class="headerlink" title="服务器软件配置"></a>服务器软件配置</h2><p>打开服务软件所在文件夹中Set.mdb数据库进行服务器联网配置</p>
<h3 id="StationConfig"><a href="#StationConfig" class="headerlink" title="StationConfig"></a>StationConfig</h3><p><img src="BBK检测线联网/StationConfig.png" alt="StationConfig"></p>
<p>该表中每一行代表一个工位<br><strong>字段说明：</strong><br><code>DeviceID</code>：对应工位配置的设备号DeviceID<br><code>Describe</code>：用于服务器显示的设备描述<br><code>LineID</code>：对应工位配置的线号LineID<br><code>IPAdsress</code>：工位IP<br><code>StationNo</code>：用于服务器显示工位顺序<br><code>StationUpload</code>：设置当前工位需要上传的表名 <strong>逗号为英文字符</strong></p>
<h3 id="车辆查看配置"><a href="#车辆查看配置" class="headerlink" title="车辆查看配置"></a>车辆查看配置</h3><p><img src="BBK检测线联网/ViewConfig.png" alt="ViewConfig"></p>
<p>改表为显示测试数据页面的相关配置，根据需求进行相应配置即可</p>
<h2 id="四轮与标定或侧滑通讯"><a href="#四轮与标定或侧滑通讯" class="headerlink" title="四轮与标定或侧滑通讯"></a>四轮与标定或侧滑通讯</h2><h3 id="四轮"><a href="#四轮" class="headerlink" title="四轮"></a>四轮</h3><p>四轮程序中创建GeneralLib.xDvConfigClient对象<br>并在该对象下创建需要共享的对象</p>
<p><img src="BBK检测线联网/xDvConfigClient.PNG" alt="DvClient"></p>
<p><img src="BBK检测线联网/xDvBaseClient.PNG" alt="DvBase"></p>
<p>调用该对象的Init函数，参数选GeneralLib.xRemoterClientConfig；</p>
<p><img src="BBK检测线联网/RemoteInit.PNG" alt="Remote"></p>
<p>初始化后会自动生成创建</p>
<p>需要传值时直接给变量赋值即可</p>
<h3 id="标定或侧滑"><a href="#标定或侧滑" class="headerlink" title="标定或侧滑"></a>标定或侧滑</h3><p>创建GeneralLib.GenO对象<br>调用该对象的InitRemoterTcpserver函数即可。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>打开四轮程序，配置文件中会自动生成相关配置，对对象进行绑定即可；</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK软件设置密码方法</title>
    <url>/BBK%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<p><center></center><br>BBK软件设置密码方法<br><span id="more"></span></p>
<h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><p>在Bin文件夹中找到LoginLock.Lock文件，将其复制到C盘根目录下<br>若无此文件可新建文本文档后另存为此名称，内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SuperAccount = <span class="string">&quot;BBKTSTSYS&quot;</span>;</span><br><span class="line">SuperPassword = <span class="string">&quot;ZMY20140527&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>均为英文字符</p>
<h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><p>编辑方式打开设备程序使用的always文件(桌面快捷方式对应文件)<br>1、双击打开组合列表中Always下的InitForm组合<br>2、双击打开Menu，点击HELP进入菜单编辑界面<br>3、选择需要设置密码的菜单项及子项后，选择右侧<strong><em>需要权限</em></strong>,权限0为不需要权限，不同应权限可设置相应密码<br>0~9为权限等级，高等级可访问低等级权限，比如权限9可访问所有内容<br>4、更改完成后依次点击保存后退出</p>
<h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><h3 id="设置权限密码"><a href="#设置权限密码" class="headerlink" title="设置权限密码"></a>设置权限密码</h3><p>双击打开always程序，点击左上角登录弹出如下界面</p>
<p><img src="BBK软件设置密码方法/Login.png" alt="1"></p>
<p>输入管理员账号后点击<strong><em>设置</em></strong>进行账户管理<br>SuperAccount = “BBKTSTSYS”<br>SuperPassword = “ZMY20140527”</p>
<p><img src="BBK软件设置密码方法/Account.png" alt="2"></p>
<p>设置完成后便可登录相应等级账户</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL数据库</title>
    <url>/PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content><![CDATA[<p><center></center><br>BBK设备数据库常用操作说明<br><span id="more"></span></p>
<h2 id="新增数据表"><a href="#新增数据表" class="headerlink" title="新增数据表"></a>新增数据表</h2><p>创建脚本修改字段和表名<br>打开数据表所在路径：<br><img src="PostgreSQL数据库/TablePath.png" alt="1"></p>
<p>更改图中相应字段表名后点击黑色方框中的执行按钮并确认输出窗口为成功即可<br><img src="PostgreSQL数据库/CreatTableScript.png" alt="2"></p>
<p><img src="PostgreSQL数据库/TableScript.png" alt="3"></p>
<h2 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h2><p>当保存数据时Systemerror.log中存在警告缺少字段是可在数据库中新增缺少的字段<br><img src="PostgreSQL数据库/MissField.png" alt="4"></p>
<p>图中Miss Field List:后面就是数据库中缺少的字段名</p>
<h3 id="创建脚本新增字段"><a href="#创建脚本新增字段" class="headerlink" title="创建脚本新增字段"></a>创建脚本新增字段</h3><p><img src="PostgreSQL数据库/CreatFieldScript.png" alt="5"></p>
<p>如下所示，新增字段并根据需要更改字段长度即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Column: &quot;前轮侧滑&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE public.&quot;侧滑表&quot; DROP COLUMN &quot;前轮侧滑&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> public.&quot;侧滑表&quot; <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> &quot;新增字段1&quot; <span class="type">character</span> <span class="type">varying</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER TABLE</span> public.&quot;侧滑表&quot; <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> &quot;新增字段2&quot; <span class="type">character</span> <span class="type">varying</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">ALTER TABLE</span> public.&quot;侧滑表&quot; <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> &quot;新增字段3&quot; <span class="type">character</span> <span class="type">varying</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Postgre</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hashmap、Hashtabel、Dictionary</title>
    <url>/Hashmap%E3%80%81Hashtabel%E3%80%81Dictionary.html</url>
    <content><![CDATA[<p><center></center><br>参考：<a href="https://blog.csdn.net/woshimaxiao1/article/details/83661464">https://blog.csdn.net/woshimaxiao1/article/details/83661464</a><br><span id="more"></span></p>
<h2 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a>Hashmap</h2><p>HashMap是Java 1.2引进的Map接口的一个实现，c#中无HashMap</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>  采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为O(1)；通过给定值进行查找，需要遍历数组，逐一比对给定关键字和数组元素，时间复杂度为O(n)，当然，对于有序数组，则可采用二分查找，插值查找，斐波那契查找等方式，可将查找复杂度提高为O(logn)；对于一般的插入删除操作，涉及到数组元素的移动，其平均复杂度也为O(n)</p>
<h3 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h3><p>  对于链表的新增，删除等操作（在找到指定操作位置后），仅需处理结点间的引用即可，时间复杂度为O(1)，而查找操作需要遍历链表逐一进行比对，复杂度为O(n)</p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>  对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为O(logn)。</p>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>  相比上述几种数据结构，在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)。<br>  当要新增或查找某个元素，我们通过把当前元素的关键字 通过某个函数映射到数组中的某个位置，通过数组下标一次定位就可完成操作。<br>  <strong>存储位置 = 哈希函数f(关键字)</strong></p>
<h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><p>两个不同的元素，通过哈希函数得出的实际存储地址相同<br>HashMap采用了链地址法，也就是数组+链表的方式解决哈希冲突<br>HashMap数组的每一个元素不止是一个Entry对象，也是一个链表的头节点。每一个Entry对象通过Next指针指向它的下一个Entry节点。当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可<br>HashMap可以简单理解为由数组+链表组成，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的</p>
<h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p>哈希表（HashTable）又叫做散列表，是根据关键码值（即键值对）而直接访问的数据结构。也就是说，它通过把关键码映射到表中一个位置来访问记录，以加快查找速度，Hashtable是基于Dictionary类的</p>
<h2 id="Hashtable-与-Hashmap区别"><a href="#Hashtable-与-Hashmap区别" class="headerlink" title="Hashtable 与 Hashmap区别"></a>Hashtable 与 Hashmap区别</h2><h3 id="Hashtable-1"><a href="#Hashtable-1" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>底层数组+链表实现，无论key还是value都不能为null，线程安全，实现线程安全的方式是在修改数据时锁住整个HashTable，效率低，ConcurrentHashMap做了相关优化<br>初始size为11，扩容：newsize = olesize*2+1<br>计算index的方法：index = (hash &amp; 0x7FFFFFFF) % tab.length</p>
<h3 id="Hashmap-1"><a href="#Hashmap-1" class="headerlink" title="Hashmap"></a>Hashmap</h3><p>底层数组+链表实现，可以存储null键和null值，线程不安全<br>初始size为16，扩容：newsize = oldsize*2，size一定为2的n次幂<br>扩容针对整个Map，每次扩容时，原来数组中的元素依次重新计算存放位置，并重新插入<br>插入元素后才判断该不该扩容，有可能无效扩容（插入后如果扩容，如果没有再次插入，就会产生无效扩容）<br>当Map中元素总数超过Entry数组的75%，触发扩容操作，为了减少链表长度，元素分配更均匀<br>计算index方法：index = hash &amp; (tab.length – 1)</p>
<h2 id="HashTable和Dictionary区别"><a href="#HashTable和Dictionary区别" class="headerlink" title="HashTable和Dictionary区别"></a>HashTable和Dictionary区别</h2><p>  HashTable不支持泛型，而Dictionary支持泛型。<br>  Hashtable 的元素属于 Object 类型，所以在存储或检索值类型时通常发生装箱和拆箱的操作，所以你可能需要进行一些类型转换的操作，而且对于int,float这些值类型还需要进行装箱等操作，非常耗时。<br>  单线程程序中推荐使用 Dictionary, 有泛型优势, 且读取速度较快, 容量利用更充分。多线程程序中推荐使用 Hashtable, 默认的 Hashtable 允许单线程写入, 多线程读取, 对 Hashtable 进一步调用 Synchronized() 方法可以获得完全线程安全的类型. 而 Dictionary 非线程安全, 必须人为使用 lock 语句进行保护, 效率大减。<br>  在通过代码测试的时候发现key是整数型Dictionary的效率比Hashtable快，如果key是字符串型，Dictionary的效率没有Hashtable快。</p>
]]></content>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpWeb</title>
    <url>/HttpWeb.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="HttpWebRequest"><a href="#HttpWebRequest" class="headerlink" title="HttpWebRequest"></a>HttpWebRequest</h2><p>命名空间： System.Net，这是.NET创建者最初开发用于使用HTTP请求的标准类<br>使用HttpWebRequest可以让开发者控制请求/响应流程的各个方面，如 timeouts, cookies, headers, protocols<br>另一个好处是HttpWebRequest类不会阻塞UI线程,例如，当从响应很慢的API服务器下载大文件时，您的应用程序的UI不会停止响应<br>HttpWebRequest通常和WebResponse一起使用，一个发送请求，一个获取数据<br>HttpWebRquest更为底层一些，能够对整个访问过程有个直观的认识，但同时也更加复杂一些</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Accept <span class="comment">//获取或设置 Accept HTTP 标头的值。</span></span><br><span class="line">Address <span class="comment">//获取实际响应请求的 Internet 资源的统一资源标识符 (URI)。</span></span><br><span class="line">AllowAutoRedirect <span class="comment">//获取或设置一个值，该值指示请求是否应跟随重定向响应。</span></span><br><span class="line">AllowReadStreamBuffering <span class="comment">//获取或设置一个值，该值指示是否对从 Internet 资源接收的数据进行缓冲处理。</span></span><br><span class="line">AllowWriteStreamBuffering <span class="comment">//获取或设置一个值，该值指示是否对发送到 Internet 资源的数据进行缓冲处理。</span></span><br><span class="line">AuthenticationLevel <span class="comment">//获取或设置用于此请求的身份验证和模拟的级别。(继承自 WebRequest)</span></span><br><span class="line">AutomaticDecompression <span class="comment">//获取或设置所使用的解压缩类型。</span></span><br><span class="line">CachePolicy <span class="comment">//获取或设置此请求的缓存策略。(继承自 WebRequest)</span></span><br><span class="line">ClientCertificates <span class="comment">//获取或设置与此请求关联的安全证书集合。</span></span><br><span class="line">Connection <span class="comment">//获取或设置 Connection HTTP 标头的值。</span></span><br><span class="line">ConnectionGroupName <span class="comment">//获取或设置请求的连接组的名称。</span></span><br><span class="line">ContentLength <span class="comment">//获取或设置 Content-length HTTP 标头。</span></span><br><span class="line">ContentType <span class="comment">//获取或设置 Content-type HTTP 标头的值。</span></span><br><span class="line">ContinueDelegate <span class="comment">//获取或设置当从 Internet 资源接收到 HTTP 100-continue 响应时调用的委托方法。</span></span><br><span class="line">ContinueTimeout <span class="comment">//获取或设置在接收到来自服务器的 100-Continue 之前要等待的超时（以毫秒为单位）。</span></span><br><span class="line">CookieContainer <span class="comment">//获取或设置与请求关联的 Cookie。</span></span><br><span class="line">CreatorInstance <span class="comment">//当在子类中重写时，获取从 IWebRequestCreate 类派生的工厂对象，该类用于创建为生成对指定 URI 的请求而实例化的 WebRequest。(继承自 WebRequest)</span></span><br><span class="line">Credentials <span class="comment">//获取或设置请求的身份验证信息。</span></span><br><span class="line">Date <span class="comment">//获取或设置要在 HTTP 请求中使用的 Date HTTP 标头值。</span></span><br><span class="line">DefaultCachePolicy <span class="comment">//获取或设置此请求的默认缓存策略。</span></span><br><span class="line">DefaultMaximumErrorResponseLength <span class="comment">//获取或设置 HTTP 错误响应的默认最大长度。</span></span><br><span class="line">DefaultMaximumResponseHeadersLength <span class="comment">//获取或设置 MaximumResponseHeadersLength 属性的默认值。</span></span><br><span class="line">Expect <span class="comment">//获取或设置 Expect HTTP 标头的值。</span></span><br><span class="line">HaveResponse <span class="comment">//获取一个值，该值指示是否收到了来自 Internet 资源的响应。</span></span><br><span class="line">Headers <span class="comment">//指定构成 HTTP 标头的名称/值对的集合。</span></span><br><span class="line">Host <span class="comment">//获取或设置要在 HTTP 请求中独立于请求 URI 使用的 Host 标头值。</span></span><br><span class="line">IfModifiedSince <span class="comment">//获取或设置 If-Modified-Since HTTP 标头的值。</span></span><br><span class="line">ImpersonationLevel <span class="comment">//获取或设置当前请求的模拟级别。(继承自 WebRequest)</span></span><br><span class="line">KeepAlive <span class="comment">//获取或设置一个值，该值指示是否与 Internet 资源建立持续型连接。</span></span><br><span class="line">MaximumAutomaticRedirections <span class="comment">//获取或设置请求将跟随的重定向的最大数目。</span></span><br><span class="line">MaximumResponseHeadersLength <span class="comment">//获取或设置响应标头允许的最大长度。</span></span><br><span class="line">MediaType <span class="comment">//获取或设置请求的媒体类型。</span></span><br><span class="line">Method <span class="comment">//获取或设置请求的方法。</span></span><br><span class="line">Pipelined <span class="comment">//获取或设置一个值，该值指示是否通过管线将请求传输到 Internet 资源。</span></span><br><span class="line">PreAuthenticate <span class="comment">//获取或设置一个值，该值指示是否随请求发送一个 Authorization 标头。</span></span><br><span class="line">ProtocolVersion <span class="comment">//获取或设置用于请求的 HTTP 版本。</span></span><br><span class="line">Proxy <span class="comment">//获取或设置请求的代理信息。</span></span><br><span class="line">ReadWriteTimeout <span class="comment">//获取或设置写入或读取流时的超时（以毫秒为单位）。</span></span><br><span class="line">Referer <span class="comment">//获取或设置 Referer HTTP 标头的值。</span></span><br><span class="line">RequestUri <span class="comment">//获取请求的原始统一资源标识符 (URI)。</span></span><br><span class="line">SendChunked <span class="comment">//获取或设置一个值，该值指示是否将数据分段发送到 Internet 资源。</span></span><br><span class="line">ServerCertificateValidationCallback <span class="comment">//获取或设置用于验证服务器证书的回调函数。</span></span><br><span class="line">ServicePoint <span class="comment">//获取用于请求的服务点。</span></span><br><span class="line">SupportsCookieContainer <span class="comment">//获取指示请求是否为 CookieContainer 提供支持的值。</span></span><br><span class="line">Timeout <span class="comment">//获取或设置 GetResponse() 和 GetRequestStream() 方法的超时值（以毫秒为单位）。</span></span><br><span class="line">TransferEncoding <span class="comment">//获取或设置 Transfer-encoding HTTP 标头的值。</span></span><br><span class="line">UnsafeAuthenticatedConnectionSharing <span class="comment">//获取或设置一个值，该值指示是否允许经过高速 NTLM 身份验证的连接共享。</span></span><br><span class="line">UseDefaultCredentials <span class="comment">//获取或设置一个 Boolean 值，该值控制是否随请求一起发送默认凭据。</span></span><br><span class="line">UserAgent <span class="comment">//获取或设置 User-agent HTTP 标头的值。</span></span><br></pre></td></tr></table></figure>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Abort() <span class="comment">//取消向 Internet 资源发出的请求。</span></span><br><span class="line">AddRange(Int32) <span class="comment">//向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。</span></span><br><span class="line">AddRange(Int32, Int32) <span class="comment">//向请求添加指定范围的字节范围标头。</span></span><br><span class="line">AddRange(Int64) <span class="comment">//向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。</span></span><br><span class="line">AddRange(Int64, Int64) <span class="comment">//向请求添加指定范围的字节范围标头。</span></span><br><span class="line">AddRange(String, Int32) <span class="comment">//向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。</span></span><br><span class="line">AddRange(String, Int32, Int32) <span class="comment">//向请求添加指定范围的范围标头。</span></span><br><span class="line">AddRange(String, Int64) <span class="comment">//向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。</span></span><br><span class="line">AddRange(String, Int64, Int64) <span class="comment">//向请求添加指定范围的范围标头。</span></span><br><span class="line">BeginGetRequestStream(AsyncCallback, Object) <span class="comment">//开始对用于写入数据的 Stream 对象执行异步请求。</span></span><br><span class="line">BeginGetResponse(AsyncCallback, Object) <span class="comment">//开始对 Internet 资源的异步请求。</span></span><br><span class="line">CreateObjRef(Type) <span class="comment">//创建一个对象，该对象包含生成用于与远程对象进行通信的代理所需的全部相关信息。(继承自 MarshalByRefObject)</span></span><br><span class="line">EndGetRequestStream(IAsyncResult) <span class="comment">//结束对用来写入数据的 Stream 对象的异步请求。</span></span><br><span class="line">EndGetRequestStream(IAsyncResult, TransportContext) <span class="comment">//结束对用于写入数据的 Stream 对象的异步请求，并输出与该流关联的 TransportContext。</span></span><br><span class="line">EndGetResponse(IAsyncResult) <span class="comment">//结束对 Internet 资源的异步请求。</span></span><br><span class="line">Equals(Object) <span class="comment">//确定指定的对象是否等于当前对象。(继承自 Object)</span></span><br><span class="line">GetHashCode() <span class="comment">//作为默认哈希函数。(继承自 Object)</span></span><br><span class="line">GetLifetimeService() <span class="comment">//检索控制此实例的生存期策略的当前生存期服务对象。(继承自 MarshalByRefObject)</span></span><br><span class="line">GetObjectData(SerializationInfo, StreamingContext) <span class="comment">//使用序列化目标对象时所需的数据填充 SerializationInfo。</span></span><br><span class="line">GetRequestStream() <span class="comment">//获取用于写入请求数据的 Stream 对象。</span></span><br><span class="line">GetRequestStream(TransportContext) <span class="comment">//获取用于写入请求数据的 Stream 对象，并输出与流关联的 TransportContext。</span></span><br><span class="line">GetRequestStreamAsync()<span class="comment">//当在子类中被重写时，将用于写入数据的 Stream 作为异步操作返回到 Internet 资源。(继承自 WebRequest)</span></span><br><span class="line">GetResponse()<span class="comment">//返回来自 Internet 资源的响应。</span></span><br><span class="line">GetResponseAsync()<span class="comment">//当在子代类中被重写时，将作为异步操作返回对 Internet 请求的响应。(继承自 WebRequest)</span></span><br><span class="line">GetType()<span class="comment">//获取当前实例的 Type。(继承自 Object)</span></span><br><span class="line">InitializeLifetimeService()<span class="comment">//获取生存期服务对象来控制此实例的生存期策略。(继承自 MarshalByRefObject)</span></span><br><span class="line">MemberwiseClone()<span class="comment">//创建当前 Object 的浅表副本。(继承自 Object)</span></span><br><span class="line">MemberwiseClone(Boolean)<span class="comment">//创建当前 MarshalByRefObject 对象的浅表副本。(继承自 MarshalByRefObject)</span></span><br><span class="line">ToString()<span class="comment">//返回表示当前对象的字符串。(继承自 Object)</span></span><br></pre></td></tr></table></figure>
<h3 id="Post-amp-Get"><a href="#Post-amp-Get" class="headerlink" title="Post&amp;Get"></a>Post&amp;Get</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POST方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">HttpPost</span>(<span class="params"><span class="built_in">string</span> Url, <span class="built_in">string</span> postDataStr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url);</span><br><span class="line">    request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    request.ContentType = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">    Encoding encoding = Encoding.UTF8;</span><br><span class="line">    <span class="built_in">byte</span>[] postData = encoding.GetBytes(postDataStr);</span><br><span class="line">    request.ContentLength = postData.Length;</span><br><span class="line">    Stream myRequestStream = request.GetRequestStream();</span><br><span class="line">    myRequestStream.Write(postData, <span class="number">0</span>, postData.Length);</span><br><span class="line">    myRequestStream.Close();</span><br><span class="line"></span><br><span class="line">    HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">    Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">    StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream, encoding);</span><br><span class="line">    <span class="built_in">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line">    myStreamReader.Close();</span><br><span class="line">    myResponseStream.Close();</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">        response.Close();</span><br><span class="line">    <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">        request.Abort();</span><br><span class="line">    <span class="keyword">return</span> retString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Post</span>(<span class="params"><span class="built_in">string</span> Url, <span class="built_in">string</span> Data, <span class="built_in">string</span> Referer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url);</span><br><span class="line">    request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    request.Referer = Referer;</span><br><span class="line">    <span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(Data);</span><br><span class="line">    request.ContentType = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">    request.ContentLength = bytes.Length;</span><br><span class="line">    Stream myResponseStream = request.GetRequestStream();</span><br><span class="line">    myResponseStream.Write(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line"></span><br><span class="line">    HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">    StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(response.GetResponseStream(), Encoding.UTF8);</span><br><span class="line">    <span class="built_in">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line"></span><br><span class="line">    myStreamReader.Close();</span><br><span class="line">    myResponseStream.Close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">        response.Close();</span><br><span class="line">    <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">        request.Abort();</span><br><span class="line">    <span class="keyword">return</span> retString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//GET方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">HttpGet</span>(<span class="params"><span class="built_in">string</span> Url, <span class="built_in">string</span> postDataStr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Url + (postDataStr == <span class="string">&quot;&quot;</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;?&quot;</span>) + postDataStr);</span><br><span class="line">    request.Proxy = <span class="literal">null</span>;</span><br><span class="line">    request.KeepAlive = <span class="literal">false</span>;</span><br><span class="line">    request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="comment">//request.ContentType = &quot;text/html;charset=UTF-8&quot;;</span></span><br><span class="line">    request.ContentType = <span class="string">&quot;application/json; charset=UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">    Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">    <span class="comment">//StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(&quot;utf-8&quot;));</span></span><br><span class="line">    StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream, Encoding.UTF8);</span><br><span class="line">    <span class="built_in">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line"></span><br><span class="line">    myStreamReader.Close();</span><br><span class="line">    myResponseStream.Close();</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">        response.Close();</span><br><span class="line">    <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">        request.Abort();</span><br><span class="line">    <span class="keyword">return</span> retString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><p>HttpClient是.NET4.5引入的一个HTTP客户端库，其命名空间为 System.Net.Http ，.NET 4.5之前我们可能使用WebClient和HttpWebRequest来达到相同目的<br>HttpClient利用了最新的面向任务模式，使得处理异步请求非常容易<br>它适合用于多次请求操作，一般设置好默认头部后，可以进行重复多次的请求，基本上用一个实例可以提交任何的HTTP请求<br>HttpClient有预热机制，第一次进行访问时比较慢，所以不应该用到HttpClient就new一个出来，应该使用单例或其他方式获取HttpClient的实例</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">HttpClient() <span class="comment">//使用释放此实例时释放的 HttpClientHandler 初始化 HttpClient 类的新实例。</span></span><br><span class="line">HttpClient(HttpMessageHandler) <span class="comment">//使用指定的处理程序初始化 HttpClient 类的新实例。 处理程序在释放此实例时被释放。</span></span><br><span class="line">HttpClient(HttpMessageHandler, Boolean) <span class="comment">//使用提供的处理程序初始化 HttpClient 类的新实例，并指定在释放此实例时是否应释放该处理程序。</span></span><br></pre></td></tr></table></figure>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">BaseAddress<span class="comment">//获取或设置用于发送请求的 Internet 资源的统一资源标识符 (URI) 的基址。</span></span><br><span class="line">DefaultProxy<span class="comment">//获取或设置全局 HTTP 代理。</span></span><br><span class="line">DefaultRequestHeaders<span class="comment">//获取应与每个请求一起发送的标头。</span></span><br><span class="line">DefaultRequestVersion<span class="comment">//获取或设置对此 HttpClient 实例发出的后续请求使用的默认 HTTP 版本。</span></span><br><span class="line">MaxResponseContentBufferSize<span class="comment">//获取或设置要在读取响应内容时缓冲的最大字节数。</span></span><br><span class="line">Timeout<span class="comment">//获取或设置请求超时前等待的时间跨度。</span></span><br></pre></td></tr></table></figure>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">CancelPendingRequests()<span class="comment">//取消该实例上的所有挂起的请求。</span></span><br><span class="line">DeleteAsync(String)<span class="comment">//以异步操作将 DELETE 请求发送给指定 URI。</span></span><br><span class="line">DeleteAsync(String, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span></span><br><span class="line">DeleteAsync(Uri)<span class="comment">//以异步操作将 DELETE 请求发送给指定 URI。</span></span><br><span class="line">DeleteAsync(Uri, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span></span><br><span class="line">Dispose()<span class="comment">//释放由 HttpMessageInvoker 使用的非托管资源和托管资源。(继承自 HttpMessageInvoker)</span></span><br><span class="line">Dispose(Boolean)<span class="comment">//释放由 HttpClient 使用的非托管资源，并可根据需要释放托管资源。</span></span><br><span class="line">Equals(Object)<span class="comment">//确定指定的对象是否等于当前对象。(继承自 Object)</span></span><br><span class="line">GetAsync(String)<span class="comment">//以异步操作将 GET 请求发送给指定 URI。</span></span><br><span class="line">GetAsync(String, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(String, HttpCompletionOption)<span class="comment">//用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(String, HttpCompletionOption, CancellationToken)<span class="comment">//用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(Uri)<span class="comment">//以异步操作将 GET 请求发送给指定 URI。</span></span><br><span class="line">GetAsync(Uri, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(Uri, HttpCompletionOption)<span class="comment">//用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetAsync(Uri, HttpCompletionOption, CancellationToken)<span class="comment">//用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span></span><br><span class="line">GetByteArrayAsync(String)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span></span><br><span class="line">GetByteArrayAsync(Uri)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span></span><br><span class="line">GetHashCode()<span class="comment">//作为默认哈希函数。(继承自 Object)</span></span><br><span class="line">GetStreamAsync(String)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span></span><br><span class="line">GetStreamAsync(Uri)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span></span><br><span class="line">GetStringAsync(String)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span></span><br><span class="line">GetStringAsync(Uri)<span class="comment">//将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span></span><br><span class="line">GetType()<span class="comment">//获取当前实例的 Type。(继承自 Object)</span></span><br><span class="line">MemberwiseClone()<span class="comment">//创建当前 Object 的浅表副本。(继承自 Object)</span></span><br><span class="line">PatchAsync(String, HttpContent)<span class="comment">//以异步操作方式将 PATCH 请求发送到指定为字符串的 URI。</span></span><br><span class="line">PatchAsync(String, HttpContent, CancellationToken)<span class="comment">//以异步操作方式将带有取消令牌的 PATCH 请求发送到表示为字符串的 URI。</span></span><br><span class="line">PatchAsync(Uri, HttpContent)<span class="comment">//以异步操作方式发送 PATCH 请求。</span></span><br><span class="line">PatchAsync(Uri, HttpContent, CancellationToken)<span class="comment">//以异步操作方式发送带有取消令牌的 PATCH 请求。</span></span><br><span class="line">PostAsync(String, HttpContent)<span class="comment">//以异步操作将 POST 请求发送给指定 URI。</span></span><br><span class="line">PostAsync(String, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 POST 请求。</span></span><br><span class="line">PostAsync(Uri, HttpContent)<span class="comment">//以异步操作将 POST 请求发送给指定 URI。</span></span><br><span class="line">PostAsync(Uri, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 POST 请求。</span></span><br><span class="line">PutAsync(String, HttpContent)<span class="comment">//以异步操作将 PUT 请求发送给指定 URI。</span></span><br><span class="line">PutAsync(String, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 PUT 请求。</span></span><br><span class="line">PutAsync(Uri, HttpContent)<span class="comment">//以异步操作将 PUT 请求发送给指定 URI。</span></span><br><span class="line">PutAsync(Uri, HttpContent, CancellationToken)<span class="comment">//用以异步操作的取消标记发送 PUT 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage, CancellationToken)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage, HttpCompletionOption)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)<span class="comment">//以异步操作发送 HTTP 请求。</span></span><br><span class="line">ToString()<span class="comment">//返回表示当前对象的字符串。(继承自 Object)</span></span><br></pre></td></tr></table></figure>
<h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h3><p>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式</p>
<h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><p>默认不会实例化，什么时候用什么时候new</p>
<h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><p>类初始化时,会立即加载该对象，线程天生安全,调用效率高</p>
<h3 id="双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL，即 double-checked locking）"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h3><p>这种方式采用双锁机制，安全且在多线程情况下能保持高性能</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpClientHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> LockObj = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpClient client = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClientHelper</span>()</span> &#123;</span><br><span class="line">        GetInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpClient <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (LockObj)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (client == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">PostAsync</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> strJson</span>)<span class="comment">//post异步请求方法</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            HttpContent content = <span class="keyword">new</span> StringContent(strJson);</span><br><span class="line">            content.Headers.ContentType = <span class="keyword">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            <span class="comment">//由HttpClient发出异步Post请求</span></span><br><span class="line">            HttpResponseMessage res = <span class="keyword">await</span> client.PostAsync(url, content);</span><br><span class="line">            <span class="keyword">if</span> (res.StatusCode == System.Net.HttpStatusCode.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> str = res.Content.ReadAsStringAsync().Result;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Post</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> strJson</span>)<span class="comment">//post同步请求方法</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// private static HttpClient client = new HttpClient();</span></span><br><span class="line">           <span class="comment">//client.DefaultRequestHeaders.Accept.TryParseAdd(&quot;application/json&quot;);</span></span><br><span class="line">            HttpContent content = <span class="keyword">new</span> StringContent(strJson);</span><br><span class="line">            content.Headers.ContentType = <span class="keyword">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            <span class="comment">//client.DefaultRequestHeaders.Connection.Add(&quot;keep-alive&quot;);</span></span><br><span class="line">            <span class="comment">//由HttpClient发出Post请求</span></span><br><span class="line">            Task&lt;HttpResponseMessage&gt; res = client.PostAsync(url, content);</span><br><span class="line">            <span class="keyword">if</span> (res.Result.StatusCode == System.Net.HttpStatusCode.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> str = res.Result.Content.ReadAsStringAsync().Result;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> url</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// private static HttpClient client = new HttpClient();</span></span><br><span class="line">           <span class="comment">//client.DefaultRequestHeaders.Accept.TryParseAdd(&quot;application/json&quot;);</span></span><br><span class="line">            <span class="keyword">var</span> responseString = client.GetStringAsync(url);</span><br><span class="line">            <span class="keyword">return</span> responseString.Result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON字符串</title>
    <url>/JSON%E5%AD%97%E7%AC%A6%E4%B8%B2.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="C-生成方法"><a href="#C-生成方法" class="headerlink" title="C#生成方法"></a>C#生成方法</h2><h3 id="Newtonsoft"><a href="#Newtonsoft" class="headerlink" title="Newtonsoft"></a>Newtonsoft</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">String apiClass = <span class="string">&quot;apiClass&quot;</span>;</span><br><span class="line">String apiCommand = <span class="string">&quot;apiCommand&quot;</span>;</span><br><span class="line">JObject postedJObject = <span class="keyword">new</span> JObject();</span><br><span class="line">postedJObject.Add(<span class="string">&quot;class&quot;</span>, apiClass);</span><br><span class="line">postedJObject.Add(<span class="string">&quot;cmd&quot;</span>, apiCommand);</span><br><span class="line"></span><br><span class="line">String param1 = <span class="string">&quot;param1&quot;</span>;</span><br><span class="line">String param2 = <span class="string">&quot;param2&quot;</span>;</span><br><span class="line">JObject apiJsonParam = <span class="keyword">new</span> JObject();</span><br><span class="line">apiJsonParam.Add(<span class="string">&quot;param1&quot;</span>, param1);</span><br><span class="line">apiJsonParam.Add(<span class="string">&quot;param2&quot;</span>, param2);</span><br><span class="line">postedJObject.Add(<span class="string">&quot;param&quot;</span>, apiJsonParam);</span><br><span class="line">apiJsonParam[<span class="string">&quot;param1&quot;</span>] = param1);</span><br><span class="line">apiJsonParam[<span class="string">&quot;param2&quot;</span>] = param2);</span><br><span class="line">postedJObject[<span class="string">&quot;param&quot;</span>] = apiJsonParam;</span><br><span class="line"></span><br><span class="line">JArray jArray = <span class="keyword">new</span> JArray();</span><br><span class="line">JObject arr1 = <span class="keyword">new</span> JObject();</span><br><span class="line">arr1.Add(<span class="string">&quot;arr1&quot;</span>, <span class="string">&quot;this is arr1&quot;</span>);</span><br><span class="line">jArray.Add(arr1);</span><br><span class="line">JObject arr2 = <span class="keyword">new</span> JObject();</span><br><span class="line">arr2.Add(<span class="string">&quot;arr2&quot;</span>, <span class="string">&quot;this is arr2&quot;</span>);</span><br><span class="line">jArray.Add(arr2);</span><br><span class="line">postedJObject.Add(<span class="string">&quot;jarray&quot;</span>, jArray);</span><br><span class="line">String paramString = postedJObject.ToString(Newtonsoft.Json.Formatting.Indented, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;class&quot;</span>: <span class="string">&quot;apiClass&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;apiCommand&quot;</span>,</span><br><span class="line">  <span class="string">&quot;param&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;param1&quot;</span>: <span class="string">&quot;param1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;param2&quot;</span>: <span class="string">&quot;param2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;jarray&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;arr1&quot;</span>: <span class="string">&quot;this is arr1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;arr2&quot;</span>: <span class="string">&quot;this is arr2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>string StrJson = JsonConvert.SerializeObject(Classobj);</p>
<h4 id="读取保存JSON文件"><a href="#读取保存JSON文件" class="headerlink" title="读取保存JSON文件"></a>读取保存JSON文件</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> json = <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(filepath, FileMode.Open, System.IO.FileAccess.Read, FileShare.ReadWrite))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(fs, Encoding.GetEncoding(<span class="string">&quot;gb2312&quot;</span>)))</span><br><span class="line">  &#123;</span><br><span class="line">    json = sr.ReadToEnd().ToString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> json = GetFileJson(filepath);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(fileFullPath, FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite, FileShare.ReadWrite))</span><br><span class="line">&#123;</span><br><span class="line">    fs.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    fs.SetLength(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(fs, Encoding.UTF8))</span><br><span class="line">    &#123;</span><br><span class="line">        sw.WriteLine(strJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ClassA a = JsonConvert.DeserializeObject&lt;ClassA&gt;(strResult);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; lstStuModel = <span class="keyword">new</span> List&lt;Student&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> Student()&#123;ID=<span class="number">1</span>,Name=<span class="string">&quot;Name1&quot;</span>,Age=<span class="number">250</span>,Sex=<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line"><span class="keyword">new</span> Student()&#123;ID=<span class="number">2</span>,Name=<span class="string">&quot;Name2&quot;</span>,Age=<span class="number">300</span>,Sex=<span class="string">&quot;女&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json.NET序列化</span></span><br><span class="line"><span class="built_in">string</span> jsonData = JsonConvert.SerializeObject(lstStuModel);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json.NET反序列化</span></span><br><span class="line"><span class="built_in">string</span> json = <span class="string">@&quot;&#123; &#x27;Name&#x27;:&#x27;Name1&#x27;,&#x27;Age&#x27;:&#x27;3000&#x27;,&#x27;ID&#x27;:&#x27;1&#x27;,&#x27;Sex&#x27;:&#x27;女&#x27;&#125;&quot;</span>;</span><br><span class="line">Student descJsonStu = JsonConvert.DeserializeObject&lt;Student&gt;(json);<span class="comment">//反序列化</span></span><br><span class="line">Student descJsonStu = JsonConvert.DeserializeObject&lt;Student&gt;(json, Formatting.Indented);<span class="comment">//反序列化, 加缩进</span></span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;反序列化： ID=&#123;0&#125;,Name=&#123;1&#125;,Sex=&#123;2&#125;,Sex=&#123;3&#125;&quot;</span>, descJsonStu.ID, descJsonStu.Name, descJsonStu.Age, descJsonStu.Sex));</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化时默认都是处理公共成员，如果需要处理非公共成员，就要在该成员上加特性[JsonProperty]</span></span><br><span class="line"><span class="comment">//类中所有公有成员会被序列化，如果不想被序列化，可以用特性JsonIgnore</span></span><br><span class="line">[<span class="meta">JsonObject(MemberSerialization.OptOut)</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">TestItem</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">JsonProperty</span>]</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> testNo;</span><br><span class="line">  [<span class="meta">JsonIgnore</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> testItem;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> testValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所有的成员不会被序列化，类中的成员只有标有特性JsonProperty的才会被序列化</span></span><br><span class="line">[<span class="meta">JsonObject(MemberSerialization.OptIn)</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">TestItem1</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">JsonIgnore</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> testItem;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> testValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他格式"><a href="#其他格式" class="headerlink" title="其他格式"></a>其他格式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化时忽略空值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JsonProperty(NullValueHandling = NullValueHandling.Ignore)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> itemResult;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">JsonProperty(NullValueHandling = NullValueHandling.Ignore)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> equipmentData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义时间格式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">CustomDateTimeConverter</span> : <span class="title">IsoDateTimeConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDateTimeConverter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.DateTimeFormat = <span class="string">&quot;yyyy-MM-dd HH:mm:ss.fff&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">JsonConverter(typeof(CustomDateTimeConverter))</span>]</span><br><span class="line"><span class="keyword">public</span> DateTime sendTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义序列化名称</span></span><br><span class="line">[<span class="meta">JsonProperty(PropertyName = <span class="string">&quot;CName&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="全局设置-常用"><a href="#全局设置-常用" class="headerlink" title="全局设置(常用)"></a>全局设置(常用)</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Newtonsoft.Json.JsonSerializerSettings setting = <span class="keyword">new</span> Newtonsoft.Json.JsonSerializerSettings();</span><br><span class="line">JsonConvert.DefaultSettings = <span class="keyword">new</span> Func&lt;JsonSerializerSettings&gt;(() =&gt; &#123;</span><br><span class="line">    <span class="comment">//日期类型默认格式化处理</span></span><br><span class="line">    setting.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat;</span><br><span class="line">    setting.DateFormatString = <span class="string">&quot;yyyy-MM-dd HH:mm:ss.ffff&quot;</span>; </span><br><span class="line">    <span class="comment">//空值处理</span></span><br><span class="line">    setting.NullValueHandling = NullValueHandling.Ignore; </span><br><span class="line">    <span class="comment">//自定义类型转换</span></span><br><span class="line">    setting.Converters.Add(<span class="keyword">new</span> 自定义类型转换()); </span><br><span class="line">    <span class="keyword">return</span> setting;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Newtonsoft.Json.JsonSerializerSettings setting = <span class="keyword">new</span> Newtonsoft.Json.JsonSerializerSettings &#123;</span><br><span class="line">    <span class="comment">//日期类型默认格式化处理</span></span><br><span class="line">    setting.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat;</span><br><span class="line">    setting.DateFormatString = <span class="string">&quot;yyyy-MM-dd HH:mm:ss.ffff&quot;</span>; </span><br><span class="line">    <span class="comment">//空值处理</span></span><br><span class="line">    setting.NullValueHandling = NullValueHandling.Ignore; </span><br><span class="line">    <span class="comment">//自定义类型转换</span></span><br><span class="line">    setting.Converters.Add(<span class="keyword">new</span> 自定义类型转换()); </span><br><span class="line">    <span class="keyword">return</span> setting;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="匿名类型生成Json字符串"><a href="#匿名类型生成Json字符串" class="headerlink" title="匿名类型生成Json字符串"></a>匿名类型生成Json字符串</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> &#123;</span><br><span class="line">  Name = <span class="string">&quot;Jone&quot;</span>,</span><br><span class="line">  Age = <span class="number">18</span>,</span><br><span class="line">  Address = <span class="keyword">new</span> &#123;</span><br><span class="line">    Street = <span class="string">&quot;123 St&quot;</span>,</span><br><span class="line">    City = <span class="string">&quot;Shanghai&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> jsonString = JsonConvert.SerializeObject(obj, Formatting.Indented);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>动态EV(ETP)测试</title>
    <url>/%E5%8A%A8%E6%80%81EV-ETP-%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<p><center>说明</center><br>动态EV或ETP工位简单说明<br><span id="more"></span></p>
<p>新版本ETP测试工况分四部分：加速、匀速、滑行、制动<br>测试内容除了基本电流电压等BMS数据读取还包括各阶段的效率及能量消耗率的计算等</p>
<h2 id="程序配置"><a href="#程序配置" class="headerlink" title="程序配置"></a>程序配置</h2><p>最新程序增加是否为同轴滚筒的配置：在EvDynamicTestCurve.xml中isCoaxial配置为true表示为同轴滚筒<br>非同轴滚筒计算时F为左右滚筒的合力</p>
<h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p>加速、匀速过程中电能转化为动能，效率计算公式为 <strong>Fvt/UIt</strong><br>滑行、制动过程中动能转化为电能，效率计算公式为 <strong>UIt/Fvt</strong><br>其中F、v、U、I均为各阶段的平均值</p>
<h3 id="能量消耗率"><a href="#能量消耗率" class="headerlink" title="能量消耗率"></a>能量消耗率</h3><p>C = E/D 单位为(kW<em>h)/100km<br>程序中的计算公式为：整个过程中的平均100</em>UIt/d</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于I为负数时表示放电加速所以计算时简单处理为<br>I为负：效率 = Fvt/UIt<br>I为正：效率 = UIt/Fvt</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0.html</url>
    <content><![CDATA[<p><center>简介</center><br>记录刷题过程中遇到问题及新知识<br><span id="more"></span></p>
<h2 id="System-Collections"><a href="#System-Collections" class="headerlink" title="System.Collections"></a>System.Collections</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>在C#中，数组由于是固定长度的，由于这种限制不方便，所以出现了ArrayList<br>ArrayList是可变长数组，可以将任意多的数据Add到ArrayList里面。其内部维护的数组，当长度不足时，会自动扩容为原来的两倍。<br>但是ArrayList也有一个缺点，就是存入ArrayList里面的数据都是Object类型的，所以如果将值类型存入和取出的时候会发生装箱、拆箱操作(就是值类型与引用类型之间的转换)，这个会影响程序性能。在.Net 2.0泛型出现以后，就提供了List<T>。</p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List<T></h3><p>List<T>是ArrayList的泛型版本，它不再需要装箱拆箱，直接取，直接用，它基本与ArrayList一致，不过在使用的时候要先设置好它的类型，而设置好类型之后，不是这种类型的数据，是不允许Add进去的<br>就性能来说，如果要存进数组的只有一种数据，那么无疑List<T>是最优选择<br><strong>List存储的数据是有序并且可以重复的。 采用链表存储数据</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; ListInt = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add(T)</span><br><span class="line">AddRange(IEnumerable&lt;T&gt;)</span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Find(Predicate&lt;T&gt;) <span class="comment">//搜索与指定谓词所定义的条件相匹配的元素，并返回整个 List&lt;T&gt; 中的第一个匹配元素</span></span><br><span class="line">FindAll(Predicate&lt;T&gt;) <span class="comment">//检索与指定谓词定义的条件匹配的所有元素 返回List&lt;&gt;</span></span><br><span class="line">IndexOf(T)	<span class="comment">//搜索指定的对象，并返回整个 List&lt;T&gt; 中第一个匹配项的从零开始的索引</span></span><br><span class="line">LastIndexOf(T)	<span class="comment">//搜索指定对象并返回整个 List&lt;T&gt; 中最后一个匹配项的从零开始索引</span></span><br><span class="line">IndexOf(T, Int32)	<span class="comment">//搜索指定对象并返回 List&lt;T&gt; 中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引</span></span><br><span class="line">IndexOf(T, Int32, Int32)	<span class="comment">//搜索指定对象并返回 List&lt;T&gt; 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引</span></span><br><span class="line">Insert(Int32, T)	<span class="comment">//将元素插入到 List&lt;T&gt; 中的指定索引处</span></span><br><span class="line">Remove(T) <span class="comment">//从 List&lt;T&gt; 中删除特定对象的第一个匹配项</span></span><br><span class="line">Reverse()	<span class="comment">//将整个 List&lt;T&gt; 中元素的顺序反转</span></span><br><span class="line">Reverse(Int32, Int32)	<span class="comment">//将指定范围中元素的顺序反转</span></span><br><span class="line">Sort()	<span class="comment">//使用默认比较器对整个 List&lt;T&gt; 中的元素进行排序</span></span><br><span class="line">ToArray()	<span class="comment">//将 List&lt;T&gt; 的元素复制到新数组中</span></span><br></pre></td></tr></table></figure>
<h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>HashTable是一种根据key查找非常快的键值数据结构，不能有重复key，而且由于其特点，其长度总是一个素数，所以扩容后容量会比2倍大一点点，加载因子为0.72f。<br>当要大量使用key来查找value的时候，HashTable无疑是最有选择，HashTable与ArrayList一样，是非泛型的，value存进去是object,存取会发生装箱、拆箱，所以出现了Dictionary<T,T></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count <span class="comment">//获取包含在 Hashtable 中的键/值对的数目</span></span><br><span class="line">Keys</span><br><span class="line">Values</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add(Object, Object)</span><br><span class="line">Clear()</span><br><span class="line">Clone()</span><br><span class="line">Contains(Object)</span><br><span class="line">ContainsKey(Object)</span><br><span class="line">ContainsValue(Object)</span><br><span class="line">GetHash(Object)	<span class="comment">//返回指定键的哈希代码</span></span><br><span class="line">Remove(Object)</span><br></pre></td></tr></table></figure>
<h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary<T,T></h3><p>Dictionary<T,T>是HashTable的泛型版本，存取同样快，但是不需要装箱和拆箱了。而且，其优化了算法，Hashtable是0.72，它的浪费容量少了很多<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">string</span>,Person&gt; Dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,Person&gt;();</span><br></pre></td></tr></table></figure></p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet<T></h3><p>HashSet<T>类，算法，存储结构都与哈希表相同，主要是设计用来做高性能集运算的，例如对两个集合求交集、并集、差集等。集合中包含一组不重复出现且无特定顺序的元素<br><strong>HashSet存储的数据是无序并且唯一的，底层使用HashMap存储数据</strong><br>Add(T) 方法返回值为如果该元素添加到 HashSet<T> 对象中则为 true；如果该元素已存在则为 false</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">HashSet&lt;<span class="built_in">int</span>&gt; numbers1;</span><br><span class="line">HashSet&lt;<span class="built_in">int</span>&gt; numbers2;</span><br><span class="line"><span class="comment">//分别进行numbers1和numbers2的值初始化或赋值</span></span><br><span class="line">numbers1.UnionWith(numbers2);<span class="comment">//求两个集合的并集。</span></span><br><span class="line">numbers1.IntersectWith(numbers2);<span class="comment">//求两个集合的交集。</span></span><br><span class="line">numbers1.ExceptWith(numbers2);<span class="comment">//求两个集合的差集。</span></span><br><span class="line">numbers1.SymmetricExceptWith(numbers2);<span class="comment">//求两个集合的对称差集。</span></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count <span class="comment">//获取集中包含的元素数</span></span><br><span class="line">Comparer <span class="comment">//获取用于确定集中的值是否相等的 IEqualityComparer&lt;T&gt; 对象</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Add() <span class="comment">//将项目添加到HashSet之中</span></span><br><span class="line">Clear() <span class="comment">//清空HashSet里面的值</span></span><br><span class="line">Remove() <span class="comment">//从HashSet中移除值</span></span><br><span class="line">Contains() <span class="comment">//判断HashSet是否包含指定项目</span></span><br><span class="line">Equals(Object) <span class="comment">//判断是否相等</span></span><br></pre></td></tr></table></figure>
<h3 id="Queue、Queue"><a href="#Queue、Queue" class="headerlink" title="Queue、Queue"></a>Queue、Queue<T></h3><p>Queue队列，Queue<T>泛型队列，队列，先进先出</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Dequeue()	<span class="comment">//移除并返回位于 Queue&lt;T&gt; 开始处的对象</span></span><br><span class="line">Enqueue(T)	<span class="comment">//将一个对象添加到 Queue&lt;T&gt; 的末尾</span></span><br><span class="line">Peek()	<span class="comment">//返回位于 Queue&lt;T&gt; 开始处的对象但不将其移除</span></span><br></pre></td></tr></table></figure>
<h3 id="Stack、Stack"><a href="#Stack、Stack" class="headerlink" title="Stack、Stack"></a>Stack、Stack<T></h3><p>Stack堆栈，先进后出</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Count</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Clear()</span><br><span class="line">Contains(T)</span><br><span class="line">Pop()	<span class="comment">//删除并返回 Stack&lt;T&gt; 顶部的对象</span></span><br><span class="line">Push(T)	<span class="comment">//在 Stack&lt;T&gt; 的顶部插入一个对象</span></span><br><span class="line">Peek()	<span class="comment">//返回位于 Stack&lt;T&gt; 顶部的对象但不将其移除</span></span><br><span class="line">TryPop(T)	<span class="comment">//返回一个值，该值指示 Stack&lt;T&gt; 的顶部是否有对象；如果有，则将其复制到 result 参数，并从 Stack&lt;T&gt; 中删除它</span></span><br></pre></td></tr></table></figure>
<h3 id="SortedList、SortedList"><a href="#SortedList、SortedList" class="headerlink" title="SortedList、SortedList"></a>SortedList、SortedList<TKey,TValue></h3><p>SortedList集合中的数据是有序的。可以通过key来匹配数据，也可以通过int下标来获取数据<br>添加操作比ArrayList，Hashtable略慢；查找、删除操作比ArrayList快，比Hashtable慢</p>
<h3 id="SortedDictionary"><a href="#SortedDictionary" class="headerlink" title="SortedDictionary"></a>SortedDictionary<TKey,TValue></h3><p>SortedDictionary<TKey,TValue>相比于SortedList<TKey,TValue>其性能优化了，SortedList<TKey,TValue>其内部维护的是数组而SortedDictionary<TKey,TValue>内部维护的是红黑树(平衡二叉树)的一种，因此其占用的内存，性能都好于SortedDictionary<TKey,TValue>。唯一差在不能用下标取值</p>
<h3 id="ListDictionary-单向链表-LinkedList-双向链表"><a href="#ListDictionary-单向链表-LinkedList-双向链表" class="headerlink" title="ListDictionary(单向链表),LinkedList(双向链表)"></a>ListDictionary(单向链表),LinkedList<T>(双向链表)</h3><p>List<T>,ArrayList,Hashtable等容器类，其内部维护的是数组Array来，ListDictionary和LinkedList<T>不用Array，而是用链表的形式来保存。链表最大的好处就是节约内存空间<br>ListDictionary是单向链表<br>LinkedList<T>双向链表。双向链表的优势，可以插入到任意位置</p>
<h3 id="HybridDictionary"><a href="#HybridDictionary" class="headerlink" title="HybridDictionary"></a>HybridDictionary</h3><p>HybridDictionary的类，充分利用了Hashtable查询效率高和ListDictionary占用内存空间少的优点，内置了Hashtable和ListDictionary两个容器，添加数据时内部逻辑如下:<br>当数据量小于8时，Hashtable为null，用ListDictionary保存数据<br>当数据量大于8时，实例化Hashtable，数据转移到Hashtable中，然后将ListDictionary置为null</p>
<h3 id="BitArray"><a href="#BitArray" class="headerlink" title="BitArray"></a>BitArray</h3><p>BitArray用于二进制运算，”或”、”非”、”与”、”异或非”等这种操作，只能存true或false</p>
<h2 id="字符串动态匹配算法"><a href="#字符串动态匹配算法" class="headerlink" title="字符串动态匹配算法"></a>字符串动态匹配算法</h2><p>BF算法<br>RK算法<br>BM算法<br>KPM算法<br>Sunday算法</p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>可理解为数列求通项过程<br>f(n) = f(n - 1) + f(n - 2)</p>
<h2 id="逻辑运算符短路效应"><a href="#逻辑运算符短路效应" class="headerlink" title="逻辑运算符短路效应"></a>逻辑运算符短路效应</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(A &amp;&amp; B)  <span class="comment">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(A || B) <span class="comment">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>栈与队列Stack&amp;Queue</title>
    <url>/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97Stack-Queue.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>线性表插入和删除操作不受限制 在任意位置进行<br>栈和队列是两种特殊的线性表。他们的数据元素之间具有顺序的逻辑关系，都采用顺序结构和链式结构存储</p>
<blockquote>
<p>栈的插入和删除操作只允许在线性表的尾端(栈顶Top)进行<br>队列插入操作限定在线性表的尾部而其它操作限定在表的头部进行</p>
</blockquote>
<p>栈的特点为后进先出，队列先进先出</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>表尾称为栈顶（Top）,另一端称为栈底（Bottom），当栈中没有数据元素时叫空栈（Empty Stack）<br>方法：</p>
<blockquote>
<p>Push（）入栈 //添加数据<br>Pop（）出栈 //删除数据，返回被删除的数据<br>Peek（）//取得栈顶的元素，不删除<br>ToArray() //方法创建数组并将堆栈元素复制到其中<br>Contains() //方法判断一个元素是否在栈中<br>Clear（）//清空所有数据<br>Count //取得栈中元素的个数</p>
</blockquote>
<p>接口定义：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStack</span>&#123;</span><br><span class="line"><span class="built_in">int</span> Count&#123;<span class="keyword">get</span>;&#125;<span class="comment">//求栈中元素个数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">GetLength</span>()</span>;<span class="comment">//求栈的长度</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span>()</span>;<span class="comment">//清空操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span>(<span class="params">T item</span>)</span>;<span class="comment">//入栈操作</span></span><br><span class="line"><span class="function">T <span class="title">Pop</span>()</span>;<span class="comment">//出栈操作</span></span><br><span class="line"><span class="function">T <span class="title">Peek</span>()</span>;<span class="comment">//取栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>栈的本质是一个线性表，线性表有两种存储形式，那么栈也有分为栈的顺序存储结构和栈的链式存储结构<br>用连续的存储空间来存储栈中的数据元素(使用数组)，这样的栈称为顺序栈(Sequence Stack)<br>类似于顺序表，用一维数组来存放顺序栈中的数据元素<br>栈顶指示器 top 设在数组下标为 0 的端，top随着插入和删除而变化，当栈为空时，top=-1</p>
<p>栈的另外一种存储方式是链式存储，这样的栈称为链栈(Linked Stack)<br>由于链栈的操作只是在一端进行，为了操作方便，把栈顶设在链表的头部，并且不需要头结点</p>
<p>示例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Stack&lt;T&gt; staA = new Stack&lt;T&gt;();</span></span><br><span class="line">Stack&lt;<span class="built_in">string</span>&gt; staA = <span class="keyword">new</span> Stack&lt;<span class="built_in">string</span>&gt;();            </span><br><span class="line">staA.Push(<span class="string">&quot;one&quot;</span>);            </span><br><span class="line">staA.Push(<span class="string">&quot;two&quot;</span>);            </span><br><span class="line">staA.Push(<span class="string">&quot;three&quot;</span>);            </span><br><span class="line">staA.Push(<span class="string">&quot;four&quot;</span>);            </span><br><span class="line">staA.Push(<span class="string">&quot;five&quot;</span>);            </span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> a <span class="keyword">in</span> staA)<span class="comment">//遍历元素，将之变成string类型            </span></span><br><span class="line">&#123;                </span><br><span class="line">  Console.WriteLine(a);            </span><br><span class="line">&#125;             </span><br><span class="line"><span class="comment">//peek是把栈顶元素弹出（取出），但不删除            </span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;取出的元素是：&#123;0&#125;&quot;</span>, staA.Peek());            </span><br><span class="line"><span class="comment">//pop是把栈顶的元素弹出（取出），并将其删除            </span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;删除的栈顶元素是：&#123;0&#125;&quot;</span>,staA .Pop ());             </span><br><span class="line"><span class="comment">//此时再输出一次栈的元素，会发现five被删除了            </span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> b <span class="keyword">in</span> staA)            </span><br><span class="line">&#123;                </span><br><span class="line">  Console.ForegroundColor = ConsoleColor.Blue;                </span><br><span class="line">  Console.WriteLine(b);            </span><br><span class="line">&#125;             </span><br><span class="line"><span class="comment">//ToArray从栈底到栈顶将一个栈复制到另一个栈中            </span></span><br><span class="line">Stack&lt;<span class="built_in">string</span>&gt; staB = <span class="keyword">new</span> Stack&lt;<span class="built_in">string</span>&gt;(staA.ToArray());            </span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> c <span class="keyword">in</span> staB)            </span><br><span class="line">&#123;                </span><br><span class="line">  Console.ForegroundColor = ConsoleColor.Cyan;                </span><br><span class="line">  Console.WriteLine(c);            </span><br><span class="line">&#125;             </span><br><span class="line">Console.WriteLine(<span class="string">&quot; &quot;</span>);            </span><br><span class="line">Console.ForegroundColor = ConsoleColor.DarkRed;            </span><br><span class="line"><span class="comment">//contains方法，判断一个元素是否在栈中            </span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;six是否在栈中？&quot;</span>);            </span><br><span class="line">Console.WriteLine(staA .Contains (<span class="string">&quot;six&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>插入操作的表尾称为队尾(Rear)，把进行其它操作的头部称为队头(Front)。当队列中没有数据元素时称为空队列(EmptyQueue)<br>方法：</p>
<blockquote>
<p>Enqueue() 入队（放在队尾）<br>Dequeue() 出队（移除队首元素，并返回被移除的元素）<br>Peek() 取得队首的元素，不移除<br>Clear() 清空元素</p>
</blockquote>
<p>接口定义：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IQueue</span>&lt;<span class="title">T</span>&gt;&#123;</span><br><span class="line"><span class="built_in">int</span> Count&#123;<span class="keyword">get</span>;&#125;<span class="comment">//取得队列长度的属性</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">GetLength</span>()</span>;<span class="comment">//求队列的长度</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span>;<span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span>()</span>;<span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span>(<span class="params">T item</span>)</span>;<span class="comment">//入队</span></span><br><span class="line"><span class="function">T <span class="title">Dequque</span>()</span>;<span class="comment">//出队</span></span><br><span class="line"><span class="function">T <span class="title">Peek</span>()</span>;<span class="comment">//取队头元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用连续的存储空间来存储队列中的数据元素，这样的队列称为顺序队列(SequenceQueue)<br>类似于顺序栈，用一维数组来存放顺序队列中的数据元素。队头位置设在数组下标为 0 的端，用 front 表示；队尾位置设在数组的另一端，用rear 表示<br>front 和 rear 随着插入和删除而变化。当队列为空时， front=rear=-1</p>
<p>队列的另外一种存储方式是链式存储，这样的队列称为链队列(LinkedQueue)<br>由于链队列的操作只是在一端进行，为了操作方便，把队头设在链表的头部，并且不需要头结点</p>
]]></content>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配算法</title>
    <url>/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫基础</title>
    <url>/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>URL格式：<a href="http://host[:port][path">http://host[:port][path</a>]<br>host：合法的Internet主机域名或IP地址<br>port：端口号，默认为80<br>path：请求资源的路径</p>
<h2 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Urllib库</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>urllib.request</td>
<td>请求模块</td>
</tr>
<tr>
<td>urllib.error</td>
<td>异常处理模块</td>
</tr>
<tr>
<td>urllib.parse</td>
<td>url解析模块</td>
</tr>
<tr>
<td>urllib.robotparser</td>
<td>robots.txt解析模块</td>
</tr>
</tbody>
</table>
</div>
<p>urllib.request.urlopen(url,data=None,[timeout,]*,cafile=None,cadefault=False,context=None)</p>
<h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url,params=<span class="literal">None</span>,**kwargs)</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>Requests方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>requests.request()</td>
<td>构造一个请求，支撑以下各方法</td>
</tr>
<tr>
<td>requests.get()</td>
<td>获取HTML网页，对应HTTP的GET</td>
</tr>
<tr>
<td>requests.head()</td>
<td>获取HTMLheader，对应HTML的HEAD</td>
</tr>
<tr>
<td>requests.post()</td>
<td>向HTML网页提交POST请求</td>
</tr>
<tr>
<td>requests.put()</td>
<td>向HTML网页提交PUT请求</td>
</tr>
<tr>
<td>requests.patch()</td>
<td>向HTML网页提交局部修改请求</td>
</tr>
<tr>
<td>requests.delete()</td>
<td>向HTML网页提交删除请求</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>Requests对象属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>r.status_code</td>
<td>HTTP请求返回的状态，200连接成功，404表示失败  </td>
</tr>
<tr>
<td>r.text</td>
<td>HTTP响应内容的字符串形式，URL对应的页面内容</td>
</tr>
<tr>
<td>r.encoding</td>
<td>HTTP header中猜测的响应内容编码方式  </td>
</tr>
<tr>
<td>r.apparent_encoding</td>
<td>内容中分析出的响应内容编码格式（备选编码格式）  </td>
</tr>
<tr>
<td>r.content</td>
<td>HTTP响应内容的二进制格式</td>
</tr>
</tbody>
</table>
</div>
<p>r.encoding：如果header中不存在charset，则默认编码为ISO-8859-1(不支持解析中文)<br>将r.apparent_encoding设置为utf-8可解决上述可能出现乱码问题</p>
<h3 id="baidu搜索关键词"><a href="#baidu搜索关键词" class="headerlink" title="baidu搜索关键词"></a>baidu搜索关键词</h3><p>百度搜索关键词对应：wd=keyword</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kv = &#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;Python&#x27;</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">&quot;http://www.baidu.com/s&quot;</span>,params = kv)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="通用代码框架"><a href="#通用代码框架" class="headerlink" title="通用代码框架"></a>通用代码框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    header = &#123;<span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line">    r = requests.get(url,headers=header)</span><br><span class="line">    r.raise_for_status() <span class="comment">#如果状态不是200则引发HTTPError异常</span></span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;异常&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  url = <span class="string">&quot;http://&quot;</span></span><br><span class="line">  <span class="built_in">print</span>(GetHTMLText(url))</span><br></pre></td></tr></table></figure>
<h2 id="信息标记形式"><a href="#信息标记形式" class="headerlink" title="信息标记形式"></a>信息标记形式</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>标签、属性、内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>有类型的键值对表示<br>无法注释</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;value1&quot;</span><span class="punctuation">,</span><span class="string">&quot;value2&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;subkey&quot;</span><span class="punctuation">:</span><span class="string">&quot;subvalue&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>无类型键值对</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">key:value</span></span><br><span class="line"><span class="string">key:#comments</span></span><br><span class="line"><span class="string">-value1</span></span><br><span class="line"><span class="string">-value2</span></span><br><span class="line"><span class="attr">key:</span></span><br><span class="line">  <span class="string">subkey:subvalue</span></span><br></pre></td></tr></table></figure>
<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开网页</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(browser.page_source)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找单个元素</span></span><br><span class="line">first = browser.find_element_by_id(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">second = browser.find_element_by_css_selector(<span class="string">&#x27;#q&#x27;</span>)<span class="comment"># #表示id,.表示类,不加前缀表示标签</span></span><br><span class="line">third = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;q&quot;]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(first,second,third)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 通用方法</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">common = browser.find_element(By.ID,<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">commons = browser.find_elements(By.ID,<span class="string">&#x27;q&#x27;</span>) <span class="comment"># 查找多个元素</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>
<h3 id="元素交互"><a href="#元素交互" class="headerlink" title="元素交互"></a>元素交互</h3><h4 id="实现淘宝搜索功能"><a href="#实现淘宝搜索功能" class="headerlink" title="实现淘宝搜索功能"></a>实现淘宝搜索功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;https://www.taobao.com&quot;</span>)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element_by_id(<span class="string">&#x27;q&#x27;</span>) <span class="comment">#找到网页中搜索框对应的id</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPhone&#x27;</span>) <span class="comment">#向搜索框中传递的参数</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">input</span>.clear()</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPad&#x27;</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">&#x27;btn_search&#x27;</span>) <span class="comment">#找到搜索按钮对应的name</span></span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="爬取图片、视频等"><a href="#爬取图片、视频等" class="headerlink" title="爬取图片、视频等"></a>爬取图片、视频等</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">&quot;&quot;</span></span><br><span class="line">root = <span class="string">&quot;D://Python//Pic&quot;</span></span><br><span class="line">path = root + url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">    os.mkdir(root)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f</span><br><span class="line">      f.write(r.content)</span><br><span class="line">      f.close()</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;文件保存成功&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件已存在&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;爬取失败&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>工作日志</title>
    <url>/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97.html</url>
    <content><![CDATA[<p><center></center><br>记录所有项目工作日志以便查询，年份、项目号分类<br><span id="more"></span></p>
<h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><h3 id="March3"><a href="#March3" class="headerlink" title="March3"></a>March3</h3><p>郑州日产登录工位偶发卡死现象处理<br>1、更改原有C++程序，在更新登录表处增加try…catch…<br>2、用新程序替换，程序中UDP更新服务器表格应在程序处理前</p>
<p>解决方式：更新登录表数据增加超时时间为0解决</p>
<p>金华零跑MES</p>
<h3 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h3><h4 id="青岛五菱"><a href="#青岛五菱" class="headerlink" title="青岛五菱"></a>青岛五菱</h4><p>双轴制动台改单轴测试小轴距E50ABS<br>现场制动台车型获取说明:扫完VIN后通过桌面上小黄车的软件从MES获取车型信息包括轴距、<strong>ABS类型</strong>等，调用的测试流程在SpecialNeed中进行判断赋值，车型库不需要手动维护，MES下载后自动维护。<br>现场更新不兼容程序有：</p>
<blockquote>
<p>CANCmdLib.dll\<br>CanCmdOpraLib.dll 更改后100V车型K线通讯出现指令数据丢失\<br>MBKDeviceWithOPC.dll 更新后无法控制滚筒转动</p>
</blockquote>
<p>E50ABS程序中读取DTC无法判断五菱现场的当前故障码</p>
<h3 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h3><h4 id="郑州日产"><a href="#郑州日产" class="headerlink" title="郑州日产"></a>郑州日产</h4><p>增加compactor标定</p>
<h4 id="中牟日产"><a href="#中牟日产" class="headerlink" title="中牟日产"></a>中牟日产</h4><p>增加国六打印程序，客户只查看不打印，很多信息均从客户配置的excel中读取</p>
<h3 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h3><h4 id="十堰小康"><a href="#十堰小康" class="headerlink" title="十堰小康"></a>十堰小康</h4><p>RFID调试、国六数据上传国家</p>
<h4 id="长春一汽轿车"><a href="#长春一汽轿车" class="headerlink" title="长春一汽轿车"></a>长春一汽轿车</h4><p>新增E111ESP标定和动态测试，跟205、141程序一样。</p>
<p>更改4线服务器线号<br>更改3线转毂线号，速度表主键丢失导致速度表无法上传</p>
<h4 id="一汽红旗"><a href="#一汽红旗" class="headerlink" title="一汽红旗"></a>一汽红旗</h4><p>更新绝缘检测程序，提升20s测试节拍<br>调试HUD，测试完成传结果给手持，更改测试项判断修正界面显示整体合格</p>
<h3 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h3><h4 id="十堰小康老厂"><a href="#十堰小康老厂" class="headerlink" title="十堰小康老厂"></a>十堰小康老厂</h4><p>四轮工位增加ACC标定<br>1017 - 流程调试完成，测试过程中左上反馈的角度与实际相反，标定顺序没问题标靶面对车的一面先低头、再平、再抬头。</p>
<pre><code> - 垂直合格范围-3~-1度存在疑问。
</code></pre><p>角度计算在RBABS_ShiYXiaoKang.ADASCalculate中的AEBCalculate(ECU回复指令;是否需要调整;调整圈数)</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">AEBCalculate</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] SepPara;</span><br><span class="line">        XmlFO.SepParams(sPara, <span class="number">3</span>, <span class="keyword">out</span> SepPara);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] bRecv = StringToBytes(SepPara[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] tmpBytes = <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; bRecv[<span class="number">4</span>], bRecv[<span class="number">3</span>] &#125;;</span><br><span class="line">        Int16 iHorizontal = BitConverter.ToInt16(tmpBytes, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">double</span> dHorizontal = (iHorizontal * <span class="number">0.01</span>);</span><br><span class="line">        XmlFO.LogOut(<span class="string">&quot;ACCCalculate&quot;</span>, <span class="string">&quot;dHorizontal:&quot;</span> + dHorizontal);</span><br><span class="line">        <span class="built_in">double</span> dHorTurns = dHorizontal / <span class="number">0.5359</span>;</span><br><span class="line"></span><br><span class="line">        tmpBytes = <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; bRecv[<span class="number">6</span>], bRecv[<span class="number">5</span>] &#125;;</span><br><span class="line">        Int16 iVertical = BitConverter.ToInt16(tmpBytes, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">double</span> dVertical = (iVertical * <span class="number">0.01</span>);</span><br><span class="line">        XmlFO.LogOut(<span class="string">&quot;ACCCalculate&quot;</span>, <span class="string">&quot;dVertical:&quot;</span> + dVertical);</span><br><span class="line">        <span class="built_in">double</span> dVerTurns = (<span class="number">-2</span> - dVertical) / <span class="number">0.7729</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> adjustTips = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (dVertical &lt; <span class="number">-3</span> || dVertical &gt; <span class="number">-1</span></span><br><span class="line">            || dHorizontal &lt; <span class="number">-0.3</span> || dHorizontal &gt; <span class="number">0.3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Res</span></span><br><span class="line">            XmlFO.ListObject[SepPara[<span class="number">1</span>]].xValue = <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">            adjustTips = <span class="string">&quot;左上：&quot;</span> + (dHorTurns &gt; <span class="number">0</span> ? <span class="string">&quot;逆时针：&quot;</span> + dHorTurns.ToString(<span class="string">&quot;0.00&quot;</span>) + <span class="string">&quot;圈&quot;</span> :</span><br><span class="line">                <span class="string">&quot;顺时针：&quot;</span> + (-dHorTurns).ToString(<span class="string">&quot;0.00&quot;</span>) + <span class="string">&quot;圈&quot;</span>);</span><br><span class="line">            adjustTips += <span class="string">&quot;右下：&quot;</span> + (dVerTurns &gt; <span class="number">0</span> ? <span class="string">&quot;逆时针：&quot;</span> + dVerTurns.ToString(<span class="string">&quot;0.00&quot;</span>) + <span class="string">&quot;圈&quot;</span> :</span><br><span class="line">                <span class="string">&quot;顺时针：&quot;</span> + (-dVerTurns).ToString(<span class="string">&quot;0.00&quot;</span>) + <span class="string">&quot;圈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            XmlFO.ListObject[SepPara[<span class="number">1</span>]].xValue = <span class="string">&quot;N&quot;</span>;</span><br><span class="line">            adjustTips = <span class="string">&quot;水平角度：&quot;</span> + dHorizontal.ToString(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">            adjustTips += <span class="string">&quot;垂直角度：&quot;</span> + dVertical.ToString(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">            adjustTips += <span class="string">&quot;; 不需要调整&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        XmlFO.ListObject[SepPara[<span class="number">2</span>]].xValue = adjustTips;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="武汉东风雷诺"><a href="#武汉东风雷诺" class="headerlink" title="武汉东风雷诺"></a>武汉东风雷诺</h4><p>卡规侧滑 Modbus读取<br>卡规：192.168.100.17 : 502<br>侧滑：192.168.100.18 : 502</p>
<p>03读取保持寄存器，地址为 C0<br>卡规：0x0B, 0x03, 0x00, 0x00, 0x00, 0x06, 0xFF, 0x03, 0x00, 0xC0, 0x00, 0x02<br>侧滑: 0x0B, 0x03, 0x00, 0x00, 0x00, 0x06, 0xFF, 0x03, 0x00, 0xC0, 0x00, 0x02<br>      0x0B, 0x01, 0x00, 0x00, 0x00, 0x06, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01<br>      0x0F, 0x03, 0x00, 0x00, 0x00, 0x06, 0xFF, 0x03, 0x01, 0x80, 0x00, 0x01<br>      0x0F, 0x01, 0x00, 0x00, 0x00, 0x06, 0xFF, 0x06, 0x01, 0x80, 0x00, 0x00// 0xXX</p>
<p>四轮卡规读取：配置文件为MeasToolAnalogLeveler-LH.dat，二进制文件直接转换<br>公式为：<code>swaAngle = (AI - swaB) / (AI &gt; swaB ? positiveK : negativeK);</code></p>
<p>侧滑模拟量计算公式(来自fori源代码)：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> AI = RvBuf[<span class="number">9</span>] * <span class="number">256</span> + RvBuf[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">if</span> ((RvBuf[<span class="number">9</span>] &amp; <span class="number">0x80</span>) == <span class="number">0x80</span>)</span><br><span class="line">    AI = AI - <span class="number">65535</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (AI &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    AI = (AI &amp; <span class="number">0xFFF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    AI = System.Math.Abs(AI);</span><br><span class="line">    AI = -(((Int16)AI &amp; <span class="number">0xFFF0</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新侧滑软件，更新为Edison给的方式；<br>转毂在RBDVTEx基础上更改，新增RBDVTForiH</p>
<h3 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h3><h4 id="西安比亚迪"><a href="#西安比亚迪" class="headerlink" title="西安比亚迪"></a>西安比亚迪</h4><p>IPB升级，参考长沙比亚迪：四轮标定包括SAS、内部传感器、VPC<br>转毂做IPB泄漏检查和动态(ESC)，泄漏检查结果上传到福瑞数据库</p>
<h4 id="长春一汽轿车-1"><a href="#长春一汽轿车-1" class="headerlink" title="长春一汽轿车"></a>长春一汽轿车</h4><p>速度表无法上传：access数据库主键丢失</p>
<h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><h3 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h3><h4 id="武汉日产"><a href="#武汉日产" class="headerlink" title="武汉日产"></a>武汉日产</h4><p>速度制动台，驱动程序同转毂<br>技术协议中包含：制动、速度、ABS、声级、刹车距离<br>目前只测试：制动、速度。</p>
<h4 id="武汉东风乘用车"><a href="#武汉东风乘用车" class="headerlink" title="武汉东风乘用车"></a>武汉东风乘用车</h4><p>DVT更新G35程序后1112ESC测试中出现故障判定不合格，换回以前的always文件解决(时间太久忘记改了什么，新程序测试结束多了读取故障码的步骤)</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>GAE AppID</title>
    <url>/GAE-AppID.html</url>
    <content><![CDATA[<p><center></center><br>GAEProxy AppID<br><span id="more"></span></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">testpro<span class="number">-199603</span>|mytestpro<span class="number">-233908</span>|justinxxnet01|xxnet<span class="number">-1</span>|xxnet<span class="number">-2</span>|xxnet<span class="number">-3</span>|xxnet<span class="number">-4</span>|xxnet<span class="number">-5</span>|xxnet<span class="number">-6</span>|xxnet<span class="number">-7</span>|xxnet<span class="number">-8</span>|xxnet<span class="number">-9</span>|xxnet<span class="number">-10</span>|xxnet<span class="number">-11</span>|xxnet<span class="number">-12</span>|xxnet<span class="number">-13</span>|xxnet<span class="number">-14</span>|xxnet<span class="number">-15</span>|xxnet<span class="number">-16</span>|xxnet<span class="number">-17</span>|xxnet<span class="number">-18</span>|xxnet<span class="number">-19</span>|xxnet<span class="number">-20</span>|xxnet<span class="number">-21</span>|xxnet<span class="number">-22</span>|xxnet<span class="number">-23</span>|xxnet<span class="number">-24</span>|xxnet<span class="number">-25</span>|xxnet<span class="number">-26</span>|xxnet<span class="number">-27</span>|xxnet<span class="number">-28</span>|xxnet<span class="number">-29</span>|xxnet<span class="number">-30</span>|xxnet<span class="number">-31</span>|xxnet<span class="number">-32</span>|xxnet<span class="number">-33</span>|xxnet<span class="number">-34</span>|xxnet<span class="number">-35</span>|xxnet<span class="number">-36</span>|xxnet<span class="number">-37</span>|xxnet<span class="number">-38</span>|xxnet<span class="number">-39</span>|xxnet<span class="number">-40</span>|xxnet<span class="number">-41</span>|xxnet<span class="number">-42</span>|xxnet<span class="number">-43</span>|xxnet<span class="number">-44</span>|xxnet<span class="number">-45</span>|xxnet<span class="number">-46</span>|xxnet<span class="number">-47</span>|xxnet<span class="number">-48</span>|xxnet<span class="number">-49</span>|xxnet<span class="number">-50</span>|xxnet<span class="number">-51</span>|xxnet<span class="number">-52</span>|xxnet<span class="number">-53</span>|xxnet<span class="number">-54</span>|xxnet<span class="number">-55</span>|xxnet<span class="number">-56</span>|xxnet<span class="number">-57</span>|xxnet<span class="number">-58</span>|xxnet<span class="number">-59</span>|xxnet<span class="number">-60</span>|xxnet<span class="number">-61</span>|xxnet<span class="number">-62</span>|xxnet<span class="number">-63</span>|xxnet<span class="number">-64</span>|xxnet<span class="number">-65</span>|xxnet<span class="number">-66</span>|xxnet<span class="number">-67</span>|xxnet<span class="number">-68</span>|xxnet<span class="number">-69</span>|xxnet<span class="number">-70</span>|xxnet<span class="number">-71</span>|xxnet<span class="number">-72</span>|xxnet<span class="number">-72</span>|xxnet<span class="number">-73</span>|xxnet<span class="number">-74</span>|xxnet<span class="number">-75</span>|xxnet<span class="number">-76</span>|xxnet<span class="number">-77</span>|xxnet<span class="number">-78</span>|xxnet<span class="number">-79</span>|xxnet<span class="number">-80</span>|xxnet<span class="number">-81</span>|xxnet<span class="number">-82</span>|xxnet<span class="number">-83</span>|xxnet<span class="number">-84</span>|xxnet<span class="number">-85</span>|xxnet<span class="number">-86</span>|xxnet<span class="number">-87</span>|xxnet<span class="number">-88</span>|xxnet<span class="number">-89</span>|xxnet<span class="number">-90</span>|xxnet<span class="number">-91</span>|xxnet<span class="number">-92</span>|xxnet<span class="number">-93</span>|xxnet<span class="number">-94</span>|xxnet<span class="number">-95</span>|xxnet<span class="number">-96</span>|xxnet<span class="number">-97</span>|xxnet<span class="number">-98</span>|xxnet<span class="number">-99</span>|xxnet<span class="number">-100</span>|xxnet<span class="number">-101</span>|xxnet<span class="number">-102</span>|xxnet<span class="number">-103</span>|xxnet<span class="number">-104</span>|xxnet<span class="number">-105</span>|xxnet<span class="number">-106</span>|xxnet<span class="number">-107</span>|xxnet<span class="number">-108</span>|xxnet<span class="number">-109</span>|xxnet<span class="number">-110</span>|xxnet<span class="number">-111</span>|xxnet<span class="number">-112</span>|xxnet<span class="number">-113</span>|xxnet<span class="number">-114</span>|xxnet<span class="number">-115</span>|xxnet<span class="number">-116</span>|xxnet<span class="number">-117</span>|xxnet<span class="number">-118</span>|xxnet<span class="number">-119</span>|xxnet<span class="number">-120</span>|xxnet<span class="number">-121</span>|xxnet<span class="number">-122</span>|xxnet<span class="number">-123</span>|xxnet<span class="number">-124</span>|xxnet<span class="number">-125</span>|xxnet<span class="number">-126</span>|xxnet<span class="number">-127</span>|xxnet<span class="number">-128</span>|xxnet<span class="number">-129</span>|xxnet<span class="number">-130</span>|xxnet<span class="number">-131</span>|xxnet<span class="number">-132</span>|xxnet<span class="number">-133</span>|xxnet<span class="number">-134</span>|xxnet<span class="number">-135</span>|xxnet<span class="number">-136</span>|xxnet<span class="number">-137</span>|xxnet<span class="number">-138</span>|xxnet<span class="number">-139</span>|xxnet<span class="number">-140</span>|xxnet<span class="number">-141</span>|xxnet<span class="number">-142</span>|xxnet<span class="number">-143</span>|xxnet<span class="number">-144</span>|xxnet<span class="number">-145</span>|xxnet<span class="number">-146</span>|xxnet<span class="number">-147</span>|xxnet<span class="number">-148</span>|xxnet<span class="number">-149</span>|xxnet<span class="number">-150</span>|xxnet<span class="number">-151</span>|xxnet<span class="number">-152</span>|xxnet<span class="number">-153</span>|xxnet<span class="number">-154</span>|xxnet<span class="number">-155</span>|xxnet<span class="number">-156</span>|xxnet<span class="number">-157</span>|xxnet<span class="number">-158</span>|xxnet<span class="number">-159</span>|celtic-bazaar<span class="number">-122813</span>|chrome--<span class="number">-1231</span>|chrome-<span class="number">-1231</span>|chrome<span class="number">-06</span>|chrome<span class="number">-07</span>|chrome<span class="number">-08</span>|chrome<span class="number">-09</span>|chrome<span class="number">-10</span>|chrome<span class="number">-11</span>|chrome<span class="number">-12</span>|chrome<span class="number">-1231</span>|chrome<span class="number">-1231</span><span class="number">-1231</span>|cool-continuity<span class="number">-122814</span>|coral-muse<span class="number">-122814</span>|curious-memory<span class="number">-122814</span>|dospytang11|dospytang12|dospytang13|feisty-current<span class="number">-122813</span>|glassy-vial<span class="number">-122813</span>|groovy-patrol<span class="number">-122814</span>|jingtao<span class="number">-001</span>|practical-album<span class="number">-122814</span>|proud-storm<span class="number">-122813</span>|sound-invention<span class="number">-122813</span>|starlit-cocoa<span class="number">-122814</span>|third-circle<span class="number">-122813</span>|wyslmt11|wyslmt12|xx-net-agent|xxnet-<span class="number">-1229</span>|xxnet<span class="number">-1017</span>|xxnet<span class="number">-1018</span>|xxnet<span class="number">-1019</span>|xxnet<span class="number">-1021</span>|xxnet<span class="number">-1022</span>|xxnet<span class="number">-1023</span>|xxnet<span class="number">-1024</span>|xxnet<span class="number">-1025</span>|xxnet<span class="number">-1026</span>|xxnet<span class="number">-1027</span>|xxnet<span class="number">-1028</span>|xxnet<span class="number">-1029</span>|xxnet<span class="number">-103</span><span class="number">-1188</span>|xxnet<span class="number">-1030</span>|xxnet<span class="number">-1031</span>|xxnet<span class="number">-1032</span><span class="number">-1188</span>|xxnet<span class="number">-1033</span>|xxnet<span class="number">-1034</span>|xxnet<span class="number">-1035</span>|xxnet<span class="number">-1037</span>|xxnet<span class="number">-1053</span>|xxnet<span class="number">-1054</span>|xxnet<span class="number">-200</span><span class="number">-1199</span>|xxnet<span class="number">-201</span><span class="number">-1199</span>|xxnet<span class="number">-202</span><span class="number">-1199</span>|xxnet<span class="number">-203</span><span class="number">-1199</span>|xxnet<span class="number">-204</span><span class="number">-1199</span>|xxnet<span class="number">-205</span><span class="number">-1199</span>|xxnet<span class="number">-206</span><span class="number">-1199</span>|xxnet<span class="number">-207</span><span class="number">-1199</span>|xxnet-cntchen|xxnet-evachen|xxnet-fgfw|xxnet-fgfw<span class="number">-1</span>|xxnet-fgfw<span class="number">-2</span>|xxnet-lennon|xxnet-xlx01|xxnet-xlx02|xxnet-xlx03|xxnet-xlx04|xxnet-xlx05|xxnet-xlx06|xxnet-xlx07|xxnet-xlx08|xxnet-xlx09|xxnet-xlx10|xxnet-xlx11|xxnet-xlx12|chrome26<span class="number">-1100</span>|chrome27<span class="number">-1100</span>|chrome28<span class="number">-1100</span>|chrome29<span class="number">-1100</span>|chrome30<span class="number">-1100</span>|xxnet-foshan2|xxnet-foshan3|xxnet-foshan4|xxnet-foshan5|xxnet-foshan6|chrome7<span class="number">-1234</span>|chrome8<span class="number">-1234</span>|chrome10<span class="number">-1209</span>|chrome11<span class="number">-1209</span>|chrome12<span class="number">-1209</span>|chrome2<span class="number">-1209</span>|alpine-air<span class="number">-123504</span>|caramel-theory<span class="number">-123504</span>|compact-life<span class="number">-123504</span>|clean-yew<span class="number">-123504</span>|cobalt-sector<span class="number">-123504</span>|eternal-outlook<span class="number">-123504</span>|flash-moonlight<span class="number">-123504</span>|omega-terrain<span class="number">-123504</span>|premium-weft<span class="number">-123504</span>|starlit-ship<span class="number">-123504</span>|saaas<span class="number">-1235</span>|x-micron<span class="number">-123504</span>|chrome6<span class="number">-1234</span>|chrome5<span class="number">-1234</span>|chrome4<span class="number">-1234</span>|chrome3<span class="number">-1234</span>|chrome2<span class="number">-1234</span>|chrome1<span class="number">-1234</span>|chrome0<span class="number">-1234</span>|chrome-<span class="number">-1234</span>|chrome--<span class="number">-1234</span>|chrome<span class="number">-1234</span>|chrome6<span class="number">-1209</span>|chrome4<span class="number">-1209</span>|chrome3<span class="number">-1209</span>|universal-stone<span class="number">-123514</span>|stoked-dominion<span class="number">-123514</span>|unique-ellipse<span class="number">-123514</span>|trans-gate<span class="number">-123514</span>|innate-summit<span class="number">-123514</span>|able-involution<span class="number">-123514</span>|helpful-ally<span class="number">-123514</span>|river-karma<span class="number">-123514</span>|future-synapse<span class="number">-123514</span>|booming-alchemy<span class="number">-123514</span>|storied-myth<span class="number">-123514</span>|folkloric-stone<span class="number">-123514</span>|cryptic-lattice<span class="number">-123514</span>|dulcet-bucksaw<span class="number">-123514</span>|airy-machine<span class="number">-123514</span>|e-lexicon<span class="number">-123514</span>|seventh-history<span class="number">-123514</span>|upbeat-voice<span class="number">-123514</span>|stately-math<span class="number">-123514</span>|lucid-sweep<span class="number">-123514</span>|nice-azimuth<span class="number">-123514</span>|spry-equator<span class="number">-123515</span>|neural-tome<span class="number">-123515</span>|famous-charge<span class="number">-123515</span>|elated-practice<span class="number">-123515</span>|unique-antonym<span class="number">-123515</span>|sharp-quest<span class="number">-123515</span>|manifest-altar<span class="number">-123515</span>|steel-citizen<span class="number">-123515</span>|fourth-walker<span class="number">-123515</span>|subtle-sublime<span class="number">-123515</span>|galvanized-<span class="keyword">case</span><span class="number">-123515</span>|xxnet-izual1|xxnet-izual2|xxnet-izual3|xxnet-izual4|xxnet-izual5|chrome11<span class="number">-1239</span>|chrome10<span class="number">-1239</span>|chrome9<span class="number">-1239</span>|chrome8<span class="number">-1239</span>|chrome7<span class="number">-1239</span>|chrome6<span class="number">-1239</span>|chrome5<span class="number">-1239</span>|chrome4<span class="number">-1239</span>|chrome3<span class="number">-1239</span>|chrome2<span class="number">-1239</span>|chrome0<span class="number">-1239</span>|xx-net008<span class="number">-1197</span>|tangtdjia|xxnet-kittycheny1|xxnet-kittycheny2|xxnet-kittycheny3|xxnet-kittycheny4|xxnet-kittycheny5|xxnet-kittycheny6|xxnet-sdcff1|xxnet-sdcff2|xxnet-sdcff3|xxnet-sdcff4|xxnet-sdcff5|xxnet-sdcff6|xxnet-sdcff7|xxnet-sdcff8|xxnet-sdcff9|xxnet-sdcff10|xxnet-sdcff11|xxnet-sdcff12|rosy-dialect<span class="number">-124115</span>|xxnet-sdcf8<span class="number">-1241</span>|xxnet-sdcf1|xxnet-sdcf2|xxnet-sdcf3|xxnet-sdcf4|xxnet-sdcf5|xxnet-sdcf6|xxnet-sdcf7|xxnet-sdcf8|xxnet-sdcf9|xxnet-sdcf10</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Visual Studio Code配置记录</title>
    <url>/Visual-Studio-Code%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>已安装插件：</p>
<blockquote>
<p>Bracket Pair Colorizer \<br>Chinese (Simplified) Language \<br>compareit \<br>Dracula Official \<br>Git History \<br>GitLens \<br>Markdownlint \<br>Markdown All in One \<br>open in browser \<br>Python \<br>C# \<br>Vetur</p>
</blockquote>
<h2 id="Python安装第三方库"><a href="#Python安装第三方库" class="headerlink" title="Python安装第三方库"></a>Python安装第三方库</h2><p>进入Python安装路径下的Scripts，执行 .\pip install requests<br>如果在安装时报错：<br>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xd7 in position 9: ordinal not in range(128)<br>修改位于Python的安装路径下的Lib\mimetypes.py文件,在import下添加如下几行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.getdefaultencoding() != <span class="string">&#x27;gbk&#x27;</span>:</span><br><span class="line">    reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="编写C"><a href="#编写C" class="headerlink" title="编写C"></a>编写C</h2><h3 id="创建控制台程序"><a href="#创建控制台程序" class="headerlink" title="创建控制台程序"></a>创建控制台程序</h3><p>dotnet -h 查看命令<br>dotnet new —help 查看帮助<br>定位文件夹后执行：<br><code>dotnet new console</code></p>
<h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p>dotnet run 或 F5</p>
]]></content>
  </entry>
  <entry>
    <title>SQL Server存储过程</title>
    <url>/SQL-Server%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="查询赋值"><a href="#查询赋值" class="headerlink" title="查询赋值"></a>查询赋值</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE [EOLData]</span><br><span class="line">GO</span><br><span class="line"><span class="comment">/****** Object:  StoredProcedure [dbo].[UpDateHLAResult]    Script Date: 07/12/2020 13:45:44 ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- Author:  &lt;Author,,Name&gt;</span></span><br><span class="line"><span class="comment">-- Create date: &lt;Create Date,,&gt;</span></span><br><span class="line"><span class="comment">-- Description: &lt;Description,,&gt;</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[UpDateHLAResult]</span><br><span class="line">(</span><br><span class="line"><span class="variable">@VIN</span> <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line"><span class="variable">@ZTS</span> <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line"><span class="variable">@LLOffset</span> <span class="type">FLOAT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SET NOCOUNT ON added to prevent extra result sets from</span></span><br><span class="line"><span class="comment">-- interfering with SELECT statements.</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@sem</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">=</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- 声明变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@LHB</span> <span class="type">FLOAT</span></span><br><span class="line"><span class="comment">-- 判断是否存在数据</span></span><br><span class="line">IF <span class="keyword">EXISTS</span>(<span class="keyword">select</span> [左远光灯高] <span class="keyword">from</span> [dbo].[车型配置] <span class="keyword">where</span> [ZTS]<span class="operator">=</span><span class="variable">@ZTS</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 查询赋值</span></span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@LHB</span> <span class="operator">=</span> [左远光灯高] <span class="keyword">from</span> [dbo].[车型配置] <span class="keyword">where</span> [ZTS]<span class="operator">=</span><span class="variable">@ZTS</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@LHB</span> <span class="operator">=</span> [左远光灯高] <span class="keyword">from</span> [dbo].[<span class="number">64</span>字节车型配置] <span class="keyword">where</span> [ZTS]<span class="operator">=</span><span class="variable">@ZTS</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@LHB</span> <span class="operator">=</span> <span class="variable">@LHB</span> <span class="operator">-</span> <span class="variable">@LHOffset</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">exec</span>(</span><br><span class="line">    <span class="string">&#x27;UPDATE [dbo].[灯光表] SET &#x27;</span></span><br><span class="line">    <span class="operator">+</span><span class="string">&#x27;[左远光灯高] = &#x27;</span><span class="operator">+</span><span class="variable">@sem</span><span class="operator">+</span> <span class="variable">@LHB</span> <span class="operator">+</span><span class="variable">@sem</span></span><br><span class="line">    <span class="operator">+</span><span class="string">&#x27;WHERE [VIN] = &#x27;</span><span class="operator">+</span><span class="variable">@sem</span><span class="operator">+</span> <span class="variable">@VIN</span> <span class="operator">+</span><span class="variable">@sem</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQLServer</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium WebDriver</title>
    <url>/Selenium-WebDriver.html</url>
    <content><![CDATA[<p>Selenium WebDriver 笔记<br><span id="more"></span></p>
<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><h3 id="查找-UI-元素（web-元素）"><a href="#查找-UI-元素（web-元素）" class="headerlink" title="查找 UI 元素（web 元素）"></a>查找 UI 元素（web 元素）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;coolestWidgetEvah&quot;</span>&gt;...&lt;/div&gt;</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">element</span> <span class="operator">=</span> driver.findElement(By.id(<span class="string">&quot;coolestWidgetEvah&quot;</span>));</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;cheese&quot;</span>&gt;&lt;span&gt;Cheddar&lt;/span&gt;&lt;/div&gt;&lt;div class=<span class="string">&quot;cheese&quot;</span>&gt;&lt;span&gt;Gouda&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">List&lt;WebElement&gt; cheeses = driver.findElements(By.className(<span class="string">&quot;cheese&quot;</span>));</span><br><span class="line"></span><br><span class="line">&lt;iframe src=<span class="string">&quot;...&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">frame</span> <span class="operator">=</span> driver.findElement(By.tagName(<span class="string">&quot;iframe&quot;</span>));</span><br><span class="line"></span><br><span class="line">&lt;input name=<span class="string">&quot;cheese&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">cheese</span> <span class="operator">=</span> driver.findElement(By.name(<span class="string">&quot;cheese&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//By Link Text</span></span><br><span class="line">&lt;a href=<span class="string">&quot;http://www.google.com/search?q=cheese&quot;</span>&gt;cheese&lt;/a&gt;&gt;</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">cheese</span> <span class="operator">=</span> driver.findElement(By.linkText(<span class="string">&quot;cheese&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//By Partial Link Text</span></span><br><span class="line">&lt;a href=<span class="string">&quot;http://www.google.com/search?q=cheese&quot;</span>&gt;search <span class="keyword">for</span> cheese&lt;/a&gt;&gt;</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">cheese</span> <span class="operator">=</span> driver.findElement(By.partialLinkText(<span class="string">&quot;cheese&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// By CSS</span></span><br><span class="line">&lt;div id=<span class="string">&quot;food&quot;</span>&gt;&lt;span class=<span class="string">&quot;dairy&quot;</span>&gt;milk&lt;/span&gt;&lt;span class=<span class="string">&quot;dairy aged&quot;</span>&gt;cheese&lt;/span&gt;&lt;/div&gt;</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">cheese</span> <span class="operator">=</span> driver.findElement(By.cssSelector(<span class="string">&quot;#food span.dairy.aged&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="用户输入-填充表单"><a href="#用户输入-填充表单" class="headerlink" title="用户输入 - 填充表单"></a>用户输入 - 填充表单</h3><p>WebDriver 有一个叫 “Select” 的类，这个类提供了很多有用的方法用于 select 元素进行交互。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Select</span> <span class="variable">select</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Select</span>(driver.findElement(By.tagName(<span class="string">&quot;select&quot;</span>)));</span><br><span class="line">select.deselectAll();</span><br><span class="line">select.selectByVisibleText(<span class="string">&quot;Edam&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>上述代码取消页面上第一个 select 元素的所有 option 的选中状态，然后选中字面值为 “Edam” 的 option。</p>
<p>如果你已经完成表单填充，你可能希望提交它，你只要找到 “submit” 按钮然后点击它即可。</p>
<p><code>driver.findElement(By.id(&quot;submit&quot;)).click();</code><br>或者，你可以调用 WebDriver 为每个元素提供的 “submit” 方法。如果你对一个 form 元素调用该方法，WebDriver 将调用这个 form 的 submit 方法。如果这个元素不是一个 form，将抛出一个异常。<br><code>element.submit();</code></p>
<h2 id="常用类与方法"><a href="#常用类与方法" class="headerlink" title="常用类与方法"></a>常用类与方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver   <span class="comment"># 驱动浏览器</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains   <span class="comment"># 鼠标的相关操作，比如滑动验证</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By   <span class="comment"># 选择器，以什么方式选择标签元素</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys   <span class="comment"># 键盘相关</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment"># 各种判断，一般跟等待事件连用，比如说等待某个元素加载出来</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait  <span class="comment"># 等待事件，可以与EC连用</span></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">browser.maximize_window()  <span class="comment"># 窗口最大化</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_url)   <span class="comment"># 获取当前页URL</span></span><br><span class="line"><span class="built_in">print</span>(browser.title)   <span class="comment"># 获取页面的title</span></span><br><span class="line"><span class="built_in">print</span>(browser.name)  <span class="comment"># 获取driver对象：chrome</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_window_handle)  <span class="comment"># 获取当前窗口</span></span><br><span class="line"><span class="built_in">print</span>(browser.get_cookies())   <span class="comment"># 获取cookies</span></span><br><span class="line"><span class="built_in">print</span>(browser.page_source)   <span class="comment"># 获取当前页面内容</span></span><br><span class="line">browser.back()  <span class="comment"># 后退</span></span><br><span class="line">browser.forward()  <span class="comment"># 前进</span></span><br><span class="line">browser.refresh()    <span class="comment"># 刷新</span></span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;error.png&#x27;</span>)   <span class="comment"># 保存截图</span></span><br><span class="line">browser.close()   <span class="comment"># 关闭当前窗口</span></span><br><span class="line">browser.quit()   <span class="comment"># 退出浏览器驱动，关闭所有关联窗口</span></span><br></pre></td></tr></table></figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver   <span class="comment"># 驱动浏览器</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait  <span class="comment"># 等待事件</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;su&#x27;</span>)  <span class="comment"># id选择器</span></span><br><span class="line">browser.find_element_by_class_name(<span class="string">&#x27;xx&#x27;</span>)  <span class="comment"># 类选择器，1个</span></span><br><span class="line">browser.find_elements_by_class_name(<span class="string">&#x27;xx&#x27;</span>)  <span class="comment"># 类选择器，多个</span></span><br><span class="line">browser.find_element_by_link_text(<span class="string">&#x27;xxx&#x27;</span>)  <span class="comment"># 链接文本选择器</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">&#x27;xxxx&#x27;</span>)  <span class="comment"># xpath选择器</span></span><br><span class="line">browser.find_element_by_tag_name(<span class="string">&#x27;h1&#x27;</span>)  <span class="comment"># 标签选择器，获取1个</span></span><br><span class="line">browser.find_elements_by_tag_name(<span class="string">&#x27;h1&#x27;</span>)  <span class="comment"># 标签选择器，获取多个</span></span><br><span class="line">browser.find_element_by_css_selector(<span class="string">&#x27;xxx&#x27;</span>)  <span class="comment"># 样式选择器</span></span><br></pre></td></tr></table></figure>
<h3 id="find-element-by-xpath"><a href="#find-element-by-xpath" class="headerlink" title="find_element_by_xpath"></a>find_element_by_xpath</h3><p>测试网页的HTML代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;div1-img1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;http://www.sogou.com/images/logo/new/sogou.png&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">href</span>=<span class="string">&quot;http://www.sogou.com&quot;</span>&gt;</span>sogou image<span class="tag">&lt;/<span class="name">img</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;div1input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.sogou.com&quot;</span>&gt;</span>搜狗搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查询&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;div2-img2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com/img/bdlogo.png&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>baidu image<span class="tag">&lt;/<span class="name">img</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;div2input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查询&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、绝对路径</span></span><br><span class="line">element = driver.find_element_by_xpath(<span class="string">&#x27;/html/body/div/input[@value=&quot;查询&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># 上述xpath定位表达式从html dom树的根节点（html节点）开始逐层查找，最后定位到“查询”按钮节点。路径表达式“/”表示跟节点。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、相对路径</span></span><br><span class="line">element = driver.find_element_by_xpath(<span class="string">&#x27;//input[@value=&#x27;</span>查询<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line"><span class="comment"># 上述xpath定位表达式中//表示从匹配选择的当前节点开始选择文档中的节点，而不考虑特面的位置。input[@value=&quot;查询&quot;]表示定位value值为“查询”两个字的input页面元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、索引号定位元素</span></span><br><span class="line">element=driver.find_element_by_xpath(<span class="string">&quot;//input[1]&quot;</span>)</span><br><span class="line"><span class="comment"># 索引号定位方式是根据该页面元素在页面中相同标签名之间出现的索引位置来进行定位。上述xpath定位表达式表示查找页面中第二个出现的input元素，即被测试页面上的“查询”按钮。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、使用页面元素的属性值定位元素</span></span><br><span class="line">img = driver.find_element_by_xpath(<span class="string">&quot;//input[@alt=&#x27;div1-img1&#x27; and @href=&#x27;http://www.sogou.com&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># 表达式使用了相对路径再结合元素拥有的特定属性方法进行定位，定位元素img的属性是“alt”，值为“div1-img1”，使用@符号指明后面接的是属性，并同属性及属性值一起写到元素后的方括号中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、模糊属性值定位元素</span></span><br><span class="line">elements=driver.find_elements_by_xpath(<span class="string">&quot;//img[starts-with(@alt,&quot;</span>div1<span class="string">&quot;)]&quot;</span>)</span><br><span class="line"><span class="comment"># 查找属性alt的属性值以div1关键字开始的页面元素</span></span><br><span class="line">elements=driver.find_elements_by_xpath(<span class="string">&quot;//img[contains(@alt,&quot;</span>img<span class="string">&quot;)]&quot;</span>)</span><br><span class="line"><span class="comment"># 查找alt属性的属性值包含img关键字的页面元素，只要包含即可，无需考虑位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、使用xpath轴定位元素</span></span><br><span class="line">img = driver.find_element_by_xpath(<span class="string">&quot;//img[@alt=&#x27;div2-img2&#x27;]/parent::div&quot;</span>)</span><br><span class="line"><span class="comment"># 查找到属性alt的属性值为div2-img2的img元素，并基于该img元素的位置找到它上一级的div页面元素</span></span><br><span class="line"></span><br><span class="line">img = driver.find_element_by_xpath(<span class="string">&quot;//div[@id=&#x27;div1&#x27;]/child::img&quot;</span>)</span><br><span class="line"><span class="comment"># 查找到ID属性值为div1的div元素，并基于div的位置找到它下层节点中的img页面元素</span></span><br><span class="line"></span><br><span class="line">//img[@alt=<span class="string">&#x27;div2-img2&#x27;</span>]/ancestor::div</span><br><span class="line"><span class="comment"># 查找到属性alt的属性值为div2-img2的img元素，并基于该img元素的位置找到它上级的div元素</span></span><br><span class="line"></span><br><span class="line">//div[@name=<span class="string">&#x27;div2&#x27;</span>]/descendant::img</span><br><span class="line"><span class="comment"># 查找到属性name的属性值为div2的div元素，并基于该元素的位置找到它下级所有节点中的img页面元素</span></span><br><span class="line"></span><br><span class="line">//div[@<span class="built_in">id</span>=<span class="string">&#x27;div1&#x27;</span>]/following::img</span><br><span class="line"><span class="comment"># 查找到ID属性值为div1的div页面元素，并基于div的位置找到它后面节点中的img页面元素</span></span><br><span class="line"></span><br><span class="line">//a[@href=<span class="string">&#x27;http://www.sogou.com&#x27;</span>]/following-sibling::<span class="built_in">input</span></span><br><span class="line"><span class="comment"># 查找到链接地址为http：//www.sogou.com的链接页面元素a，并基于链接的位置找到它后续兄弟节点中的input页面元素</span></span><br><span class="line"></span><br><span class="line">//img[@alt=<span class="string">&#x27;div2-img2&#x27;</span>]/preceding::div</span><br><span class="line"><span class="comment"># 查找到属性alt的属性值为div2-img2的图片页面元素img，并基于图片的位置找到它前面节点中的div页面元素</span></span><br><span class="line"></span><br><span class="line">//<span class="built_in">input</span>[@value=<span class="string">&#x27;查询&#x27;</span>]/preceding-sibling::a[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 查找到value属性值为“查询”的输入框页面元素，并基于该输入框的位置找到他前面同级节点中的第一个链接页面元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有时候我们会再轴后面加一个星号*， 便是通配符，如：//input[@value=&quot;查询&quot;]/preceding::*，它表示查找属性value的值为“查询”的输入框input元素前面所有的同级元素，但不包括input元素本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、页面元素的文本定位元素</span></span><br><span class="line"><span class="comment"># 通过text()函数可以定位到元素文本包含某些关键内容的页面元素</span></span><br><span class="line">sogou_a=driver.find_element_by_xpath(<span class="string">&#x27;//a[text()=&quot;搜狗搜索&quot;]&#x27;</span>)</span><br><span class="line">sogou_a=driver.find_element_by_xpath(<span class="string">&#x27;//a[.=&quot;搜狗搜索&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># 查找文本内容为“搜狗搜索”的链接页面元素，使用的是精准匹配方式，也就是说文本内容必须完全匹配，不能多一个字也不能少一个字。第二个xpath语句中使用了以个点. 这里的点等价于text()，都指代的是当前节点的文本内容</span></span><br><span class="line"></span><br><span class="line">baidu_a=driver.find_element_by_xpath(<span class="string">&#x27;//a[contains(.,&quot;百度&quot;)]&#x27;</span>)</span><br><span class="line">baidu_a=driver.find_element_by_xpath(<span class="string">&#x27;//a[contains(text(),&#x27;</span>百度<span class="string">&#x27;)]&#x27;</span>)</span><br><span class="line"><span class="comment"># 查找文本内容包含“百度”关键字的链接页面元素，使用的是模糊匹配方式，即可以根据部分文本关键字进行匹配</span></span><br><span class="line"></span><br><span class="line">div=driver.find_element_by_xpath(<span class="string">&#x27;//a[contains(text(),&quot;百度&quot;)]/preceding::div&#x27;</span>)</span><br><span class="line">div=driver.find_element_by_xpath(<span class="string">&#x27;//a[contains(. , &quot;百度&quot;)]/..&#x27;</span>)</span><br><span class="line"><span class="comment"># 查找文本内容包含“百度”关键字的链接页面元素a的上层父元素div，6最后使用了两个点。。，它表示选取当前节点的父节点，等价于preceding::div。</span></span><br></pre></td></tr></table></figure>
<h2 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 驱动浏览器</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;alert(&quot;xxoo&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>中牟日产打印更改</title>
    <url>/%E4%B8%AD%E7%89%9F%E6%97%A5%E4%BA%A7%E6%89%93%E5%8D%B0%E6%9B%B4%E6%94%B9.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="读取Excel保存数据库"><a href="#读取Excel保存数据库" class="headerlink" title="读取Excel保存数据库"></a>读取Excel保存数据库</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadAndSaveCarInfoFromExcel</span>(<span class="params"><span class="built_in">string</span> vin</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//string serverConnString = &quot;$Npgsql$Database=LocalDB;Host=127.0.0.1;Port=5432;Username=postgres;Password=123&quot;;</span></span><br><span class="line">        <span class="built_in">string</span> sql = <span class="built_in">string</span>.Format(<span class="string">&quot;select * from [OBD检查表] where [VIN]=&#x27;&#123;0&#125;&#x27; order by [测试时间] desc&quot;</span>, vin);</span><br><span class="line">        DbDataAdapter adap = BConnString.CreateDataAdapter(sql, serverConnString);</span><br><span class="line">        DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">        adap.Fill(dt);</span><br><span class="line">        DataRow dr = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (dt.Rows.Count &gt; <span class="number">0</span>)</span><br><span class="line">            dr = dt.Rows[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">string</span> VIDCode = dr[<span class="string">&quot;VID&quot;</span>].ToString();</span><br><span class="line">        <span class="comment">// string vid = &quot;1111111111111   SDFVDFSD----    SDAVV6515151  AFDFASFSA  ASDFS  S  20200707     SDFSF      111255544    &quot;</span></span><br><span class="line">        Regex re = <span class="keyword">new</span> Regex(<span class="string">@&quot;(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+)\s*&quot;</span>);</span><br><span class="line">        Match match = re.Match(VIDCode);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> CarEI = match.Groups[<span class="number">2</span>].Value;</span><br><span class="line">        <span class="built_in">string</span> EngineNo = match.Groups[<span class="number">9</span>].Value;</span><br><span class="line">        <span class="keyword">if</span> (EngineNo.Length == <span class="number">0</span> || EngineNo == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            re = <span class="keyword">new</span> Regex(<span class="string">@&quot;(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+)\s*&quot;</span>);</span><br><span class="line">            match = re.Match(VIDCode);</span><br><span class="line">            EngineNo = match.Groups[<span class="number">8</span>].Value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (EngineNo.Length &lt; <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            re = <span class="keyword">new</span> Regex(<span class="string">@&quot;(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+?)\s+(\S+)\s*&quot;</span>);</span><br><span class="line">            match = re.Match(VIDCode);</span><br><span class="line">            EngineNo = match.Groups[<span class="number">10</span>].Value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1909889    TYBGLCFDP0DXA---A  L1234567891234567  1H5GPRCOP Y23A         S  202008154                    M9T                     M1014785             </span></span><br><span class="line">        <span class="built_in">string</span> carType = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> productEnterprise = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        GetCarInfoByEI(CarEI, <span class="keyword">ref</span> carType, <span class="keyword">ref</span> productEnterprise);</span><br><span class="line">        <span class="built_in">string</span> sqlCarInfo = <span class="built_in">string</span>.Format(<span class="string">&quot;select * from [OBD车型表] where [VIN]=&#x27;&#123;0&#125;&#x27; order by [ID] desc&quot;</span>, vin);</span><br><span class="line">        DbDataAdapter adapCarInfo = BConnString.CreateDataAdapter(sqlCarInfo, serverConnString);</span><br><span class="line">        DataTable dtCarInfo = <span class="keyword">new</span> DataTable();</span><br><span class="line">        adapCarInfo.Fill(dtCarInfo);</span><br><span class="line">        DataRow drCarInfo = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (dtCarInfo.Rows.Count &gt; <span class="number">0</span>)</span><br><span class="line">            drCarInfo = dtCarInfo.Rows[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            drCarInfo = dtCarInfo.Rows.Add();</span><br><span class="line">        drCarInfo[<span class="string">&quot;VIN&quot;</span>] = vin;</span><br><span class="line">        drCarInfo[<span class="string">&quot;发动机号&quot;</span>] = EngineNo;</span><br><span class="line">        drCarInfo[<span class="string">&quot;Cartype车辆型号&quot;</span>] = carType;</span><br><span class="line">        drCarInfo[<span class="string">&quot;车辆生产企业&quot;</span>] = productEnterprise;</span><br><span class="line">        drCarInfo[<span class="string">&quot;更新时间&quot;</span>] = DateTime.Now;</span><br><span class="line">        adapCarInfo.Update(dtCarInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ExcelException ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetCarInfoByEI</span>(<span class="params"><span class="built_in">string</span> EI, <span class="keyword">ref</span> <span class="built_in">string</span> CarType, <span class="keyword">ref</span> <span class="built_in">string</span> ProductEnterprise</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// connect Excel</span></span><br><span class="line">    <span class="comment">//string excelPath = @&quot;D:\工作\现场工作文件整理\中牟日产\EI-车辆型号.xlsx&quot;;</span></span><br><span class="line">    <span class="built_in">string</span> strConn = <span class="built_in">string</span>.Format(<span class="string">&quot;Provider=Microsoft.ACE.OLEDB.12.0;Data Source =&#123;0&#125;; Extended Properties = &#x27;Excel 12.0; HDR=Yes; IMEX=0&#x27;&quot;</span>, excelPath);</span><br><span class="line">    DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">    OleDbConnection conn = <span class="keyword">new</span> OleDbConnection(strConn);</span><br><span class="line">    <span class="built_in">string</span> sql = <span class="built_in">string</span>.Format(<span class="string">&quot;select * from [Sheet1$] where [Code18/EI] like &#x27;%&#123;0&#125;%&#x27;&quot;</span>, EI);</span><br><span class="line">    OleDbDataAdapter oada = <span class="keyword">new</span> OleDbDataAdapter(sql, conn);</span><br><span class="line">    oada.Fill(ds);</span><br><span class="line">    DataRow dr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ds.Tables[<span class="number">0</span>].Rows.Count &gt; <span class="number">0</span>)</span><br><span class="line">        dr = ds.Tables[<span class="number">0</span>].Rows[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;EI车辆型号Excel中没有当前车型，请检查&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CarType = dr[<span class="string">&quot;Cartype/车辆型号&quot;</span>].ToString();</span><br><span class="line">    ProductEnterprise = dr[<span class="string">&quot;生产企业&quot;</span>].ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>刷网课随记</title>
    <url>/%E5%88%B7%E7%BD%91%E8%AF%BE%E9%9A%8F%E8%AE%B0.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="视频播放参数"><a href="#视频播放参数" class="headerlink" title="视频播放参数"></a>视频播放参数</h2><h3 id="倍速播放"><a href="#倍速播放" class="headerlink" title="倍速播放"></a>倍速播放</h3><p><code>document.querySelector(&#39;video&#39;).playbackRate = 4.0</code></p>
<h4 id="爬虫执行脚本"><a href="#爬虫执行脚本" class="headerlink" title="爬虫执行脚本"></a>爬虫执行脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">js = <span class="string">&quot;document.querySelector(&#x27;video&#x27;).playbackRate = 4.0&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure>
<h2 id="下载视频课程"><a href="#下载视频课程" class="headerlink" title="下载视频课程"></a>下载视频课程</h2><h3 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h3><h4 id="Webdriver"><a href="#Webdriver" class="headerlink" title="Webdriver"></a>Webdriver</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.bjjnts.cn/login&quot;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;username&quot;</span>).send_keys(<span class="string">&quot;uesrname&quot;</span>) <span class="comment">#元素赋值模拟输入</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//button[@class=&#x27;login_btn&#x27; and @type=&#x27;submit&#x27;]&quot;</span>).click() <span class="comment">#登录按钮点击事件</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="keyword">return</span>  driver.page_source</span><br></pre></td></tr></table></figure>
<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>通过抓包拿到cookie，再将cookie放到header中请求即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">&#x27;user&#x27;</span>).send_keys(<span class="string">&#x27;用户账号&#x27;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;pass&#x27;</span>).send_keys(<span class="string">&#x27;用户密码&#x27;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;submit&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">cookie = driver.get_cookies()</span><br><span class="line">cookiea = [item[<span class="string">&quot;name&quot;</span>] + <span class="string">&quot;=&quot;</span> + item[<span class="string">&quot;value&quot;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> cookie]</span><br><span class="line">cookiestr = <span class="string">&#x27;; &#x27;</span>.join(item <span class="keyword">for</span> item <span class="keyword">in</span> cookiea)</span><br><span class="line">driver.close() <span class="comment">#获取到登录cookie,就可以关闭窗口了</span></span><br><span class="line"><span class="keyword">return</span> cookiestr</span><br><span class="line"></span><br><span class="line"><span class="comment"># join说明</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">seq = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); <span class="comment"># 字符串序列</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.join( seq );</span><br><span class="line">输出: a-b-c</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetPageHtml</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">        driver.get(<span class="string">&quot;https://www.bjjnts.cn/login&quot;</span>)</span><br><span class="line">        txt = driver.page_source</span><br><span class="line">        <span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">        driver.find_element_by_name(<span class="string">&quot;username&quot;</span>).send_keys(<span class="string">&quot;ID&quot;</span>)</span><br><span class="line">        driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&quot;KW&quot;</span>)</span><br><span class="line">        driver.find_element_by_xpath(<span class="string">&quot;//button[@class=&#x27;login_btn&#x27; and @type=&#x27;submit&#x27;]&quot;</span>).click()</span><br><span class="line">        header = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#x27;</span>,<span class="string">&#x27;Referer&#x27;</span>:url&#125;</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        driver.get(url)</span><br><span class="line">        <span class="keyword">return</span>  driver.page_source</span><br><span class="line">        <span class="comment">#res = requests.get(url,headers = header)</span></span><br><span class="line">        <span class="comment">#if res.status_code == 200:</span></span><br><span class="line">            <span class="comment">#return res.text</span></span><br><span class="line">        <span class="comment">#return None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ParseHtml</span>(<span class="params">html</span>):</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;video src=&quot;(.*?)&quot;\sposter=&#x27;</span>,re.S)</span><br><span class="line">    items = re.search(pattern,html)</span><br><span class="line">    <span class="built_in">print</span>(items.group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span>  items.group(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ParseVideoHtml</span>(<span class="params">html, name</span>):</span><br><span class="line">    root = <span class="string">&quot;D://Downloads//&quot;</span></span><br><span class="line">    path = root + name + <span class="string">&quot;.mp4&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">            os.mkdir(root)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            r = requests.get(html)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;文件保存成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文件已存在&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;爬取失败&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_config</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;读取配置&quot;&quot;&quot;</span></span><br><span class="line">    path = os.getcwd()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(<span class="string">&quot;config.json&quot;</span>):  <span class="comment"># 无文件时创建</span></span><br><span class="line">         <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;config.json&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> jsonfile:</span><br><span class="line">             jsonfile.write(json.dump(&#123;<span class="string">&#x27;url&#x27;</span>:<span class="string">&#x27;https://www.bjjnts.cn/lessonStudy/202/4268&#x27;</span>&#125;),indent=<span class="number">4</span>)</span><br><span class="line">         jsonfile.close()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;config.json&quot;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        config = json.load(json_file)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#html = &quot;https://bjjnts-bd.xuetangx.com/4233125536dfb27e-10.mp4?auth_key=1596034097-0-0-f7f5072dec07ec43c1110ade3a8d412d&quot;</span></span><br><span class="line">    <span class="comment">#ParseVideoHtml(html)</span></span><br><span class="line">    <span class="comment">#https://www.bjjnts.cn/login</span></span><br><span class="line">    config = read_config()</span><br><span class="line">    <span class="comment">#html = &quot;https://www.bjjnts.cn/lessonStudy/202/4268&quot;</span></span><br><span class="line">    html = config[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(html)</span><br><span class="line">    url = <span class="string">&quot;https://www.bjjnts.cn/login&quot;</span></span><br><span class="line">    option = webdriver.ChromeOptions()</span><br><span class="line">    driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    txt = driver.page_source</span><br><span class="line">    <span class="comment"># 设置默认编码为 utf-8</span></span><br><span class="line">    driver.find_element_by_name(<span class="string">&quot;username&quot;</span>).send_keys(<span class="string">&quot;370831199309165413&quot;</span>)</span><br><span class="line">    driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&quot;bj123465&quot;</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&quot;//button[@class=&#x27;login_btn&#x27; and @type=&#x27;submit&#x27;]&quot;</span>).click()</span><br><span class="line">    header = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#x27;</span>,<span class="string">&#x27;Referer&#x27;</span>:url&#125;</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    driver.get(html)</span><br><span class="line"></span><br><span class="line">    videoNames = []</span><br><span class="line">    bsObj = BeautifulSoup(driver.page_source.replace(<span class="string">&#x27;&amp;nbsp;&#x27;</span>, <span class="string">&#x27; &#x27;</span>), <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    VideoList = bsObj.findAll(class_=<span class="string">&quot;course_study_menubox&quot;</span>)</span><br><span class="line">    <span class="comment">##print(VideoList)</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> video <span class="keyword">in</span> VideoList:</span><br><span class="line">        videoname = video.find(<span class="string">&quot;h4&quot;</span>,class_=<span class="string">&quot;course_study_menutitle&quot;</span>).get_text()</span><br><span class="line">        <span class="comment">##driver.get(html)</span></span><br><span class="line">        videoHtml = ParseHtml(driver.page_source)</span><br><span class="line">        <span class="comment">#th = Thread()</span></span><br><span class="line">        ParseVideoHtml(videoHtml, videoname)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        driver.find_element_by_xpath(<span class="string">&quot;//a[@class=&#x27;change_chapter lesson-&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;&#x27;]&quot;</span>).find_element_by_xpath(<span class="string">&#x27;..&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i))</span><br><span class="line">        <span class="comment">#videoNames.append(video.find(&quot;h4&quot;,class_=&quot;course_study_menutitle&quot;).get_text())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(videoNames)</span></span><br><span class="line">    <span class="comment">#print(html)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK故障码处理</title>
    <url>/BBK%E6%95%85%E9%9A%9C%E7%A0%81%E5%A4%84%E7%90%86.html</url>
    <content><![CDATA[<center></center>

<p>检测线处理故障码，包括只判断指定故障码和忽略指定故障码</p>
<span id="more"></span>
<h2 id="CanCmdOpraLib-CanCmd"><a href="#CanCmdOpraLib-CanCmd" class="headerlink" title="CanCmdOpraLib.CanCmd"></a>CanCmdOpraLib.CanCmd</h2><h3 id="HandleDTC"><a href="#HandleDTC" class="headerlink" title="HandleDTC"></a>HandleDTC</h3><p>该函数参数为忽略的故障码，可以为{0xD1 55 84};{0xD1 55 85}的格式，也可以为U1155-84;U1155-85的格式<br>不设置参数则将所有读出的DTC添加到<strong>useDTClist</strong>中</p>
<h3 id="CheckDTC"><a href="#CheckDTC" class="headerlink" title="CheckDTC"></a>CheckDTC</h3><p>该函数参数为判断的故障码，判断该故障码是否存在于<strong>useDTClist</strong>中<br>存在返回False，不存在返回True</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>Recv：{0x59 02 AB D1 55 84 2B D1 55 85 2B}<br>HandleDTC({0xD1 55 84})<br>useDTClist为U1155-85 D1 55 85<br>CheckDTC({0xD1 55 84})返回true<br>CheckDTC({0xD1 55 85})返回false</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>ABS类名与车型对应</title>
    <url>/ABS%E7%B1%BB%E5%90%8D%E4%B8%8E%E8%BD%A6%E5%9E%8B%E5%AF%B9%E5%BA%94.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="SGMW"><a href="#SGMW" class="headerlink" title="SGMW"></a>SGMW</h2><p>ClassName:车型:</p>
<p>CN200SESP : BOSCH9CANABS<br>CN200ESP : BOSCH9CANABS<br>CN200SABS : BOSCH9CANABS<br>CN200ABS : BOSCH9CANABS<br>CN113ABS : BOSCH9CANABS<br>CN180MABS : BOSCH9CANABS<br>CN180MESP : BOSCH9CANESP<br>CN180SABS : BOSCH9CANABS<br>CN180SESP : BOSCH9CANESP<br>E100ESP : BOSCH9CANABS<br>E100ABS : BOSCH9CANABS<br>E300ESC : BOSCH9CANABS<br>E300ABS : BOSCH9CANABS<br>N300LABSEV: E100ABS<br>CN210ABS : BOSCH9CANABS<br>E50ABS : E100ABS</p>
<p>GP50ABS : BOSCH9ABSCAN</p>
<p>CN112ABS : BOSCH9KWPABS<br>CN112 : BOSCH9KWPABS<br>N300LABS : BOSCH9KWPABS<br>N310ABS : BOSCH9KWPABS<br>N350PABS : BOSCH9KWPABS<br>CN100VABS : BOSCH9KWPABS<br>N300MandoABS : BOSCH9KWPABS</p>
<p>CN115ABS : BOSCH9KWPABS<br>CN115 : BOSCH9KWPABS</p>
<p>CN180SDBC78ABS : DBC78ABS<br>CN180SDBC78ABS4MBK : DBC78ABS</p>
<p>CN200DCU : DCU<br>CN200SDCU : DCU</p>
<p>CN120SESC : MK100ESC<br>CN120SABS : MK100ABS<br>CN120SABSForACU : MK100ABS<br>CN120SESCForACU : MK100ESC<br>CN180CESC : MK100ESC<br>CN180SESCconfi : CN180CESC<br>CN300SESC : CN180SESCconfi<br>CN180C_2ESC : MK100ESC<br>MK100ESCForMBK : ABSBaseForCAN<br>CN180CESCForMBK : MK100ESCForMBK</p>
<p>CN180CABS : MK78ABS</p>
<p>N1 : N1ABS</p>
<h2 id="长春一汽轿车"><a href="#长春一汽轿车" class="headerlink" title="长春一汽轿车"></a>长春一汽轿车</h2><p>J5LADSC : DSCCAN<br>J71DSC : DSCCAN</p>
<p>D181ESP : BOSCH9CANESP<br>D181ABS : BOSCH9CANABS<br>D009ABS : BOSCH9CANABS<br>D009ESP : BOSCH9CANESP<br>C141ESP : BaseBosch_ESP9<br>C205ESP : C141ESP<br>D090ESP : C141ESP<br>E111ESP : C141ESP</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>新增ABS</title>
    <url>/%E6%96%B0%E5%A2%9EABS.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h2><blockquote>
<p>1、RBABS_xxx.dll 其中包含ABS通讯指令</p>
</blockquote>
<h2 id="软件更改"><a href="#软件更改" class="headerlink" title="软件更改"></a>软件更改</h2><p>0、备份程序<br>1、替换BBK\Bin文件夹下的 RBABS_xxx.dll 文件<br>2、新增车型信息<br><img src="新增ABS/cxxx.png" alt="车型信息"><br>如图新增该车型相关车型信息，复制其他车型更改即可<br>3、新增ABS标准<br><img src="新增ABS/absbz.png" alt="ABS标准"><br>上图为DVT中动态ABS标准，制动台更改静态ABS标准<br>Identity为该ABS的标识<br><strong>ABS类型</strong>内容咨询软件工程师<br>4、新增ZTS<br><img src="新增ABS/ztspz.png" alt="ZTS"><br>复制其他车型后更改ZTS<br>更改车型参数<br>更改动态ABS标准<br>5、配置串口<br><img src="新增ABS/ckpz.png" alt="串口配置"><br>复制其他CAN或K线配置，更改KeyName为3中的<strong>ABS类型</strong><br>Param1为串口号、Param3为输出LOG的文件名<br>说明：该步骤若未提前更改，测试中会自动创建并使用默认串口号导致通讯失败，依据其他车型的配置更改串口号等即可。</p>
<p>6、更改Config\ABSValveTestConfig中当前ABS类型文件中的增减压时间等进行优化</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>Modbus通讯协议</title>
    <url>/Modbus%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="Modbus-TCP-数据帧"><a href="#Modbus-TCP-数据帧" class="headerlink" title="Modbus TCP 数据帧"></a>Modbus TCP 数据帧</h2><p>MBAP + PDU<br>MBAP： Modbus Application Protocol Header<br>PDU：Protocol Data Unit<br>MBAP + Function code + Data</p>
<p>示例：<br>00 01 00 00 00 06 01<br>事务标识2+modbus协议2+数据长度2+Slave站号1</p>
<p>Function code：<br>0x01：读线圈<br>02：读离散量输入<br>03：读保持寄存器<br>04：读输入寄存器<br>05：写单个线圈<br>06：写单个保持寄存器<br>10：写多个保持寄存器<br>0F：写多个线圈</p>
<p>报文头部：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字节序号</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">客户端</th>
<th style="text-align:center">服务器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>BYTE 0 – 1|传输标志，事务标识符|由客户端生成|应答时复制该值<br>BYTE 2 – 3|协议标识，Modbus 协议=0|由客户端生成|应答时复制该值<br>BYTE 4 ¬-  5|报文后续数据的字节长度|由客户端生成|应答时由服务器重新生成<br>BYTE 6|MODBUS单元标志|由客户端生成|应答时复制该值</p>
<p>Modbus TCP协议功能码报文<br>功能码3 读多个寄存器<br>请求报文格式<br>|字节序号|含义|<br>|:-:|:-:|<br>BYTE 7|功能码=3<br>BYTE 8 - 9|读取数据的寄存器偏移地址<br>BYTE 10 - 11|读取数据的寄存器数量，单位为Word</p>
<p>读数据成功的响应报文格式<br>|字节序号|含义|<br>|:-:|:-:|<br>BYTE 7|功能码=3<br>BYTE 8 |读取到的数据的字节数<br>BYTE 9- 10|读取到的寄存器1的数据<br>BYTE 11 - 12|读取到的寄存器2的数据<br>….|…</p>
<p>功能码16 写多个寄存器<br>请求报文格式<br>|字节序号|含义|<br>|:-:|:-:|<br>BYTE 7|功能码=16<br>BYTE 8 - 9|写数据的寄存器偏移地址<br>BYTE 10 - 11|写数据的寄存器数量，单位为Word<br>BYTE 12|写数据的字节数（数据等于写数据的寄存器数量 x 2）<br>BYTE 13 - 14|寄存器1的数据<br>BYTE 15 - 16|寄存器1的数据</p>
<p>写数据成功的响应报文格式<br>|字节序号|含义|<br>|:-:|:-:|<br>BYTE 7|功能码=16<br>BYTE 8 - 9 |写数据的寄存器偏移地址<br>BYTE 10 - 11|写数据的寄存器数量，单位为WORD</p>
<p>功能码6 写单个寄存器<br>请求报文格式<br>|字节序号|含义|<br>|:-:|:-:|<br>BYTE 7|功能码=6<br>BYTE 8 - 9|写数据的寄存器偏移地址<br>BYTE 10 - 11|寄存器的数值</p>
<p>写数据成功的响应报文格式<br>|字节序号|含义|<br>|:-:|:-:|<br>BYTE 7|功能码=6<br>BYTE 8 - 9 |写数据的寄存器偏移地址<br>BYTE 10 - 11|寄存器的数值</p>
<p>控制 IB IL 24 DO8开关量输出模块请求报文，模块寄存器地址：384，控制数据在最后一个字节；</p>
<p>0F 01 00 00 00 06 FF 06 01 80 00 0F</p>
<p>控制DO输出成功响应报文<br>0F 01 00 00 00 06 FF 06 01 80 00 0F</p>
<p>读取 IB IL 24 DI8开关量输入模块请求报文，模块寄存器地址：0，数据寄存器长度为1；</p>
<p>0B 01 00 00 00 06 FF 03 00 00 00 01</p>
<p>读取IB IL 24 DI8开关量输入成功的响应报文，数据在最后一个字节；<br>0B 01 00 00 00 05 FF 03 02 00 XX</p>
<p>读取 IB IL AI2SF-230模拟量输入模块请求报文，模块寄存器地址：192，数据寄存器长度为2，该模块默认连接0~10V信号；</p>
<p>0B 02 00 00 00 06 FF 03 00 C0 00 02</p>
<p>读取数据成功的响应报文，数据在最后4个字节，分别为通道1~2；<br>0B 02 00 00 00 07 FF 03 04 XX XX XX XX</p>
<h2 id="Kepserver"><a href="#Kepserver" class="headerlink" title="Kepserver"></a>Kepserver</h2><p>Address<br>输出线圈：  000001 ~ 065536<br>输入线圈：  100001 ~ 165536<br>内部寄存器：300001 ~ 365536<br>保持寄存器：400001 ~ 465536</p>
<p>访问输出线圈：Address：000001<br>访问连续10个输出线圈：Address：000001#10</p>
<p>访问保持寄存器：Address：400001<br>访问连续10个保持寄存器：Address：400001[10]</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Modbus</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask框架</title>
    <url>/Flask%E6%A1%86%E6%9E%B6.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">flask-demo/</span><br><span class="line">  ├ run.py           <span class="meta"># 应用启动程序</span></span><br><span class="line">  ├ config.py        <span class="meta"># 环境配置</span></span><br><span class="line">  ├ requirements.txt <span class="meta"># 列出应用程序依赖的所有Python包</span></span><br><span class="line">  ├ tests/           <span class="meta"># 测试代码包</span></span><br><span class="line">  │   ├ __init__.py</span><br><span class="line">  │   └ test_*.py    <span class="meta"># 测试用例</span></span><br><span class="line">  └ myapp/</span><br><span class="line">      ├ admin/       <span class="meta"># 蓝图目录</span></span><br><span class="line">      ├ <span class="keyword">static</span>/</span><br><span class="line">      │   ├ css/     <span class="meta"># css文件目录</span></span><br><span class="line">      │   ├ img/     <span class="meta"># 图片文件目录</span></span><br><span class="line">      │   └ js/      <span class="meta"># js文件目录</span></span><br><span class="line">      ├ templates/   <span class="meta"># 模板文件目录</span></span><br><span class="line">      ├ __init__.py</span><br><span class="line">      ├ forms.py     <span class="meta"># 存放所有表单，如果多，将其变为一个包</span></span><br><span class="line">      ├ models.py    <span class="meta"># 存放所有数据模型，如果多，将其变为一个包</span></span><br><span class="line">      └ views.py     <span class="meta"># 存放所有视图函数，如果多，将其变为一个包</span></span><br></pre></td></tr></table></figure>
<p>示例：<br>IconFont网址下载图标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">welcome</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome %s&quot;</span>%name</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;int:id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">welcomeid</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome num %d&quot;</span>%<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>():</span><br><span class="line">    <span class="built_in">list</span> = [<span class="string">&quot;l1&quot;</span>,<span class="string">&quot;l2&quot;</span>,<span class="string">&quot;l3&quot;</span>]</span><br><span class="line">    time = datetime.date.today()</span><br><span class="line">    task = &#123;<span class="string">&quot;task&quot;</span>:<span class="string">&quot;clean&quot;</span>,<span class="string">&quot;time&quot;</span>:<span class="string">&quot;3hours&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,var = time,<span class="built_in">list</span> = <span class="built_in">list</span>, task = task)</span><br><span class="line"></span><br><span class="line"><span class="comment">#表单提交</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        result = request.form <span class="comment">#表单字典</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>,result = result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>) <span class="comment">#还需要在项目配置中启动Debug</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    welcome.</span><br><span class="line">    Today is &#123;&#123; var &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    on duty<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;% for data in list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    task:s<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            &#123;% for key,value in task.items() %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;result&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>age:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>sex:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            &#123;% for key,value in result.items() %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    Result</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK检测线通讯相关介绍</title>
    <url>/BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E9%80%9A%E8%AE%AF%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>客户端配置<br>GeneralLib.xDvConfigClient.init(GeneralLib.xRemoterClientConfig)<br>服务端配置<br>GeneralLib.GenO.InitRemoterTcpServer()</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xDevice</span> <span class="attr">updateRate</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Item</span> <span class="attr">ip</span>=<span class="string">&quot;10.18.13.50:10240&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">__COUNTER_OUT</span> <span class="attr">value</span>=<span class="string">&quot;None&quot;</span> <span class="attr">WriteEnable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">Reversion</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">__COUNTER_IN</span> <span class="attr">value</span>=<span class="string">&quot;None&quot;</span> <span class="attr">WriteEnable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">Reversion</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Communication_ZTS</span> <span class="attr">value</span>=<span class="string">&quot;CarParam_ZTS&quot;</span> <span class="attr">WriteEnable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">Reversion</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Communication_VIN</span> <span class="attr">value</span>=<span class="string">&quot;CarParam_VIN&quot;</span> <span class="attr">WriteEnable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">Reversion</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DeviceDescribe</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--用于与具有远程功能的平台程序通讯(@开头为PubObject对象,#开头为组合控制),默认端口10240,ip格式:127.0.0.1:10240--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DeviceDescribe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Alarms</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AlarmItem</span> <span class="attr">value</span>=<span class="string">&quot;None&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Alarm</span> <span class="attr">Index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;告警信息格式模板&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">AlarmItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Alarms</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xDevice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置完成后，相当于客户端的Communication_VIN与服务端的CarParam_VIN进行了绑定</p>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>客户端配置<br>SocketOpraLib.UDPClientOpra.SetDestInfoConfig(ConfigSend)<br>SocketOpraLib.UDPClientOpra.SendTo(“{VIN};{ZTS}”)<br>服务端配置<br>SocketOpraLib.UDPServerOpra.SetLocalInfoConfig(ConfigRecv)</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP</title>
    <url>/UDP.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    UdpClient client = <span class="keyword">new</span> UdpClient(<span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">0</span>));<span class="comment">//不指定网卡、端口发送</span></span><br><span class="line">    client = <span class="keyword">new</span> UdpClient(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;1.1.1.1&quot;</span>), <span class="number">0</span>));<span class="comment">//设置网卡发送</span></span><br><span class="line">    IPEndPoint endpoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;255.255.255.255&quot;</span>), <span class="number">7788</span>);  </span><br><span class="line">    <span class="built_in">byte</span>[] buf = Encoding.Default.GetBytes(<span class="string">&quot;Hello from UDP broadcast&quot;</span>);  </span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(RecvThread));  </span><br><span class="line">    t.IsBackground = <span class="literal">true</span>;  </span><br><span class="line">    t.Start();  </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        client.Send(buf, buf.Length, endpoint);  </span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RecvThread</span>()</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    UdpClient client = <span class="keyword">new</span> UdpClient(<span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">7788</span>));  </span><br><span class="line">    IPEndPoint endpoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">byte</span>[] buf = client.Receive(<span class="keyword">ref</span> endpoint);  </span><br><span class="line">        <span class="built_in">string</span> msg = Encoding.Default.GetString(buf);  </span><br><span class="line">        Console.WriteLine(msg);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 发送UDP消息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;msg&quot;&gt;</span>消息内容<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    UdpClient udpClient = <span class="keyword">new</span> UdpClient();</span><br><span class="line">    IPEndPoint ipEndPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Broadcast, <span class="number">10249</span>);</span><br><span class="line">    <span class="comment">// IPAddress.Broadcast 就是 255.255.255.255</span></span><br><span class="line">    <span class="built_in">byte</span>[] buffer = Encoding.UTF8.GetBytes(msg);</span><br><span class="line">    udpClient.Send(buffer, buffer.Length, ipEndPoint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    UdpClient udpServer = <span class="keyword">new</span> UdpClient(<span class="number">10249</span>);</span><br><span class="line">    IPEndPoint ipEndPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">10249</span>);</span><br><span class="line"></span><br><span class="line">    udpServer.BeginReceive(Received, udpServer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 异步接收UDP数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iar&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Received</span>(<span class="params">IAsyncResult iar</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">　　udpServer = iar.AsyncState <span class="keyword">as</span> UdpClient;</span><br><span class="line">　　<span class="built_in">byte</span>[] buffer = udpServer.EndReceive(iar, <span class="keyword">ref</span> ipEndPoint);</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//将获取的byte[]数据转换成字符串</span></span><br><span class="line">　　<span class="built_in">string</span> m = Encoding.UTF8.GetString(buffer).Trim();</span><br><span class="line"></span><br><span class="line">　　Console.WriteLine(<span class="string">&quot;Receive:&#123;0&#125;&quot;</span>,m);</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//继续异步接收数据</span></span><br><span class="line">　　udpServer.BeginReceive(Received, udpServer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>C#事件与委托</title>
    <url>/C-%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%A7%94%E6%89%98.html</url>
    <content><![CDATA[<p><center></center><br>参考HeadFirstC#<br><span id="more"></span></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>当一个事件发生后，不同的事件监视者完成各自的工作</p>
<p>1、定义产生事件的对象<br>2、定义事件<br>3、事件发生<br>4、不同对象订购(绑定)事件</p>
<p>5、创建事件执行需要的参数对象</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义事件及对象</span></span><br><span class="line">Ball ball = <span class="keyword">new</span> Ball();</span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line">Fan fan = <span class="keyword">new</span> Fan(ball);<span class="comment">//Fan对Ball的处理，Fan先绑定BallInPlay</span></span><br><span class="line">Pitcher pitcher = <span class="keyword">new</span> Pitcher(ball);<span class="comment">//Pitcher对Ball的处理，Pitcher后绑定BallInPlay</span></span><br><span class="line">BallEventArgs ballEventArgs = <span class="keyword">new</span> BallEventArgs(<span class="number">60</span>,<span class="number">80</span>);</span><br><span class="line"><span class="comment">//事件发生后Fan先响应，Pitcher后响应</span></span><br><span class="line">ball.OnBallInPlay(ballEventArgs)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、定义产生事件的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Ball</span>&#123;</span><br><span class="line">    <span class="comment">//2、定义事件</span></span><br><span class="line">    <span class="comment">//无事件绑定对象时BallInPlay = null</span></span><br><span class="line">    <span class="comment">//事件执行顺序为事件绑定顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler BallInPlay;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">OnBallInPlay</span>(<span class="params">BallEventArgs e</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//EventHandler ballInplay = BallInPlay;</span></span><br><span class="line">        <span class="comment">//3、事件发生</span></span><br><span class="line">        <span class="comment">//事件发生后会执行BallInPlay的委托，具体的执行发放为事件监视者所委托的方法</span></span><br><span class="line">        BallInPlay(<span class="keyword">this</span>, e);</span><br><span class="line">        <span class="comment">//if (ballInplay != null)</span></span><br><span class="line">            <span class="comment">//  ballInplay(this,e);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Pitcher</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pitcher</span>(<span class="params">Ball ball</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//4、不同对象订购(绑定)事件</span></span><br><span class="line">        <span class="comment">//当事件发生后执行ball_BallInPlay1方法</span></span><br><span class="line">        ball.BallInPlay += ball_BallInPlay1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ball_BallInPlay1</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> BallEventArgs)&#123;</span><br><span class="line">            BallEventArgs ballEventArgs = e <span class="keyword">as</span> BallEventArgs;</span><br><span class="line">            <span class="keyword">if</span> (ballEventArgs.Distance &lt; <span class="number">95</span> &amp;&amp; ballEventArgs.Traj &lt; <span class="number">60</span>)&#123;</span><br><span class="line">                CatchBall();</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                GameOver();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CatchBall</span>()</span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GameOver</span>()</span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Fan</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fan</span>(<span class="params">Ball ball</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//4、不同对象订购(绑定)事件</span></span><br><span class="line">        <span class="comment">//当事件发生后执行ball_BallInPlay2方法</span></span><br><span class="line">        ball.BallInPlay += <span class="keyword">new</span> EventHandler(ball_BallInPlay2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ball_BallInPlay2</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> BallEventArgs)&#123;</span><br><span class="line">            BallEventArgs ballEventArgs = e <span class="keyword">as</span> BallEventArgs;</span><br><span class="line">            <span class="keyword">if</span> (ballEventArgs.Distance &gt; <span class="number">400</span>)</span><br><span class="line">                CatchBall();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Screm();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CatchBall</span>()</span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Screm</span>()</span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件执行的参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">BallEventArgs</span> : <span class="title">EventArgs</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Traj &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;<span class="comment">//击球角度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Distance &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;<span class="comment">//飞行距离</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BallEventArgs</span>(<span class="params"><span class="built_in">int</span> traj, <span class="built_in">int</span> distance</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Traj = traj;</span><br><span class="line">        <span class="keyword">this</span>.Distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="委托事件"><a href="#委托事件" class="headerlink" title="委托事件"></a>委托事件</h2><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>再讲委托</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">Calculate</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span>;</span><br><span class="line">Calculate calculateString = <span class="keyword">new</span> Calculate(<span class="keyword">add</span>);</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">add</span> = calculateString(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">calculateString = <span class="keyword">new</span> Calculate(mul);</span><br><span class="line"><span class="built_in">string</span> mul = calculateString(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">add</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x + y).ToString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">mul</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x * y).ToString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">BatCallback</span>(<span class="params">BallEventArgs e</span>)</span>;</span><br><span class="line">Ball ball = <span class="keyword">new</span> Ball();</span><br><span class="line"><span class="comment">//创建一个新的Bat对象，使用BatCallback委托将Ball的OnBallInPlay方法引用传给Bat对象</span></span><br><span class="line">Bat bat = ball.GetNewBat();</span><br><span class="line">Fan fan = <span class="keyword">new</span> Fan(ball);</span><br><span class="line">Pitcher pitcher = <span class="keyword">new</span> Pitcher(ball);</span><br><span class="line">BallEventArgs ballEventArgs = <span class="keyword">new</span> BallEventArgs(<span class="number">60</span>,<span class="number">80</span>);</span><br><span class="line">bat.HitTheBall(ballEventArgs);</span><br><span class="line"><span class="keyword">class</span> <span class="title">Ball</span>&#123;</span><br><span class="line">    <span class="comment">//2、定义事件</span></span><br><span class="line">    <span class="comment">//无事件绑定对象时BallInPlay = null</span></span><br><span class="line">    <span class="comment">//事件执行顺序为事件绑定顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler BallInPlay;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">OnBallInPlay</span>(<span class="params">BallEventArgs e</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//EventHandler ballInplay = BallInPlay;</span></span><br><span class="line">        <span class="comment">//3、事件发生</span></span><br><span class="line">        <span class="comment">//事件发生后会执行BallInPlay的委托，具体的执行发放为事件监视者所委托的方法</span></span><br><span class="line">        BallInPlay(<span class="keyword">this</span>, e);</span><br><span class="line">        <span class="comment">//if (ballInplay != null)</span></span><br><span class="line">            <span class="comment">//  ballInplay(this,e);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bat <span class="title">GetNewBat</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//将事件处理委托到击球事件中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bat(<span class="keyword">new</span> BatCallback(OnBallInPlay));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Bat</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BatCallback hitBallCallback;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bat</span>(<span class="params">BatCallback callbackDelegate</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//私有化事件发生后的时间处理</span></span><br><span class="line">        <span class="comment">//不使用 += 是为了保证击球手只监视场内的一个Ball</span></span><br><span class="line">        <span class="keyword">this</span>.hitBallCallback = <span class="keyword">new</span> BatCallback(callbackDelegate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发生击球事件后，回调Ball类中的OnBallInPlay响应</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HitTheBall</span>(<span class="params">BallEventArgs e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hitBallCallback != <span class="literal">null</span>)</span><br><span class="line">            hitBallCallback(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="回调和事件"><a href="#回调和事件" class="headerlink" title="回调和事件"></a>回调和事件</h3><p>代码上的区别：<br>事件发生后的响应在当前类<br>回调响应方法在其他类</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>事件</tag>
        <tag>委托</tag>
      </tags>
  </entry>
  <entry>
    <title>VCU</title>
    <url>/VCU.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="协议需求"><a href="#协议需求" class="headerlink" title="协议需求"></a>协议需求</h2><p>CANID：</p>
<h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>预充截止电压PreChargeVoltageGetTest：      (D01E- Battery External Voltage电池包外侧总电压)<br>绝缘电阻InsulationResistanceGetTest：      (D01C- Battery Insulation Resistance电池包的绝缘值)<br>电池静态温度BatteryTemperatureRiseTestT1：  (D02B- Battery Average Temperature电池温升)</p>
<h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>MCU转速MCUSpeedGetTest：                   (电机当前转速D034- Motor Actual Speed)<br>MCU温度MCUTempretureGetTest：D061         (MCU温度D02E- Inverter Actual Temperature)<br>电机温度MotorTempretureGetTest：C952        (电机温度D036- Motor Actual Temperature)<br>放电电流BatteryTotalCurrentTest：D030        (充电电流D027- Battery Total Current充电时电流为负值)<br>电池温升BatteryTemperatureRiseTestT2：D047    (D02B- Battery Average Temperature电池温升)<br>车速传感器SpeedSensorGetTest：<br>判断制动踏板ReadBrakeStatus：<br>刹车回馈电流FeedbackCurrentGetTest：D030     (D027- Battery Total Current回馈电流)</p>
<p>MCU转速与实际车速差值PreChargeVoltageGetTest：</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>lambda Expressions</title>
    <url>/lambda-Expressions.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="Expression-lambda"><a href="#Expression-lambda" class="headerlink" title="Expression lambda"></a>Expression lambda</h2><p>使用 lambda 声明运算符 =&gt; 从其主体中分离 lambda 参数列表。 若要创建 Lambda 表达式，需要在 Lambda 运算符左侧指定输入参数（如果有），然后在另一侧输入表达式或语句块。</p>
<p>任何 Lambda 表达式都可以转换为委托类型。 Lambda 表达式可以转换的委托类型由其参数和返回值的类型定义。如果 lambda 表达式不返回值，则可以将其转换为 Action 委托类型之一；否则，可将其转换为 Func 委托类型之一。 例如，有 2 个参数且不返回值的 Lambda 表达式可转换为 Action<T1,T2> 委托。 有 1 个参数且不返回值的 Lambda 表达式可转换为 Func<T,TResult> 委托。 以下示例中，lambda 表达式 x =&gt; x * x （指定名为 x 的参数并返回 x 平方值）将分配给委托类型的变量：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; square = x =&gt; x * x;</span><br><span class="line">Console.WriteLine(square(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 25</span></span><br></pre></td></tr></table></figure>
<p>仅当 lambda 只有一个输入参数时，括号才是可选的；否则括号是必需的。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用空括号指定零个输入参数：</span></span><br><span class="line">Action line = () =&gt; Console.WriteLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 括号内的两个或更多输入参数使用逗号加以分隔：</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>&gt; testForEquality = (x, y) =&gt; x == y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时，编译器无法推断输入类型。 可以显式指定类型，如下面的示例所示：</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>, <span class="built_in">bool</span>&gt; isTooLong = (<span class="built_in">int</span> x, <span class="built_in">string</span> s) =&gt; s.Length &gt; x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入参数类型必须全部为显式或全部为隐式；</span></span><br></pre></td></tr></table></figure>
<h2 id="Statement-lambda"><a href="#Statement-lambda" class="headerlink" title="Statement lambda"></a>Statement lambda</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">(input-parameters) =&gt; &#123; &lt;sequence-of-statements&gt; &#125;</span><br><span class="line"></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; func = (x, y)</span><br><span class="line">    =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; y; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK工位打印配置</title>
    <url>/BBK%E5%B7%A5%E4%BD%8D%E6%89%93%E5%8D%B0%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p><center></center><br>BBK检测线设备程序打印配置, 本文档只包含加载Excel模板进行打印的方式<br><span id="more"></span></p>
<h2 id="添加打印功能"><a href="#添加打印功能" class="headerlink" title="添加打印功能"></a>添加打印功能</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>编辑打开Always文件, 在对象列表中创建Print对象,如下图:</p>
<p><img src="BBK工位打印配置/NewPrintExcel.PNG" alt="New"></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在程序初始化中增加Print的初始化, 如下图:</p>
<p><img src="BBK工位打印配置/Init.PNG" alt="Init"></p>
<p>本文档选择PrintDbTable类, 意为从读取单个表中数据打印.</p>
<h3 id="新增菜单配置选项"><a href="#新增菜单配置选项" class="headerlink" title="新增菜单配置选项"></a>新增菜单配置选项</h3><p>进入菜单编辑中新增打印配置选项, 如下图:</p>
<p><img src="BBK工位打印配置/MenuShow.PNG" alt="New"></p>
<p>添加完成后保存退出编辑界面</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h3><p>软件打开后会在Config文件夹中生成ExcelReport和PrintConfig文件夹<br>可将已有模板和配置复制到相应文件夹中,或者新建excel后在软件中进行配置</p>
<p>双击打开Always程序, 在菜单中打开创建的打印配置选项</p>
<p>点击模板参数如下:</p>
<h4 id="配置链接字符串"><a href="#配置链接字符串" class="headerlink" title="配置链接字符串"></a>配置链接字符串</h4><p>DbConnectString对应需要访问数据库的链接字符串</p>
<p><img src="BBK工位打印配置/ConfigSql.PNG" alt="New"></p>
<h4 id="配置表名"><a href="#配置表名" class="headerlink" title="配置表名"></a>配置表名</h4><p>设置读取表名</p>
<p><img src="BBK工位打印配置/ConfigTable.PNG" alt="New"></p>
<h3 id="模板编辑"><a href="#模板编辑" class="headerlink" title="模板编辑"></a>模板编辑</h3><p>点击模板编辑进行字段绑定及格式配置</p>
<p>如下图: 在右侧模板中点击需要配置的单元格,勾选左侧启用后可以进行相应字段操作</p>
<p><img src="BBK工位打印配置/TempConfig1.PNG" alt="New"><br><img src="BBK工位打印配置/TempConfig2.PNG" alt="New"></p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>编辑完模板后可点击查询按钮进行数据查询, 若出现下图报错,说明数据表中没有已打印字段,需要在数据库中进行添加</p>
<p><img src="BBK工位打印配置/FieldError.PNG" alt="New"></p>
<p>数据库中添加字段可参考:<br><a href="/BBK-PostgreSQL%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5.html" title="BBK-PostgreSQL添加字段">BBK-PostgreSQL添加字段</a></p>
<p>添加完字段后便可进行查询打印<br><img src="BBK工位打印配置/Select.PNG" alt="New"></p>
<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><h3 id="手动打印"><a href="#手动打印" class="headerlink" title="手动打印"></a>手动打印</h3><p>在打印配置中查询并打印</p>
<h3 id="测试结束自动打印"><a href="#测试结束自动打印" class="headerlink" title="测试结束自动打印"></a>测试结束自动打印</h3><p>在always中调用Print函数,参数为模板名</p>
<p><img src="BBK工位打印配置/Print.PNG" alt="New"></p>
<p>注意: 改函数调用后默认会打印数据库中最早的一条未打印数据, 若要打印最新数据需将之前的已打印字段设置成Y, 或者要下最新的dll更新</p>
<p>若不想自动打,只在需要时手动查询进行打印可在PrintConfig文件夹相应模板中将AutoPrint改为false,改为false后即使调用Print函数也不会打印</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK-PostgreSQL添加字段</title>
    <url>/BBK-PostgreSQL%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5.html</url>
    <content><![CDATA[<p><center></center><br>本文以”已打印”字段为例<br><span id="more"></span></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>已打印字段格式可参考已上传字段: 不为空, 默认为’N’</p>
<p><img src="BBK-PostgreSQL添加字段/CreatFieldScript.PNG" alt="New"></p>
<p>在创建的脚本中更改字段名, 先屏蔽后面两条属性设置(若数据库中无历史数据可忽略),点击执行创建字段</p>
<p><img src="BBK-PostgreSQL添加字段/Execute1.PNG" alt="New"></p>
<p>由于数据库中存在历史数据, 新创建的字段默认为空, 因此后面设置不能为空会报错, 可先将数据库中的已打印字段赋值后再执行此查询设置属性.</p>
<p>如下图: 在表中创建Update脚本</p>
<p><img src="BBK-PostgreSQL添加字段/CreatUpdateScript.PNG" alt="New"></p>
<p>将表中的已打印字段设置成’Y’,点击执行查询后判断下方结果无报错可退出不需保存</p>
<p><img src="BBK-PostgreSQL添加字段/Execute2.PNG" alt="New"></p>
<p>再返回到刚才创建的字段查询中进行后续操作即可</p>
<p><img src="BBK-PostgreSQL添加字段/Execute3.PNG" alt="New"></p>
]]></content>
      <tags>
        <tag>BBK</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK无线OBD判断连接</title>
    <url>/BBK%E6%97%A0%E7%BA%BFOBD%E5%88%A4%E6%96%AD%E8%BF%9E%E6%8E%A5.html</url>
    <content><![CDATA[<p><center></center><br>无线或有线OBD通过软件方式判断OBD的插入与拔出<br><span id="more"></span></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>BBK OBD需要从车端取电, 模块上电后才可进行数据交互, 判断是否插入时实时与模块进行通讯,当模块有反馈时表示已插好.</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>初始化通讯</li>
<li>在需要判断的流程中增加判断步骤</li>
</ol>
<h3 id="Always"><a href="#Always" class="headerlink" title="Always"></a>Always</h3><p>在程序初始化的地方创建通讯, 参数为CAN标识,运行程序会自动出现在系统配置的VehicleCmd中.<br>注意调用对象类型应为CanCmdOpraLib.VehicleCmdObject</p>
<p><img src="BBK无线OBD判断连接/Init.PNG" alt="Init"></p>
<p>可参考下图在合适位置调用判断函数, 已连接向下执行Y, 未连接执行N继续等待</p>
<p><img src="BBK无线OBD判断连接/Check.PNG" alt="Check"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>执行完<br><img src="BBK无线OBD判断连接/Config.PNG" alt="Config"></p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>C Sharp 补课笔记 -- 变体泛型</title>
    <url>/C-Sharp-%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0%20--%20%E5%8F%98%E4%BD%93%E6%B3%9B%E5%9E%8B.html</url>
    <content><![CDATA[<center></center>

<p>基础知识普及<br>逆变与协变对应子类与父类之间的转换<br><span id="more"></span></p>
<h2 id="变体泛型接口"><a href="#变体泛型接口" class="headerlink" title="变体泛型接口"></a>变体泛型接口</h2><p>使用 out 关键字将泛型类型参数声明为协变</p>
<h3 id="类型仅用作接口方法的返回类型，不用作方法参数的类型"><a href="#类型仅用作接口方法的返回类型，不用作方法参数的类型" class="headerlink" title="类型仅用作接口方法的返回类型，不用作方法参数的类型"></a>类型仅用作接口方法的返回类型，不用作方法参数的类型</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ICovariant</span>&lt;<span class="keyword">out</span> <span class="title">R</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">R <span class="title">GetSomething</span>()</span>;</span><br><span class="line">    <span class="comment">// The following statement generates a compiler error.</span></span><br><span class="line">    <span class="comment">// void SetSomething(R sampleArg);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此规则有一个例外。 如果具有用作方法参数的逆变泛型委托，则可将类型用作该委托的泛型类型参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ICovariant</span>&lt;<span class="keyword">out</span> <span class="title">R</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params">Action&lt;R&gt; callback</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类型不用作接口方法的泛型约束"><a href="#类型不用作接口方法的泛型约束" class="headerlink" title="类型不用作接口方法的泛型约束"></a>类型不用作接口方法的泛型约束</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ICovariant</span>&lt;<span class="keyword">out</span> <span class="title">R</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The following statement generates a compiler error</span></span><br><span class="line">    <span class="comment">// because you can use only contravariant or invariant types</span></span><br><span class="line">    <span class="comment">// in generic constraints.</span></span><br><span class="line">    <span class="comment">// void DoSomething&lt;T&gt;() where T : R;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 in 关键字将泛型类型参数声明为逆变</p>
<h3 id="逆变类型只能用作方法参数的类型，不能用作接口方法的返回类型。-逆变类型还可用于泛型约束"><a href="#逆变类型只能用作方法参数的类型，不能用作接口方法的返回类型。-逆变类型还可用于泛型约束" class="headerlink" title="逆变类型只能用作方法参数的类型，不能用作接口方法的返回类型。 逆变类型还可用于泛型约束"></a>逆变类型只能用作方法参数的类型，不能用作接口方法的返回类型。 逆变类型还可用于泛型约束</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IContravariant</span>&lt;<span class="keyword">in</span> <span class="title">A</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetSomething</span>(<span class="params">A sampleArg</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : A</span>;</span><br><span class="line">    <span class="comment">// The following statement generates a compiler error.</span></span><br><span class="line">    <span class="comment">// A GetSomething();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="可以在同一接口中同时支持协变和逆变，但需应用于不同的类型参数"><a href="#可以在同一接口中同时支持协变和逆变，但需应用于不同的类型参数" class="headerlink" title="可以在同一接口中同时支持协变和逆变，但需应用于不同的类型参数"></a>可以在同一接口中同时支持协变和逆变，但需应用于不同的类型参数</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">i</span><br><span class="line">nterface IVariant&lt;<span class="keyword">out</span> R, <span class="keyword">in</span> A&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">R <span class="title">GetSomething</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetSomething</span>(<span class="params">A sampleArg</span>)</span>;</span><br><span class="line">    <span class="function">R <span class="title">GetSetSomethings</span>(<span class="params">A sampleArg</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现变体泛型"><a href="#实现变体泛型" class="headerlink" title="实现变体泛型"></a>实现变体泛型</h2><p>在类中实现变体泛型接口时，所用语法和用于固定接口的语法相同</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ICovariant</span>&lt;<span class="keyword">out</span> <span class="title">R</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">R <span class="title">GetSomething</span>()</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title">SampleImplementation</span>&lt;<span class="title">R</span>&gt; : <span class="title">ICovariant</span>&lt;<span class="title">R</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">GetSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Some code.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现变体接口的类是固定类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The interface is covariant.</span></span><br><span class="line">ICovariant&lt;Button&gt; ibutton = <span class="keyword">new</span> SampleImplementation&lt;Button&gt;();</span><br><span class="line">ICovariant&lt;Object&gt; iobj = ibutton;</span><br><span class="line"><span class="comment">// The class is invariant.</span></span><br><span class="line">SampleImplementation&lt;Button&gt; button = <span class="keyword">new</span> SampleImplementation&lt;Button&gt;();</span><br><span class="line"><span class="comment">// The following statement generates a compiler error</span></span><br><span class="line"><span class="comment">// because classes are invariant.</span></span><br><span class="line"><span class="comment">// SampleImplementation&lt;Object&gt; obj = button;</span></span><br></pre></td></tr></table></figure>
<h2 id="扩展变体泛型接口"><a href="#扩展变体泛型接口" class="headerlink" title="扩展变体泛型接口"></a>扩展变体泛型接口</h2><p>扩展变体泛型接口时，必须使用 in 和 out 关键字来显式指定派生接口是否支持变体。 编译器不会根据正在扩展<br>的接口来推断变体</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ICovariant</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IInvariant</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICovariant</span>&lt;<span class="title">T</span>&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IExtCovariant</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt; : <span class="title">ICovariant</span>&lt;<span class="title">T</span>&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>尽管 IInvariant\<T> 接口和 T 接口扩展的是同一个接口，但泛型类型参数 IExtCovariant\<out T> 在前者中为固定参数，在后者中为协变参数。 此规则也适用于逆变泛型类型参数。<br>无论泛型类型参数 T 在接口中是协变还是逆变，都可以创建一个接口来扩展这两类接口，只要在扩展接口中，该T 泛型类型参数为固定参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ICovariant</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IContravariant</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IInvariant</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICovariant</span>&lt;<span class="title">T</span>&gt;, <span class="title">IContravariant</span>&lt;<span class="title">T</span>&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>如果泛型类型参数 T 在一个接口中声明为协变，则无法在扩展接口中将其声明为逆变，反之亦然</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ICovariant</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt; &#123; &#125;</span><br><span class="line"><span class="comment">// The following statement generates a compiler error.</span></span><br><span class="line"><span class="comment">// interface ICoContraVariant&lt;in T&gt; : ICovariant&lt;T&gt; &#123; &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="变体泛型委托"><a href="#变体泛型委托" class="headerlink" title="变体泛型委托"></a>变体泛型委托</h2><p>NET Framework 3.5 引入了变体支持，用于在 C# 中匹配所有委托的方法签名和委托类型。 这表明不仅可以将具有匹配签名的方法分配给委托，还可以将返回派生程度较大的派生类型的方法分配给委托（协变），或者如果方法所接受参数的派生类型所具有的派生程度小于委托类型指定的程度（逆变），也可将其分配给委托。 这包括泛型委托和非泛型委托。</p>
<p>在 .NET Framework 4 或更高版本中，可以启用委托之间的隐式转换，以便在具有泛型类型参数所指定的不同类型按变体的要求继承自对方时，可以将这些类型的泛型委托分配给对方。<br>若要启用隐式转换，必须使用 in 或 out 关键字将委托中的泛型参数显式声明为协变或逆变。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Type T is declared covariant by using the out keyword.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> T <span class="title">SampleGenericDelegate</span> &lt;<span class="keyword">out</span> T&gt;()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SampleGenericDelegate &lt;String&gt; dString = () =&gt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">// You can assign delegates to each other,</span></span><br><span class="line">    <span class="comment">// because the type T is declared covariant.</span></span><br><span class="line">    SampleGenericDelegate &lt;Object&gt; dObject = dString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果仅使用变体支持来匹配方法签名和委托类型，且不使用 in 和 out 关键字，则可能会发现有时可以使用相同的 lambda 表达式或方法实例化委托，但不能将一个委托分配给另一个委托</p>
<p>在以下代码示例中， SampleGenericDelegate\<String> 不能显式转换为 SampleGenericDelegate\<Object> ，尽管String 继承 Object 。 可以使用 T 关键字标记 泛型参数 out 解决此问题</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> T <span class="title">SampleGenericDelegate</span>&lt;<span class="title">T</span>&gt;()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SampleGenericDelegate&lt;String&gt; dString = () =&gt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">// You can assign the dObject delegate</span></span><br><span class="line">    <span class="comment">// to the same lambda expression as dString delegate</span></span><br><span class="line">    <span class="comment">// because of the variance support for</span></span><br><span class="line">    <span class="comment">// matching method signatures with delegate types.</span></span><br><span class="line">    SampleGenericDelegate&lt;Object&gt; dObject = () =&gt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">// The following statement generates a compiler error</span></span><br><span class="line">    <span class="comment">// because the generic type T is not marked as covariant.</span></span><br><span class="line">    <span class="comment">// SampleGenericDelegate &lt;Object&gt; dObject = dString;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以使用 out 关键字声明泛型委托中的泛型类型参数协变。 协变类型只能用作方法返回类型，而不能用作方法参数的类型</p>
<p><code>public delegate R DCovariant&lt;out R&gt;();</code></p>
<p>可以使用 in 关键字声明泛型委托中的泛型类型参数逆变。 逆变类型只能用作方法参数的类型，而不能用作方法返回类型</p>
<p><code>public delegate void DContravariant&lt;in A&gt;(A a);</code></p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>CSharp 补课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C Sharp 补课笔记 -- LINQ to XML</title>
    <url>/C-Sharp-%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0-LINQ-to-XML.html</url>
    <content><![CDATA[<p><center></center><br>LINQ to XML 是一种启用了 LINQ 的内存 XML 编程接口，支持在 .NET Framework 编程语言中处理 XML<br><span id="more"></span></p>
<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Load the XML file from our project directory containing the purchase orders</span></span><br><span class="line"><span class="keyword">var</span> filename = <span class="string">&quot;PurchaseOrder.xml&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> currentDirectory = Directory.GetCurrentDirectory();</span><br><span class="line"><span class="keyword">var</span> purchaseOrderFilepath = Path.Combine(currentDirectory, filename);</span><br><span class="line">XElement purchaseOrder = XElement.Load(purchaseOrderFilepath);</span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; partNos = <span class="keyword">from</span> item <span class="keyword">in</span> purchaseOrder.Descendants(<span class="string">&quot;Item&quot;</span>)<span class="keyword">select</span> (<span class="built_in">string</span>) item.Attribute(<span class="string">&quot;PartNumber&quot;</span>);</span><br><span class="line"></span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; partNos = purchaseOrder.Descendants(<span class="string">&quot;Item&quot;</span>).Select(x =&gt; (<span class="built_in">string</span>)</span><br><span class="line">x.Attribute(<span class="string">&quot;PartNumber&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="创建XML"><a href="#创建XML" class="headerlink" title="创建XML"></a>创建XML</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">XElement contacts =</span><br><span class="line"><span class="keyword">new</span> XElement(<span class="string">&quot;Contacts&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Contact&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> XElement(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Patrick Hines&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> XElement(<span class="string">&quot;Phone&quot;</span>, <span class="string">&quot;206-555-0144&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> XAttribute(<span class="string">&quot;Type&quot;</span>, <span class="string">&quot;Home&quot;</span>)),</span><br><span class="line">        <span class="keyword">new</span> XElement(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;425-555-0145&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> XAttribute(<span class="string">&quot;Type&quot;</span>, <span class="string">&quot;Work&quot;</span>)),</span><br><span class="line">        <span class="keyword">new</span> XElement(<span class="string">&quot;Address&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;Street1&quot;</span>, <span class="string">&quot;123 Main St&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;City&quot;</span>, <span class="string">&quot;Mercer Island&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;State&quot;</span>, <span class="string">&quot;WA&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;Postal&quot;</span>, <span class="string">&quot;68042&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="LINQ-to-XML"><a href="#LINQ-to-XML" class="headerlink" title="LINQ to XML"></a>LINQ to XML</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">XElement srcTree = <span class="keyword">new</span> XElement(<span class="string">&quot;Root&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Element&quot;</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Element&quot;</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Element&quot;</span>, <span class="number">3</span>),</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Element&quot;</span>, <span class="number">4</span>),</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Element&quot;</span>, <span class="number">5</span>)</span><br><span class="line">);</span><br><span class="line">XElement xmlTree = <span class="keyword">new</span> XElement(<span class="string">&quot;Root&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Child&quot;</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Child&quot;</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">from</span> el <span class="keyword">in</span> srcTree.Elements()</span><br><span class="line">    <span class="keyword">where</span> (<span class="built_in">int</span>)el &gt; <span class="number">2</span></span><br><span class="line">    <span class="keyword">select</span> el</span><br><span class="line">);</span><br><span class="line">Console.WriteLine(xmlTree);</span><br></pre></td></tr></table></figure>
<h3 id="XAttribute"><a href="#XAttribute" class="headerlink" title="XAttribute"></a>XAttribute</h3><p>创建包含属性的元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">XElement phone = <span class="keyword">new</span> XElement(<span class="string">&quot;Phone&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> XAttribute(<span class="string">&quot;Type&quot;</span>, <span class="string">&quot;Home&quot;</span>),</span><br><span class="line">    <span class="string">&quot;555-555-5555&quot;</span>);</span><br><span class="line">Console.WriteLine(phone);</span><br><span class="line"><span class="comment">//&lt;Phone Type=&quot;Home&quot;&gt;555-555-5555&lt;/Phone&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="XML示例"><a href="#XML示例" class="headerlink" title="XML示例"></a>XML示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">XDocument d = <span class="keyword">new</span> XDocument(</span><br><span class="line">    <span class="keyword">new</span> XComment(<span class="string">&quot;This is a comment.&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> XProcessingInstruction(<span class="string">&quot;xml-stylesheet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;href=&#x27;mystyle.css&#x27; title=&#x27;Compact&#x27; type=&#x27;text/css&#x27;&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> XElement(<span class="string">&quot;Pubs&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> XElement(<span class="string">&quot;Book&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;Title&quot;</span>, <span class="string">&quot;Artifacts of Roman Civilization&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;Author&quot;</span>, <span class="string">&quot;Moreno, Jordao&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> XElement(<span class="string">&quot;Book&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;Title&quot;</span>, <span class="string">&quot;Midieval Tools and Implements&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> XElement(<span class="string">&quot;Author&quot;</span>, <span class="string">&quot;Gazit, Inbar&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> XComment(<span class="string">&quot;This is another comment.&quot;</span>)</span><br><span class="line">);</span><br><span class="line">d.Declaration = <span class="keyword">new</span> XDeclaration(<span class="string">&quot;1.0&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">Console.WriteLine(d);</span><br><span class="line">d.Save(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--This is a comment.--&gt;</span></span><br><span class="line"><span class="comment">&lt;?xml-stylesheet href=&#x27;mystyle.css&#x27; title=&#x27;Compact&#x27; type=&#x27;text/css&#x27;?&gt;</span></span><br><span class="line"><span class="comment">&lt;Pubs&gt;</span></span><br><span class="line"><span class="comment">&lt;Book&gt;</span></span><br><span class="line"><span class="comment">&lt;Title&gt;Artifacts of Roman Civilization&lt;/Title&gt;</span></span><br><span class="line"><span class="comment">&lt;Author&gt;Moreno, Jordao&lt;/Author&gt;</span></span><br><span class="line"><span class="comment">&lt;/Book&gt;</span></span><br><span class="line"><span class="comment">&lt;Book&gt;</span></span><br><span class="line"><span class="comment">&lt;Title&gt;Midieval Tools and Implements&lt;/Title&gt;</span></span><br><span class="line"><span class="comment">&lt;Author&gt;Gazit, Inbar&lt;/Author&gt;</span></span><br><span class="line"><span class="comment">&lt;/Book&gt;</span></span><br><span class="line"><span class="comment">&lt;/Pubs&gt;</span></span><br><span class="line"><span class="comment">&lt;!--This is another comment.--&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>CSharp 补课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C# RESTful</title>
    <url>/C-Sharp%20RESTful.html</url>
    <content><![CDATA[<p><center></center><br>Representational State Transfer<br><span id="more"></span></p>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>表现层状态转化<br>如果一个架构符合REST原则，就称它为RESTful架构</p>
<p>REST的名称”表现层状态转化”中, “表现层”指的是”资源”（Resources）的”表现层”。<br>URI（统一资源标识符）指向资源，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p>
<h3 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h3><p>把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）<br>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现</p>
<h3 id="State-Transfer"><a href="#State-Transfer" class="headerlink" title="State Transfer"></a>State Transfer</h3><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化</p>
<p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”</p>
<p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">RESTful</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckValidationResult</span>(<span class="params"><span class="built_in">object</span> sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebResponse <span class="title">Post</span>(<span class="params"><span class="built_in">string</span> Url, <span class="built_in">string</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//System.Net.WebException: 基础连接已经关闭: 未能为 SSL/TLS 安全通道建立信任关系</span></span><br><span class="line">        ServicePointManager.ServerCertificateValidationCallback = <span class="keyword">new</span> System.Net.Security.RemoteCertificateValidationCallback(CheckValidationResult);</span><br><span class="line">        <span class="comment">//System.Net.WebException: 请求被中止: 未能创建 SSL/TLS 安全通道</span></span><br><span class="line">        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 |</span><br><span class="line">            SecurityProtocolType.Tls |</span><br><span class="line">            (SecurityProtocolType)<span class="number">0x300</span> |</span><br><span class="line">            (SecurityProtocolType)<span class="number">0xC00</span>;</span><br><span class="line">        <span class="built_in">string</span> response;</span><br><span class="line">        HttpWebRequest request = WebRequest.Create(Url) <span class="keyword">as</span> HttpWebRequest;</span><br><span class="line">        request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(data);</span><br><span class="line">        <span class="comment">//request.ContentType = &quot;application/x-www-form-urlencoded&quot;;</span></span><br><span class="line">        request.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">        request.ContentLength = bytes.Length;</span><br><span class="line">        <span class="comment">//request.Headers.Add(&quot;X-Access-Token&quot;, httpToken);</span></span><br><span class="line">        <span class="keyword">using</span> (Stream responseStream = request.GetRequestStream())</span><br><span class="line">        &#123;</span><br><span class="line">            responseStream.Write(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">using</span> (HttpWebResponse webResponse = request.GetResponse() <span class="keyword">as</span> HttpWebResponse)</span><br><span class="line">        &#123;</span><br><span class="line">            StreamReader streamReader = <span class="keyword">new</span> StreamReader(webResponse.GetResponseStream(), Encoding.UTF8);</span><br><span class="line">            response = streamReader.ReadToEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">            request.Abort();</span><br><span class="line">        WebResponse webRes = JsonConvert.DeserializeObject&lt;WebResponse&gt;(response);</span><br><span class="line">        <span class="keyword">return</span> webRes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> Url</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> response;</span><br><span class="line">        HttpWebRequest request = WebRequest.Create(Url) <span class="keyword">as</span> HttpWebRequest;</span><br><span class="line">        <span class="comment">//request.Proxy = null;</span></span><br><span class="line">        <span class="comment">//request.KeepAlive = false;</span></span><br><span class="line">        request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">        request.ContentType = <span class="string">&quot;application/json; charset=UTF-8&quot;</span>;</span><br><span class="line">        <span class="comment">//request.AutomaticDecompression = DecompressionMethods.GZip;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (HttpWebResponse webResponse = request.GetResponse() <span class="keyword">as</span> HttpWebResponse)</span><br><span class="line">        &#123;</span><br><span class="line">            StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(webResponse.GetResponseStream(), Encoding.UTF8);</span><br><span class="line">            response = myStreamReader.ReadToEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">            request.Abort();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WebResponse</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> status;<span class="comment">//200</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> message;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>C Sharp 补课笔记 -- LINQ</title>
    <url>/C-Sharp-%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0-LINQ.html</url>
    <content><![CDATA[<p><center></center><br>语言集成查询</p>
<p>LINQ 数据源是支持泛型 IEnumerable\<T> 接口或从中继承的接口的任意对象<br><span id="more"></span></p>
<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">LINQQueryExpressions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Specify the data source.</span></span><br><span class="line">        <span class="built_in">int</span>[] scores = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">97</span>, <span class="number">92</span>, <span class="number">81</span>, <span class="number">60</span> &#125;;</span><br><span class="line">        <span class="comment">// Define the query expression.</span></span><br><span class="line">        IEnumerable&lt;<span class="built_in">int</span>&gt; scoreQuery =</span><br><span class="line">        <span class="keyword">from</span> score <span class="keyword">in</span> scores</span><br><span class="line">        <span class="keyword">where</span> score &gt; <span class="number">80</span></span><br><span class="line">        <span class="keyword">select</span> score;<span class="comment">// 此时scoreQuery并无数据</span></span><br><span class="line">        <span class="comment">// Execute the query.执行foreach后才有数</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> scoreQuery)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// Output: 97 92 81</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> queryLondonCustomers3 =</span><br><span class="line"><span class="keyword">from</span> cust <span class="keyword">in</span> customers</span><br><span class="line"><span class="keyword">where</span> cust.City == <span class="string">&quot;London&quot;</span></span><br><span class="line"><span class="keyword">orderby</span> cust.Name <span class="keyword">ascending</span><span class="comment">//descending</span></span><br><span class="line"><span class="keyword">select</span> cust;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = <span class="keyword">from</span> cust <span class="keyword">in</span> Customer</span><br><span class="line"><span class="keyword">where</span> cust.City = <span class="string">&quot;BeiJing&quot;</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> &#123;Name = cust.Name, City = cust.City&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> query = Customer.Where(c =&gt; c.City == <span class="string">&quot;BeiJing&quot;</span>).Select(n =&gt; <span class="keyword">new</span> &#123;Name = n.Name, City = n.Cith&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="生成到xml"><a href="#生成到xml" class="headerlink" title="生成到xml"></a>生成到xml</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create the query.</span></span><br><span class="line"><span class="keyword">var</span> studentsToXML = <span class="keyword">new</span> XElement(<span class="string">&quot;Root&quot;</span>,</span><br><span class="line">    <span class="keyword">from</span> student <span class="keyword">in</span> students</span><br><span class="line">    <span class="keyword">let</span> scores = <span class="built_in">string</span>.Join(<span class="string">&quot;,&quot;</span>, student.Scores)</span><br><span class="line">    <span class="function"><span class="keyword">select</span> <span class="keyword">new</span> <span class="title">XElement</span>(<span class="params"><span class="string">&quot;student&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">new</span> XElement(<span class="string">&quot;First&quot;</span>, student.First</span>),</span></span><br><span class="line"><span class="function">        <span class="keyword">new</span> <span class="title">XElement</span>(<span class="params"><span class="string">&quot;Last&quot;</span>, student.Last</span>),</span></span><br><span class="line"><span class="function">        <span class="keyword">new</span> <span class="title">XElement</span>(<span class="params"><span class="string">&quot;Scores&quot;</span>, scores</span>)</span></span><br><span class="line"><span class="function">        ) <span class="comment">// end &quot;student&quot;</span></span></span><br><span class="line"><span class="function">    )</span>; <span class="comment">// end &quot;Root&quot;</span></span><br><span class="line"><span class="comment">// Execute the query.</span></span><br><span class="line">Console.WriteLine(studentsToXML);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;Root&gt;</span></span><br><span class="line"><span class="comment">&lt;student&gt;</span></span><br><span class="line"><span class="comment">&lt;First&gt;Svetlana&lt;/First&gt;</span></span><br><span class="line"><span class="comment">&lt;Last&gt;Omelchenko&lt;/Last&gt;</span></span><br><span class="line"><span class="comment">&lt;Scores&gt;97,92,81,60&lt;/Scores&gt;</span></span><br><span class="line"><span class="comment">&lt;/student&gt;</span></span><br><span class="line"><span class="comment">&lt;student&gt;</span></span><br><span class="line"><span class="comment">&lt;First&gt;Claire&lt;/First&gt;</span></span><br><span class="line"><span class="comment">&lt;Last&gt;O&#x27;Donnell&lt;/Last&gt;</span></span><br><span class="line"><span class="comment">&lt;Scores&gt;75,84,91,39&lt;/Scores&gt;</span></span><br><span class="line"><span class="comment">&lt;/student&gt;</span></span><br><span class="line"><span class="comment">&lt;student&gt;</span></span><br><span class="line"><span class="comment">&lt;First&gt;Sven&lt;/First&gt;</span></span><br><span class="line"><span class="comment">&lt;Last&gt;Mortensen&lt;/Last&gt;</span></span><br><span class="line"><span class="comment">&lt;Scores&gt;88,94,65,91&lt;/Scores&gt;</span></span><br><span class="line"><span class="comment">&lt;/student&gt;</span></span><br><span class="line"><span class="comment">&lt;/Root&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="Let标识符"><a href="#Let标识符" class="headerlink" title="Let标识符"></a>Let标识符</h2><p>引入查询表达式中任何表达式结果的标识符</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> studentQuery5 =</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">in</span> students</span><br><span class="line"><span class="keyword">let</span> totalScore = student.Scores[<span class="number">0</span>] + student.Scores[<span class="number">1</span>] +</span><br><span class="line">student.Scores[<span class="number">2</span>] + student.Scores[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">where</span> totalScore / <span class="number">4</span> &lt; student.Scores[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">select</span> student.Last + <span class="string">&quot; &quot;</span> + student.First;</span><br><span class="line"><span class="comment">//select totalScore</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> studentQuery6 =</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">in</span> students</span><br><span class="line"><span class="keyword">let</span> totalScore = student.Scores[<span class="number">0</span>] + student.Scores[<span class="number">1</span>] +</span><br><span class="line">student.Scores[<span class="number">2</span>] + student.Scores[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">select</span> totalScore;</span><br><span class="line"><span class="built_in">double</span> averageScore = studentQuery6.Average();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> studentQuery8 =</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">in</span> students</span><br><span class="line"><span class="keyword">let</span> x = student.Scores[<span class="number">0</span>] + student.Scores[<span class="number">1</span>] +</span><br><span class="line">student.Scores[<span class="number">2</span>] + student.Scores[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">where</span> x &gt; averageScore</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> &#123; id = student.ID, score = x &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Join products and categories based on CategoryId</span></span><br><span class="line"><span class="keyword">var</span> query = <span class="keyword">from</span> product <span class="keyword">in</span> products</span><br><span class="line"><span class="keyword">join</span> category <span class="keyword">in</span> categories <span class="keyword">on</span> product.CategoryId <span class="keyword">equals</span> category.Id</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> &#123; product.Name, category.CategoryName &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="比较集运算"><a href="#比较集运算" class="headerlink" title="比较集运算"></a>比较集运算</h2><h3 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h3><p>返回的序列包含输入序列的唯一元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] planets = &#123; <span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Venus&quot;</span>, <span class="string">&quot;Venus&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Mars&quot;</span>, <span class="string">&quot;Earth&quot;</span> &#125;;</span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; query = <span class="keyword">from</span> planet <span class="keyword">in</span> planets.Distinct()</span><br><span class="line"><span class="keyword">select</span> planet;</span><br><span class="line"><span class="comment">/* This code produces the following output:</span></span><br><span class="line"><span class="comment">* *</span></span><br><span class="line"><span class="comment">Mercury</span></span><br><span class="line"><span class="comment">* Venus</span></span><br><span class="line"><span class="comment">* Earth</span></span><br><span class="line"><span class="comment">* Mars</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="Except"><a href="#Except" class="headerlink" title="Except"></a>Except</h3><p>回的序列只包含位于第一个输入序列但不位于第二个输入序列的元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] planets1 = &#123; <span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Venus&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Jupiter&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">string</span>[] planets2 = &#123; <span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Mars&quot;</span>, <span class="string">&quot;Jupiter&quot;</span> &#125;;</span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; query = <span class="keyword">from</span> planet <span class="keyword">in</span> planets1.Except(planets2)</span><br><span class="line"><span class="keyword">select</span> planet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Venus</span></span><br></pre></td></tr></table></figure>
<h3 id="Intersect"><a href="#Intersect" class="headerlink" title="Intersect"></a>Intersect</h3><p>返回的序列包含两个输入序列共有的元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] planets1 = &#123; <span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Venus&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Jupiter&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">string</span>[] planets2 = &#123; <span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Mars&quot;</span>, <span class="string">&quot;Jupiter&quot;</span> &#125;;</span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; query = <span class="keyword">from</span> planet <span class="keyword">in</span> planets1.Intersect(planets2)</span><br><span class="line"><span class="keyword">select</span> planet;</span><br><span class="line"><span class="comment">/* This code produces the following output:</span></span><br><span class="line"><span class="comment">* *</span></span><br><span class="line"><span class="comment">Mercury</span></span><br><span class="line"><span class="comment">* Earth</span></span><br><span class="line"><span class="comment">* Jupiter</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>返回的序列包含两个输入序列的唯一元素</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] planets1 = &#123; <span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Venus&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Jupiter&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">string</span>[] planets2 = &#123; <span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Mars&quot;</span>, <span class="string">&quot;Jupiter&quot;</span> &#125;;</span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; query = <span class="keyword">from</span> planet <span class="keyword">in</span> planets1.Union(planets2)</span><br><span class="line"><span class="keyword">select</span> planet;</span><br><span class="line"><span class="comment">/* This code produces the following output:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*Mercury</span></span><br><span class="line"><span class="comment">* Venus</span></span><br><span class="line"><span class="comment">* Earth</span></span><br><span class="line"><span class="comment">* Jupiter</span></span><br><span class="line"><span class="comment">* Mars</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>CSharp 补课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C-Sharp-补课笔记--托管代码</title>
    <url>/C-Sharp-%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0-%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="托管代码"><a href="#托管代码" class="headerlink" title="托管代码"></a>托管代码</h2><p>使用 .NET Framework 时，我们经常会遇到“托管代码”这个术语。 本文档解释这个术语的含义及其更多相关信息。<br>简而言之，托管代码就是执行过程交由运行时管理的代码。 在这种情况下，相关的运行时称为公共语言运行时<br>(CLR)，不管使用的是哪种实现（Mono、.NET Framework 或.NET Core）。 CLR 负责提取托管代码、将其编译成机器代<br>码，然后执行它。 除此之外，运行时还提供多个重要服务，例如自动内存管理、安全边界、类型安全，等等。<br>相反，如果运行 C/C++ 程序，则运行的代码也称为“非托管代码”。 在非托管环境中，程序员需要亲自负责处理相当<br>多的事情。 实际的程序在本质上是操作系统 (OS) 载入内存，然后启动的二进制代码。 其他任何工作 - 从内存管理<br>到安全考虑因素 - 对于程序员来说是一个不小的负担。<br>托管代码是使用可在 .NET 上运行的一种高级语言（例如 C#、Visual Basic、F# 等）编写的。 使用相应的编译器编译以<br>这些语言编写的代码时，无法获得机器代码， 而是获得中间语言代码，然后运行时会对其进行编译并将其执行。<br>C++ 是这条规则的一个例外，因为它也能够生成可在 Windows 上运行的本机非托管二进制代码。</p>
<h2 id="中间语言和执行"><a href="#中间语言和执行" class="headerlink" title="中间语言和执行"></a>中间语言和执行</h2><p>什么是“中间语言”（简称 IL）？ 中间语言是编译使用高级 .NET 语言编写的代码后获得的结果。 对使用其中一种语言<br>编写的代码进行编译后，即可获得 IL 所生成的二进制代码。 必须注意，IL 独立于在运行时顶层运行的任何特定语<br>言；行业甚至为它单独制定了规范，如果有需要，你可以阅读该规范。<br>从高级代码生成 IL 后，你很有可能想要运行它。 CLR 此时将接管工作，启动实时 (JIT) 编译过程，或者将代码从 IL<br>实时编译成可以真正在 CPU 上运行的机器代码。 这样，CLR 就能确切地知道代码的作用，并可以有效地 管理 代<br>码。<br>中间语言有时也称为公共中间语言 (CIL) 或 Microsoft 中间语言 (MSIL)。</p>
<h2 id="托管代码互操作性"><a href="#托管代码互操作性" class="headerlink" title="托管代码互操作性"></a>托管代码互操作性</h2><p>当然，CLR 允许越过托管与非托管环境之间的边界，同时，即使在基类库中，也有很多代码可以做到这一点。 这称<br>为互操作性，简称 interop。 例如，使用这些机制可以包装某个非托管库以及调用该库。 但是，请务必注意，如果采<br>取这种方法，当代码越过运行时的边界时，实际的执行管理将再次交接到托管代码，因而需要遵守相同的限制。<br>与此类似，C# 语言可让你利用所谓的不安全上下文（指定执行过程不由 CLR 管理的代码片段），在代码中直接使用<br>非托管构造，例如指针。</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>CSharp 补课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C Sharp 补课笔记 -- 迭代器</title>
    <url>/C-Sharp-%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0-%E8%BF%AD%E4%BB%A3%E5%99%A8.html</url>
    <content><![CDATA[<p><center></center><br>迭代器方法或 get 访问器可对集合执行自定义迭代。 迭代器方法使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器函数时，将从该位置重新开始执行。<br>可以使用 yield break 语句来终止迭代。<br><span id="more"></span></p>
<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function"><span class="built_in">int</span> number <span class="keyword">in</span> <span class="title">SomeNumbers</span>())</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(number.ToString() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// Output: 3 5 8</span></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> System.Collections.<span class="function">IEnumerable <span class="title">SomeNumbers</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代器方法或 get 访问器的返回类型可以是 IEnumerable、IEnumerable\<T>、IEnumerator 或 IEnumerator\<T>。</p>
<blockquote>
<p>迭代器可用作一种方法，或一个 get 访问器。 不能在事件、实例构造函数、静&gt;态构造函数或静态终结器中使用迭代器。</p>
<p>必须存在从 yield return 语句中的表达式类型到迭代器返回的 &gt;IEnumerable\<T> 类型参数的隐式转换。</p>
<p>在 C# 中，迭代器方法不能有任何 in 、 ref 或 out 参数。</p>
<p>在 C# 中， yield 不是保留字，只有在 return 或 break 关键字之前使用时才有特殊含义。</p>
</blockquote>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>CSharp 补课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>EV设备调试</title>
    <url>/EV%E8%AE%BE%E5%A4%87%E8%B0%83%E8%AF%95.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="通道盒GSB"><a href="#通道盒GSB" class="headerlink" title="通道盒GSB"></a>通道盒GSB</h2><p>串口助手设备115200波特率, 发送GSB5 ?</p>
<h2 id="安规仪"><a href="#安规仪" class="headerlink" title="安规仪"></a>安规仪</h2><p>串口助手设备115200波特率, 发送*IDN?或MEAS?</p>
<h2 id="万用表"><a href="#万用表" class="headerlink" title="万用表"></a>万用表</h2><p>安装GDM834X USB Driver后设备管理器可查看串口号</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>启用Windows远程控制</title>
    <url>/%E5%90%AF%E7%94%A8Windows%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6.html</url>
    <content><![CDATA[<center></center>

<p>配置开启远程桌面<br><span id="more"></span></p>
<h2 id="开启远程桌面"><a href="#开启远程桌面" class="headerlink" title="开启远程桌面"></a>开启远程桌面</h2><p>我的电脑—属性—-高级系统设置</p>
<p>按照下图进行勾选</p>
<p><img src="启用Windows远程控制/Setting.png" alt="Setting"></p>
<h2 id="允许空密码登录"><a href="#允许空密码登录" class="headerlink" title="允许空密码登录"></a>允许空密码登录</h2><p>不做此设置需要在被远程电脑上设置密码后才可进行远程控制</p>
<p>Win+R 输入Gpedit.msc<br>如下图, 选择”已禁用”后点击确定</p>
<p><img src="启用Windows远程控制/NullKey.png" alt="NullKey"></p>
<h2 id="CredSSP报错处理"><a href="#CredSSP报错处理" class="headerlink" title="CredSSP报错处理"></a>CredSSP报错处理</h2><p>Win+R 输入Gpedit.msc<br>路径为:计算机配置-管理模板-系统-凭据分配-加密数据库修正</p>
<p>如下图,选择”已启用”后保护级别选择”易受攻击”后点击确定</p>
<p><img src="启用Windows远程控制/CredSSP.jpg" alt="CredSSP"></p>
<p>若找不到相应配置, 如Windows Server系统<br>解决方法为: 我的电脑-属性-远程设置 <strong>取消勾选</strong>下图中的进允许运行使用网络级别身份验证的远程桌面的计算机链接</p>
<p><img src="启用Windows远程控制/Setting.png" alt="Setting"></p>
]]></content>
  </entry>
  <entry>
    <title>HUD标定</title>
    <url>/HUD%E6%A0%87%E5%AE%9A.html</url>
    <content><![CDATA[<p><center></center><br>主要包括HUD机器人角度标定方式<br><span id="more"></span></p>
<h2 id="标定相机"><a href="#标定相机" class="headerlink" title="标定相机"></a>标定相机</h2><h3 id="添加标定界面"><a href="#添加标定界面" class="headerlink" title="添加标定界面"></a>添加标定界面</h3><p>参考轮眉标定配置:<br><a href="/%E8%BD%AE%E7%9C%89%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95-%E6%A3%8B%E7%9B%98%E6%A0%BC.html" title="轮眉软件调试-棋盘格">轮眉软件调试-棋盘格</a></p>
<h3 id="选择标定类型"><a href="#选择标定类型" class="headerlink" title="选择标定类型"></a>选择标定类型</h3><p><img src="HUD标定/配置标定.PNG" alt="标定类型"></p>
<h3 id="标定"><a href="#标定" class="headerlink" title="标定"></a>标定</h3><p><img src="HUD标定/标定.PNG" alt="标定界面"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>目前HUD测试中只用到了相机内参,所以标定板左上角十字坐标和棋盘格参数务必保持准确.</p>
<h2 id="标定相机角度"><a href="#标定相机角度" class="headerlink" title="标定相机角度"></a>标定相机角度</h2><p>当前版本机器人无法准确标定相机三个角度的零点, 且无法正确的通过上位机补偿角度.<br>可以采用上位机辅助机器人确定好角度零点后再进行机器人坐标系标定.</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="添加角度识别"><a href="#添加角度识别" class="headerlink" title="添加角度识别"></a>添加角度识别</h4><p><img src="HUD标定/配置角度识别.PNG" alt="标定类型"></p>
<h4 id="移动机器人"><a href="#移动机器人" class="headerlink" title="移动机器人"></a>移动机器人</h4><p>将相机移动至于标靶中心平行的位置</p>
<h4 id="打开相机拍照"><a href="#打开相机拍照" class="headerlink" title="打开相机拍照"></a>打开相机拍照</h4><p><img src="HUD标定/调整角度前.PNG" alt="标定类型"></p>
<p>中心十字线为图像中心点,要求图像中心在标靶中心可保证Ry,Rz角度为零</p>
<h4 id="旋转相机角度"><a href="#旋转相机角度" class="headerlink" title="旋转相机角度"></a>旋转相机角度</h4><p>调整Ry,Rz使标靶中心位于图像中心</p>
<p><img src="HUD标定/调整角度后.PNG" alt="标定类型"></p>
<p>调整红色ROI区域使四个角点位于四个孔的中心(据版本算法而定),点击识别点(角度)</p>
<p><img src="HUD标定/识别角度.PNG" alt="标定类型"></p>
<p>左上角为Rx旋转角, 调节相机Rx使其接近0即可找到三个角度的零点位置</p>
<h3 id="机器人标定"><a href="#机器人标定" class="headerlink" title="机器人标定"></a>机器人标定</h3><p>保持角度不变的情况下对机器人进行坐标系0点的标定.</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>C-Sharp-补课笔记-反射</title>
    <url>/C-Sharp-%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%B0%84.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">InterfaceBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Class1"><a href="#Class1" class="headerlink" title="Class1"></a>Class1</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">InterfaceBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125; <span class="keyword">set</span> =&gt; <span class="keyword">this</span>.name = <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">88</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Write homework.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Worker</span> : <span class="title">InterfaceBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); <span class="keyword">set</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Working.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Class2"><a href="#Class2" class="headerlink" title="Class2"></a>Class2</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">InterfaceBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125; <span class="keyword">set</span> =&gt; <span class="keyword">this</span>.name = <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Teaching Math.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TestClass"><a href="#TestClass" class="headerlink" title="TestClass"></a>TestClass</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> dllPath = System.Environment.CurrentDirectory;</span><br><span class="line"><span class="comment">//加载路径下的文件</span></span><br><span class="line"><span class="built_in">string</span>[] files = Directory.GetFiles(dllPath);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">string</span> <span class="keyword">file</span> <span class="keyword">in</span> files)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">file</span>.Contains(<span class="string">&quot;.dll&quot;</span>))<span class="comment">//过滤</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    Assembly ass = Assembly.LoadFile(<span class="keyword">file</span>);</span><br><span class="line">    Type[] types = ass.GetTypes();</span><br><span class="line">    <span class="built_in">object</span> obj = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (Type t <span class="keyword">in</span> types)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断类是否实现接口</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span>(InterfaceBase).IsAssignableFrom(t))</span><br><span class="line">        &#123;</span><br><span class="line">            obj = ass.CreateInstance(t.FullName, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">is</span> InterfaceBase)<span class="comment">//判断的另一种形式</span></span><br><span class="line">        &#123;</span><br><span class="line">            InterfaceBase ib = obj <span class="keyword">as</span> InterfaceBase;</span><br><span class="line">            ib.DoSomething();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Markdown</title>
    <url>/Hexo-Markdown.html</url>
    <content><![CDATA[<h2 id="Hexo指令"><a href="#Hexo指令" class="headerlink" title="Hexo指令"></a>Hexo指令</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">hexo new 布局 &quot;文章名&quot;</span><br><span class="line">hexo clean //清除静态页面缓存（清除 public 文件夹)         </span><br><span class="line">hexo g     //在本地生成静态页面（生成 public 文件夹）        </span><br><span class="line">hexo s     //启动本地服务 http://localhost:4000, 进行预览调试           </span><br><span class="line">hexo d     //远程部署，同步到 GitHub         </span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save    //自动部署</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d          //发布</span><br></pre></td></tr></table></figure>
<h2 id="Markdown格式"><a href="#Markdown格式" class="headerlink" title="Markdown格式"></a>Markdown格式</h2><h3 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">    &amp;ensp; //相当于1个空格  </span></span><br><span class="line"><span class="code">    &amp;emsp; //相当于2个空格, 1个汉字  </span></span><br><span class="line"><span class="code">分段: 两个回车</span></span><br><span class="line"><span class="code">换行: 两个空格 + 回车</span></span><br><span class="line"><span class="code">标题: # ~ ######, #号的个数表示几级标题，即表示一级标题到六级标题</span></span><br></pre></td></tr></table></figure>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span> | <span class="strong">**加粗**</span> | <span class="strong">**<span class="emphasis">*斜体加粗*</span>**</span>  </span><br><span class="line"><span class="emphasis">_斜体_</span> | <span class="strong">__加粗__</span> | <span class="strong">__<span class="emphasis">_斜体加粗_</span>__</span>  </span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
<p>引用: &gt; 注意后面紧跟个空格</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 以下为引用效果</span></span><br><span class="line">继续引用</span><br><span class="line"><span class="quote">&gt; &gt;二级引用</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下为引用效果<br>继续引用</p>
<blockquote>
<p>二级引用</p>
</blockquote>
</blockquote>
<p>表格: - 和 | 分割行和列 ,  : 控制对齐方式</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 0 | 1 | 2|</span><br><span class="line">| :- | -: | :-: |</span><br><span class="line">| 0 | 1 | 2 |</span><br><span class="line">| 0 | 1 | 2 |</span><br><span class="line">| 0 | 1 | 2 |</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">0</th>
<th style="text-align:right">1</th>
<th style="text-align:center">2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:right">1</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:right">1</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:right">1</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</div>
<p>代码块: 四个空格开头或三个<code>链接:</code><a href="链接地址">文字</a><code>邮件链接：</code><a href="mailto:xxx@xx.com.cn">xxx</a>`<br>图片: ![图片说明](图片地址)，地址可以是本地路径，也可以是网络地址<br>列表: * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格</p>
<h3 id="设置字体段落格式"><a href="#设置字体段落格式" class="headerlink" title="设置字体段落格式"></a>设置字体段落格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;居中&lt;/center&gt;</span><br><span class="line">&lt;font color=&quot;#FF0000&quot;&gt; 设置颜色 &lt;/font&gt;  </span><br><span class="line">&lt;font size=6&gt; 设置大小 &lt;/font&gt;</span><br><span class="line">&lt;font size=5 color=&quot;#FF0000&quot;&gt; 设置颜色和大小&lt;/font&gt;</span><br></pre></td></tr></table></figure>
<center>居中</center>

<font color="#FF0000"> 设置颜色 </font>  
<font size=6> 设置大小 </font>
<font size=5 color="#FF0000"> 设置颜色和大小</font>

<h3 id="引用站内文章"><a href="#引用站内文章" class="headerlink" title="引用站内文章"></a>引用站内文章</h3><p>在写文章的过程中，有时候需要引用站内的其他文章。可以通过内置的标签插件的语法post_link来实现引用。<br><code>&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</code></p>
<h2 id="Hexo主题设计"><a href="#Hexo主题设计" class="headerlink" title="Hexo主题设计"></a>Hexo主题设计</h2><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><p>头像配置文件位于：主题配置文件中的 avatar下</p>
<h3 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h3><p>版权信息的配置文件位于：next\layout\\_macro\my-copyright中</p>
<h3 id="添加文章密码"><a href="#添加文章密码" class="headerlink" title="添加文章密码"></a>添加文章密码</h3><h4 id="方法一-测试可用"><a href="#方法一-测试可用" class="headerlink" title="方法一(测试可用)"></a>方法一(测试可用)</h4><h5 id="安装hexo-blog-encrypt"><a href="#安装hexo-blog-encrypt" class="headerlink" title="安装hexo-blog-encrypt"></a>安装hexo-blog-encrypt</h5><p>根目录的package.json文件夹中添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;hexo-blog-encrypt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.*&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后在命令行输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>根目录下的_config.yml文件中添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt<span class="punctuation">:</span></span><br><span class="line">    enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>在需要加密的文章头部写入password：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">password<span class="punctuation">:</span> abc123</span><br><span class="line">abstract<span class="punctuation">:</span> Welcome to my blog<span class="punctuation">,</span> enter password to read.</span><br><span class="line">message<span class="punctuation">:</span> Welcome to my blog<span class="punctuation">,</span> enter password to read.</span><br></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>在 themes-&gt;next-&gt;layout-&gt;\\_partials-&gt;head.swig 中添加下面内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">prompt</span>(<span class="string">&#x27;请输入文章密码&#x27;</span>) !== <span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;密码错误,交钱还是跑路？&#x27;</span>);</span><br><span class="line">                history.<span class="title function_">back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>然后在文章头部加入password。</p>
<h3 id="添加边栏背景图"><a href="#添加边栏背景图" class="headerlink" title="添加边栏背景图"></a>添加边栏背景图</h3><p>在  themes\next\source\css\\_custom\custom.styl文件中<br>添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">sidebar</span> &#123;</span><br><span class="line"> <span class="attr">background</span>: <span class="title function_">url</span>([<span class="attr">https</span>:<span class="comment">//ws2.sinaimg.cn/large/006tKfTcly1fq2wrm6g3cj309i0hq749.jpg](https://ws2.sinaimg.cn/large/006tKfTcly1fq2wrm6g3cj309i0hq749.jpg &quot;https://ws2.sinaimg.cn/large/006tKfTcly1fq2wrm6g3cj309i0hq749.jpg&quot;)) no-repeat !important;</span></span><br><span class="line"> background-<span class="attr">size</span>: cover !important;</span><br><span class="line"> <span class="attr">position</span>: fixed !important;</span><br><span class="line"> <span class="attr">right</span>: <span class="number">0</span> !important;</span><br><span class="line"> <span class="attr">top</span>: <span class="number">0</span> !important;</span><br><span class="line"> <span class="attr">bottom</span>: <span class="number">0</span> !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="网易云音乐插件"><a href="#网易云音乐插件" class="headerlink" title="网易云音乐插件"></a>网易云音乐插件</h3><p>主题文件夹<br><code>layout\\\_custom\\sidebar.swig</code></p>
<h3 id="Warning-LF-will-be-replaced-by-CRLF"><a href="#Warning-LF-will-be-replaced-by-CRLF" class="headerlink" title="Warning: LF will be replaced by CRLF"></a>Warning: LF will be replaced by CRLF</h3><p><code>git config --global core.autocrlf false //禁用自动转换</code></p>
<h3 id="更改文章全局属性-标题"><a href="#更改文章全局属性-标题" class="headerlink" title="更改文章全局属性(标题)"></a>更改文章全局属性(标题)</h3><p><code>D:\GitProject\FirstHexo\themes\next\source\css\_common\components\post\post.styl</code></p>
<h3 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h3><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：hexo new photo “My Gallery”，在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md模板，并根据其内容建立文章，默认使用_config.yml 中的 default_layout 参数post代替</p>
<h3 id="网页折叠"><a href="#网页折叠" class="headerlink" title="网页折叠"></a>网页折叠</h3><h4 id="更改post-details-js"><a href="#更改post-details-js" class="headerlink" title="更改post-details.js"></a>更改post-details.js</h4><p>文件目录：themes/next/source/js/src/post-details.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.fold_hider&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&#x27;&gt;.fold&#x27;</span>, <span class="variable language_">this</span>.<span class="property">parentNode</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">        $(<span class="string">&#x27;&gt;:first&#x27;</span>, <span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//默认情况下折叠</span></span><br><span class="line">    $(<span class="string">&quot;div.fold&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="更改tags-js"><a href="#更改tags-js" class="headerlink" title="更改tags.js"></a>更改tags.js</h4><p>文件目录：themes/next/scripts/tags.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @haohuawu</span></span><br><span class="line"><span class="comment">  修复 Nunjucks 的 tag 里写 ```代码块```，最终都会渲染成 undefined 的问题</span></span><br><span class="line"><span class="comment">  https://github.com/hexojs/hexo/issues/2400</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> rEscapeContent = <span class="regexp">/&lt;escape(?:[^&gt;]*)&gt;([\s\S]*?)&lt;\/escape&gt;/g</span>;</span><br><span class="line"><span class="keyword">const</span> placeholder = <span class="string">&#x27;\uFFFD&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> rPlaceholder = <span class="regexp">/(?:&lt;|&amp;lt;)\!--\uFFFD(\d+)--(?:&gt;|&amp;gt;)/g</span>;</span><br><span class="line"><span class="keyword">const</span> cache = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">escapeContent</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;!--&#x27;</span> + placeholder + (cache.<span class="title function_">push</span>(str) - <span class="number">1</span>) + <span class="string">&#x27;--&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(rEscapeContent, <span class="keyword">function</span>(<span class="params">match, content</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">escapeContent</span>(content);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(rPlaceholder, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[<span class="variable language_">arguments</span>[<span class="number">1</span>]];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="scripts中增加fold-js"><a href="#scripts中增加fold-js" class="headerlink" title="scripts中增加fold.js"></a>scripts中增加fold.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="comment">// Usage: &#123;% fold ???? %&#125; Something </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fold</span> (<span class="params">args, content</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!text) text = <span class="string">&quot;点击显/隐&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;div&gt;&lt;div class=&quot;fold_hider&quot;&gt;&lt;div class=&quot;close hider_title&quot;&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;fold&quot;&gt;\n&#x27;</span> + hexo.<span class="property">render</span>.<span class="title function_">renderSync</span>(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">&#x27;markdown&#x27;</span>&#125;) + <span class="string">&#x27;\n&lt;/div&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;fold&#x27;</span>, fold, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="添加样式custom-styl"><a href="#添加样式custom-styl" class="headerlink" title="添加样式custom.styl"></a>添加样式custom.styl</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">hider_title</span>&#123;</span><br><span class="line">    font-<span class="attr">family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>;</span><br><span class="line">    <span class="attr">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">close</span>:after&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;▼&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">open</span>:after&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;▲&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">something you want to fold<span class="punctuation">,</span> include code block.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="添加Git公钥SSH"><a href="#添加Git公钥SSH" class="headerlink" title="添加Git公钥SSH"></a>添加Git公钥SSH</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C &quot;XXX@XXX.com&quot; #没公钥生成公钥</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一直回车后公钥生成在id_rsa.pub中</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Git中进入个人设置中添加即可</span></span><br><span class="line">ssh -T git@github.com #验证是否成功</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念</title>
    <url>/%E7%A2%8E%E7%A2%8E%E5%BF%B5.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="185cee3b6cbddbf3ac3e404605d7a97114268077631e3d07f8c70ba99480c702">02286ba5a9032ebccbd692d3dcc5fbf80bab7348f48c4bf2bd519743a1d85f26769926ea426a31fb5ac0e5cf30642a14cd7a73526ba1f50214e847175728e05ee2079257836fb7e3db19835622df3abd2162fb1e7efee4743e7ea9511b117b243759dbf084b2b5605e85132895c95dcbcf846944da6bfc5fb1390a78fb0c3a8d9ef7f10c423a41574b4d9b0bfa3b90f5cb54bfa8e79b51cb11fa4a7bbd037574297b7108ee8df6c072cfb34997e0f815562705b8c9306826d8622e2dc2cd0d6a0029f3af56a3c0db3513b7ae4c7a3fbef5ef461e0e58e3b6d72897b7b34a965f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Enter password to read！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>委托-匿名-Lambda表达式</title>
    <url>/%E5%A7%94%E6%89%98-%E5%8C%BF%E5%90%8D-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>数值可以赋值的类型是变量<br>方法可以赋值的类型是委托</p>
<p>C#中委托通过返回类型，参数类型进行分类，微软提供Action和Func两个泛型委托免去声明委托的步骤<br>提供lambda表达式免去声明函数体的步骤</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Do</span>(<span class="params">Action doSth</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    doSth();</span><br><span class="line">&#125;</span><br><span class="line">Do(()=&gt;Console.Write(AddResult));</span><br></pre></td></tr></table></figure>
<h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">calculator</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>; <span class="comment">//委托类型</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    calculator <span class="keyword">add</span> = <span class="keyword">new</span> calculator(Addition);</span><br><span class="line">    <span class="built_in">int</span> AddResult = <span class="keyword">add</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    Console.Write(AddResult);</span><br><span class="line"></span><br><span class="line">    calculator dec = <span class="keyword">new</span> calculator(Subtraction);</span><br><span class="line">    <span class="built_in">int</span> SubResult = dec(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    Console.write(SubResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 加法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;x&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;y&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>x+y<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Addition</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 减法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;x&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;y&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>x-y<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Subtraction</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">calculator</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>; <span class="comment">//委托</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   calculator <span class="keyword">add</span> = <span class="built_in">delegate</span>(<span class="built_in">int</span> num1,<span class="built_in">int</span> num2)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> num1 + num2;</span><br><span class="line">   &#125;;</span><br><span class="line">   calculator dec = <span class="built_in">delegate</span>(<span class="built_in">int</span> num1,<span class="built_in">int</span> num2)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> num1 - num2;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="built_in">int</span> AddResult = dec(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">   <span class="built_in">int</span> SubResult = dec(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">   Console.Write(AddResult);</span><br><span class="line">   Console.Write(SubResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">bool</span> <span class="title">MyBol</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">bool</span> <span class="title">MyBol_2</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">string</span> y</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">calculator</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>; <span class="comment">//委托类型</span></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">VS</span>()</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyBol Bol = (x, y) =&gt; x == y;</span><br><span class="line">    MyBol_2 Bol_2 = (x, s) =&gt; s.Length &gt; x;</span><br><span class="line">    calculator C = (X, Y) =&gt; X * Y;</span><br><span class="line">    VS S = () =&gt; Console.Write(<span class="string">&quot;我是无参数Labada表达式&quot;</span>);</span><br><span class="line">    <span class="built_in">int</span>[] numbers = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">int</span> oddNumbers = numbers.Count(n =&gt; n % <span class="number">2</span> == <span class="number">1</span>);</span><br><span class="line">    List&lt;People&gt; people = LoadData();<span class="comment">//初始化</span></span><br><span class="line">    IEnumerable&lt;People&gt; results = people.Where(<span class="built_in">delegate</span>(People p) &#123; <span class="keyword">return</span> p.age &gt; <span class="number">20</span>; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;People&gt; <span class="title">LoadData</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;People&gt; people = <span class="keyword">new</span> List&lt;People&gt;();   <span class="comment">//创建泛型对象  </span></span><br><span class="line">    People p1 = <span class="keyword">new</span> People(<span class="number">21</span>, <span class="string">&quot;guojing&quot;</span>);      <span class="comment">//创建一个对象  </span></span><br><span class="line">    People p2 = <span class="keyword">new</span> People(<span class="number">21</span>, <span class="string">&quot;wujunmin&quot;</span>);     <span class="comment">//创建一个对象  </span></span><br><span class="line">    People p3 = <span class="keyword">new</span> People(<span class="number">20</span>, <span class="string">&quot;muqing&quot;</span>);       <span class="comment">//创建一个对象  </span></span><br><span class="line">    People p4 = <span class="keyword">new</span> People(<span class="number">23</span>, <span class="string">&quot;lupan&quot;</span>);        <span class="comment">//创建一个对象  </span></span><br><span class="line">    people.Add(p1);                     <span class="comment">//添加一个对象  </span></span><br><span class="line">    people.Add(p2);                     <span class="comment">//添加一个对象  </span></span><br><span class="line">    people.Add(p3);                     <span class="comment">//添加一个对象  </span></span><br><span class="line">    people.Add(p4);</span><br><span class="line">    <span class="keyword">return</span> people;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;             <span class="comment">//设置属性  </span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;         <span class="comment">//设置属性  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">int</span> age, <span class="built_in">string</span> name</span>)      <span class="comment">//设置属性(构造函数构造)  </span></span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;                 <span class="comment">//初始化属性值age  </span></span><br><span class="line">      <span class="keyword">this</span>.name = name;               <span class="comment">//初始化属性值name  </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Func委托"><a href="#Func委托" class="headerlink" title="Func委托"></a>Func<T>委托</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最后一个参数为返回值类型</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>&gt; gwl = (p, j) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p + j == <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    Console.WriteLine(gwl(<span class="number">5</span>,<span class="number">5</span>) + <span class="string">&quot;&quot;</span>);   <span class="comment">//打印‘True’</span></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate<T></h3><p>一个特殊的Func, 其中入参只能有一个, 返回值只能是bool</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>委托</tag>
        <tag>匿名方法</tag>
        <tag>Lambda</tag>
        <tag>Func&lt;T&gt;委托</tag>
      </tags>
  </entry>
  <entry>
    <title>Test Project</title>
    <url>/Test-Project.html</url>
    <content><![CDATA[<h3 id="Test-File"><a href="#Test-File" class="headerlink" title="Test File"></a>Test File</h3><p>this is my first Hexo text file</p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
  </entry>
  <entry>
    <title>csharp XML</title>
    <url>/C-XML.html</url>
    <content><![CDATA[<h2 id="XML创建、读取配置"><a href="#XML创建、读取配置" class="headerlink" title="XML创建、读取配置"></a>XML创建、读取配置</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WirteConfig</span>(<span class="params"><span class="built_in">string</span> FileName, <span class="built_in">string</span> KeyName, <span class="built_in">string</span> Value</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> FilePath = OnlyOneStartUp.UseConfigPath;</span><br><span class="line">        <span class="built_in">string</span> AllFileName = FilePath + <span class="string">&quot;\\&quot;</span> + FileName + <span class="string">&quot;.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!Directory.Exists(FilePath))</span><br><span class="line">            Directory.CreateDirectory(FilePath);</span><br><span class="line"></span><br><span class="line">        DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">        <span class="keyword">if</span> (File.Exists(AllFileName))</span><br><span class="line">            ds.ReadXml(AllFileName);</span><br><span class="line">        <span class="keyword">if</span> (ds.Tables.Count &lt; <span class="number">1</span>)</span><br><span class="line">            ds.Tables.Add();</span><br><span class="line">        <span class="keyword">if</span> (ds.Tables[<span class="number">0</span>].Rows.Count &lt; <span class="number">1</span>)</span><br><span class="line">            ds.Tables[<span class="number">0</span>].Rows.Add();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!ds.Tables[<span class="number">0</span>].Columns.Contains(KeyName))</span><br><span class="line">            ds.Tables[<span class="number">0</span>].Columns.Add(KeyName);</span><br><span class="line">        ds.Tables[<span class="number">0</span>].Rows[<span class="number">0</span>][KeyName] = Value;</span><br><span class="line"></span><br><span class="line">        ds.WriteXml(AllFileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> sError = <span class="built_in">string</span>.Format(<span class="string">&quot;写入配置信息Error:&#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">        ErrorOut(MethodInfo.GetCurrentMethod().Name, sError);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读出配置文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FileName&quot;&gt;</span>配置文件名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;KeyName&quot;&gt;</span>键名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;Value&quot;&gt;</span>返回的值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ReadConfig</span>(<span class="params"><span class="built_in">string</span> FileName, <span class="built_in">string</span> KeyName, <span class="keyword">ref</span> <span class="built_in">string</span> Value</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> FilePath = OnlyOneStartUp.UseConfigPath;</span><br><span class="line">        <span class="built_in">string</span> AllFileName = FilePath + <span class="string">&quot;\\&quot;</span> + FileName + <span class="string">&quot;.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!Directory.Exists(FilePath))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">        <span class="keyword">if</span> (File.Exists(AllFileName))</span><br><span class="line">            ds.ReadXml(AllFileName);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (ds.Tables.Count &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (ds.Tables[<span class="number">0</span>].Rows.Count &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!ds.Tables[<span class="number">0</span>].Columns.Contains(KeyName))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Value = Convert.ToString(ds.Tables[<span class="number">0</span>].Rows[<span class="number">0</span>][KeyName]);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> sError = <span class="built_in">string</span>.Format(<span class="string">&quot;读取配置信息Error:&#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">        ErrorOut(MethodInfo.GetCurrentMethod().Name, sError);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadConfigEx</span>(<span class="params"><span class="built_in">string</span> FileName, <span class="built_in">string</span> KeyName, <span class="keyword">ref</span> <span class="built_in">string</span> Value</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ReadConfig(FileName, KeyName, <span class="keyword">ref</span> Value))</span><br><span class="line">        WirteConfig(FileName, KeyName, Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp Static</title>
    <url>/C-Static.html</url>
    <content><![CDATA[<p>静态方法只能访问类的静态成员，不能访问类的非静态成员；<br>非静态方法可以访问类的静态成员，也可以访问类的非静态成员；<br>静态方法不能使用实例来调用，只能使用类名来调用。<br><span id="more"></span></p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h3><blockquote>
<p>特点：</p>
<blockquote>
<p>1、该变量在全局数据区分配内存。<br>2、初始化：如果不显式初始化，那么将被隐式初始化为0。</p>
</blockquote>
</blockquote>
<h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><blockquote>
<p>特点：</p>
<blockquote>
<p>1、该变量在全局数据区分配内存。<br>2、初始化：如果不显式初始化，那么将被隐式初始化为0。<br>3、<strong>它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。</strong></p>
</blockquote>
</blockquote>
<h3 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h3><blockquote>
<p>内存分配：在程序的全局数据区分配。<br>初始化和定义：</p>
<blockquote>
<p>1、静态数据成员定义时要分配空间，所以不能在类声明中定义。<br>2、为了避免在多个使用该类的源文件中，对其重复定义，所以，不能在类的头文件中定义。<br>3、静态数据成员因为程序一开始运行就必需存在，所以其初始化的最佳位置在类的内部实现。</p>
</blockquote>
<p>特点</p>
<blockquote>
<p>对相于 public,protected,private 关键字的影响它和普通数据成员一样，因为其空间在全局数据区分配，属于所有本类的对象共享，所以，它不属于特定的类对象，在没产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作它。</p>
</blockquote>
<p>访问形式</p>
<blockquote>
<p>类对象名.静态数据成员名</p>
</blockquote>
</blockquote>
<p>静态数据成员，主要用在类的所有实例都拥有的属性上。比如，对于一个存款类，帐号相对于每个实例都是不同的，但每个实例的利息是相同的。所以，应该把利息设为存款类的静态数据成员。这有两个好处，第一，不管定义多少个存款类对象，利息数据成员都共享分配在全局区的内存，所以节省存贮空间。第二，一旦利息需要改变时，只要改变一次，则所有存款类对象的利息全改变过来了，因为它们实际上是共用一个东西。</p>
<h3 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h3><blockquote>
<p>特点：</p>
<blockquote>
<p>1、静态成员函数与类相联系，不与类的对象相联系。<br>2、静态成员函数不能访问非静态数据成员。原因很简单，非静态数据成员属于特定的类实例。</p>
</blockquote>
<p>作用：</p>
<blockquote>
<p>主要用于对静态数据成员的操作。</p>
</blockquote>
<p>调用形式：</p>
<blockquote>
<p>类对象名.静态成员函数名（）</p>
</blockquote>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>静态方法只能访问类的静态成员，不能访问类的非静态成员；<br>非静态方法可以访问类的静态成员，也可以访问类的非静态成员；<br>静态方法不能使用实例来调用，只能使用类名来调用。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> i = getNum();</span><br><span class="line"><span class="built_in">int</span> j = getNum();</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;i=&#123;0&#125;&quot;</span>,i);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;j=&#123;0&#125;&quot;</span>, <span class="keyword">new</span> class1().j);</span><br><span class="line">    Console.Read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：<code>Console.WriteLine(&quot;i=&#123;0&#125;&quot;,i);</code>这里<code>i</code>是<code>static</code>变量，而且类<code>class1</code>是第一次被引用，要先为<code>class1</code>里面所有的<code>static</code>变量分配内存。尽管现在有超线程技术，但是指令在逻辑还是一条一条的按顺序执行的，所以先为<code>static int i</code>分配内存，并且在该内存中保持<code>int</code>的缺省值<code>0</code>，接着再为<code>static</code> <code>int num</code> 变量分配内存，值当然也为<code>0</code>。</p>
<p>然后执行第二步，为变量赋值：先为<code>static int i</code>变量赋值，<code>i＝getNum()</code>，看getNum里面的代码，就是<code>return num</code>，这个时候<code>num</code>的值是<code>0</code>，于是<code>i</code>就为<code>0</code>了。然后对变量<code>num</code>赋值，<code>num＝1；</code>这行代码执行后，<code>num</code>就为<code>1</code>了。</p>
<h3 id="static的优点是什么？为什么要使用static-变量或函数？？"><a href="#static的优点是什么？为什么要使用static-变量或函数？？" class="headerlink" title="static的优点是什么？为什么要使用static 变量或函数？？"></a>static的优点是什么？为什么要使用static 变量或函数？？</h3><p>有一些频繁使用的东西，如果你每次使用都重新<code>new</code>一下，那么这个开销可能会很高，如果使用<code>static</code>，一直放在内存中，那么想用就直接用，而不需要重新<code>new</code>一块空间初始化数据。那么<code>static</code>就是为了实现一个系统的缓存作用的，其生命周期直到应用程序退出结束。</p>
<p>静态成员包括静态字段和静态属性，静态成员和类相关联，不依赖于对象而存在，只能由类访问，而不能由对象访问；</p>
<p>静态成员属于类所有，无论创建多少实例对象，静态成员在内存中只有一份；实例成员属于类的实例所有，每创建一个实例对象，实例成员都会在内存中分配一块内存区域。<br>所以静态成员一般用于存放共享的数据段，如数据库连接字符串等。</p>
<p>一个类如果只包含静态成员和静态方法，则该类可以定义为静态类，给类加上<code>static</code>修饰符；</p>
<h3 id="静态方法和非静态方法"><a href="#静态方法和非静态方法" class="headerlink" title="静态方法和非静态方法"></a>静态方法和非静态方法</h3><p>一、性能上：静态方法和实例方法差别不大。所有方法，不管是静态方法还是实例方法，都是在JIT加载类时分配内存，不同的是静态方法以类名引用，而实例方法对对象实例引用。创建实例时，不会再为类的方法分配内存，所有的实例对象共用一个类的方法代码。因此静态方法和实例方法的调用，在性能上的差别微乎其微。</p>
<p>二、静态方法只能由类访问；实例方法只能由对象访问。</p>
<blockquote>
<p>优点：</p>
<blockquote>
<p>1、静态变量在类载入时，就装入内存<br>2、使用时不用 New 就意味的不必创建类中所有对象，就可以调用某个方法</p>
</blockquote>
<p>缺点：</p>
<blockquote>
<p>垃圾回收机制不能回收静态变量，静态类变量会常驻内存</p>
</blockquote>
</blockquote>
<h3 id="c-中静态类的优缺点"><a href="#c-中静态类的优缺点" class="headerlink" title="c#中静态类的优缺点"></a>c#中静态类的优缺点</h3><blockquote>
<p>缺点：</p>
<blockquote>
<p>1、整个类型在程序运行期间只加载一次。 这样是对于那些经常使用的类型来说的，那就不用每次使用前都先加载。效率高些。但是对那些不常用的类型来说。<br>如果是静态类型，那就要一直占用相当的内存；一直到程序停止。或者应用程序域被卸载。所以应该只对那些常用的类型定义成静态类型。</p>
</blockquote>
<p>优点：</p>
<blockquote>
<p>1、它们仅包含静态成员。<br>2、它们不能被实例化。<br>3、它们是密封的。<br>4、它们不能包含实例构造函数（C# 编程指南）。</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>RGB颜色</title>
    <url>/RGB%E9%A2%9C%E8%89%B2.html</url>
    <content><![CDATA[<p><img src="RGB颜色/RGB1.png" alt=""></p>
<p><img src="RGB颜色/RGB2.png" alt=""></p>
<p><img src="RGB颜色/RGB3.png" alt=""></p>
]]></content>
      <categories>
        <category>RGB</category>
      </categories>
      <tags>
        <tag>RGB颜色表</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp基础</title>
    <url>/C-%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<p>记录写bug过程中遇到的一些疑问<br><span id="more"></span></p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>protected:只有同一类或派生类中的代码可以访问该类型或成员</p>
<p>internal:同一程序集中的任何代码都可以访问该类型或成员，但其他程序集中的代码不可以。</p>
<p>protected internal:同一程序集中的任何代码或其他程序集中的任何派生类都可以访问该类型或成员。</p>
<p>private protected:同一类或基类程序集内派生类中的代码可以访问该类型或成<br>员。</p>
<p>abstract:要求在派生类中重写类成员。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>值类型存储在堆栈上，引用类型在栈中存储一个引用，其实际的存储位置位于托管堆。<br>C#类为引用类型，结构为值类型。<br>从值类型转化为引用类型称为装箱，如果方法需要把一个对象作为参数，而且传送一个值类型，装箱操作会自动进行；装箱的值类型可以使用拆箱操作转换为值类型，在拆箱时，<strong>需要使用类型转换运算符</strong>。</p>
<h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>结构体 数值类型(整数，浮点数，高精度浮点数) 可空类型 布尔 字符 枚举</p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>数组，用户定义的类、接口、委托，object，字符串</p>
<h2 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h2><p>装箱是一种通过将变量存储到System.Object中来显式地将值类型转换为引用类型的机制。当您装入值时，CLR会将新对象分配到堆中，并将值类型的值复制到该实例中。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">20</span>;  </span><br><span class="line"><span class="built_in">object</span> b = a; <span class="comment">//装箱</span></span><br></pre></td></tr></table></figure>
<p>相反的操作是拆箱，它是将引用类型转换回值类型的过程。此过程验证接收数据类型是否与装箱类型一致;<br><code>int c = (int)b; // 拆箱</code></p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote>
<p>特征：</p>
<blockquote>
<p>类型安全<br>性能<br>二进制代码复用</p>
</blockquote>
</blockquote>
<p>详见： <a href="/%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%89%B9%E7%82%B9.html" title="泛型的特点">泛型的特点</a></p>
<h3 id="为什么不用object代替泛型"><a href="#为什么不用object代替泛型" class="headerlink" title="为什么不用object代替泛型"></a>为什么不用object代替泛型</h3><p>由于Object为所有类型的基类，所以可以处理任何数据类型的数据，但是其中存在这拆箱和装箱，如果数据太多会影响到程序的性能。<br>在使用泛型的时候程序会在编译阶段根据我们提供的类型生成相应的二进制代码，无须进行装箱和拆箱操作。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="为什么要用接口"><a href="#为什么要用接口" class="headerlink" title="为什么要用接口"></a>为什么要用接口</h3><p>接口一般由上层人员发起，下层人员实现。<br>写接口并不是为了扩展，而是为了扩展以后的模块仍然跟项目模块保持高度一致，为了扩展后的规范化。</p>
<p>反射</p>
<h3 id="实例化接口对象"><a href="#实例化接口对象" class="headerlink" title="实例化接口对象"></a>实例化接口对象</h3><h4 id="接口回调"><a href="#接口回调" class="headerlink" title="接口回调"></a>接口回调</h4><p>接口不仅可以声明对象，而且可以把对象实例化，还可以当做参数被传入。<br>即继承中的向上转型，父类 FL=new 子类()，只不过这里的父类就是interface接口。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">Itemp</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="built_in">double</span> <span class="title">plus</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">num</span> : <span class="title">Itemp</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">double</span> aa, bb;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">num</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.bb = b;</span><br><span class="line">    <span class="keyword">this</span>.aa = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">plus</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> (aa + bb);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  Itemp tm = <span class="literal">null</span>;<span class="comment">//声明接口对象引用</span></span><br><span class="line">  tm = <span class="keyword">new</span> num(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//接口回调(向上转型)</span></span><br><span class="line">  Console.WriteLine(tm.plus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类型参数约束"><a href="#类型参数约束" class="headerlink" title="类型参数约束"></a>类型参数约束</h2><p>&emsp;&emsp;在定义泛型类时，可以对客户端代码能够在实例化类时用于类型参数的类型种类施加限制。如果客户端代码尝试使用某个约束所不允许的类型来实例化类，则会产生编译时错误。这些限制称为约束。<br>类型参数约束.NET支持的类型参数约束有以下五种：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> T : <span class="keyword">struct</span>  <span class="comment">//类型参数必须是值类型；可以指定除 Nullable 以外的任何值类型</span></span><br><span class="line"><span class="keyword">where</span> T : <span class="keyword">class</span>   <span class="comment">//类型参数必须是引用类型；这一点也适用于任何类、接口、委托或数组类型</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()   <span class="comment">//类型参数必须具有无参数的公共构造函数。当与其他约束一起使用时，new() 约束必须最后指定</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">NameOfBaseClass</span>   <span class="comment">//类型参数必须是指定的基类或派生自指定的基类</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">NameOfInterface</span>   <span class="comment">//类型参数必须是指定的接口或实现指定的接口。可以指定多个接口约束。约束接口也可以是泛型的</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">U</span>    <span class="comment">//为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数</span></span><br></pre></td></tr></table></figure>
<h2 id="当前程序运行路径"><a href="#当前程序运行路径" class="headerlink" title="当前程序运行路径"></a>当前程序运行路径</h2><p><code>Directory.GetCurrentDirectory() + &quot;\\Config</code></p>
<h2 id="数据类型补充"><a href="#数据类型补充" class="headerlink" title="数据类型补充"></a>数据类型补充</h2><p><code>@&quot;&quot;&quot;Ahoy!&quot;&quot; cried the captain.&quot; // &quot;Ahoy!&quot; cried the captain.</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> d = <span class="number">3</span>D;</span><br><span class="line">d = <span class="number">4</span>d;</span><br><span class="line">d = <span class="number">3.934</span>_001;</span><br><span class="line"><span class="built_in">float</span> f = <span class="number">3</span>_000<span class="number">.5F</span>;</span><br><span class="line">f = <span class="number">5.4f</span>;</span><br><span class="line"><span class="built_in">decimal</span> myMoney = <span class="number">3</span>_000<span class="number">.5</span>m;</span><br><span class="line">myMoney = <span class="number">400.75</span>M;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Days</span><br><span class="line">&#123;</span><br><span class="line">  None = <span class="number">0b</span>_0000_0000, <span class="comment">// 0</span></span><br><span class="line">  Monday = <span class="number">0b</span>_0000_0001, <span class="comment">// 1</span></span><br><span class="line">  Tuesday = <span class="number">0b</span>_0000_0010, <span class="comment">// 2</span></span><br><span class="line">  Wednesday = <span class="number">0b</span>_0000_0100, <span class="comment">// 4</span></span><br><span class="line">  Thursday = <span class="number">0b</span>_0000_1000, <span class="comment">// 8</span></span><br><span class="line">  Friday = <span class="number">0b</span>_0001_0000, <span class="comment">// 16</span></span><br><span class="line">  Saturday = <span class="number">0b</span>_0010_0000, <span class="comment">// 32</span></span><br><span class="line">  Sunday = <span class="number">0b</span>_0100_0000, <span class="comment">// 64</span></span><br><span class="line">  Weekend = Saturday | Sunday</span><br><span class="line">&#125;</span><br><span class="line">Days meetingDays = Days.Monday | Days.Wednesday | Days.Friday;</span><br></pre></td></tr></table></figure>
<p>checked 关键字用于对整型类型算术运算和转换显式启用溢出检查</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line">checked</span><br><span class="line">&#123;</span><br><span class="line">  i += <span class="number">10</span>;</span><br><span class="line">  Console.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//i=0;不会抛异常</span></span><br></pre></td></tr></table></figure>
<h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><p>lock 语句获取给定对象的互斥 lock，执行语句块，然后释放 lock。 持有 lock 时，持有 lock 的线程可以再次获取并释放 lock。 阻止任何其他线程获取 lock 并等待释放 lock。</p>
<p>lock(引用类型)</p>
<p>当同步对共享资源的线程访问时，请锁定专用对象实例（例如,private readonly object balanceLock = new object(); ）或另一个不太可能被代码无关部分用作 lock 对象的实例。避免对不同的共享资源使用相同的 lock 对象实例，因为这可能导致死锁或锁争用</p>
<h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="keyword">var</span> streamTask = client.GetStringAsync(<span class="string">&quot;https://localHost:10000&quot;</span>);</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> responseText = <span class="keyword">await</span> streamTask;</span><br><span class="line">  <span class="keyword">return</span> responseText;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (HttpRequestException e) <span class="keyword">when</span> (e.Message.Contains(<span class="string">&quot;301&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Site Moved&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (HttpRequestException e) <span class="keyword">when</span> (e.Message.Contains(<span class="string">&quot;404&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Page Not Found&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (HttpRequestException e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> e.Message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>case 标签无需是互斥的，且 case 标签在 switch 语句中的显示顺序可以决定要执行的 switch块。 when 关键字可指定一个筛选条件，该条件使得仅当筛选条件也为 true 时，与其相关联的 case 标签才为 true。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> (expr) <span class="keyword">when</span> (<span class="keyword">when</span>-condition):</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> Shape shape <span class="keyword">when</span> shape.Area == <span class="number">0</span>:</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The shape: <span class="subst">&#123;shape.GetType().Name&#125;</span> with no dimensions&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="运算符-C-8-0"><a href="#运算符-C-8-0" class="headerlink" title="运算符 C#8.0"></a>运算符 C#8.0</h2><p>从末尾运算符 ^ 开始索引</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] xs = <span class="keyword">new</span>[] &#123; <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span> &#125;;</span><br><span class="line"><span class="built_in">int</span> last = xs[^<span class="number">1</span>];</span><br><span class="line"><span class="comment">// last = 40</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = <span class="keyword">new</span>[] &#123; <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> &#125;;</span><br><span class="line"><span class="built_in">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> amountToTake = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">int</span>[] subset = numbers[start..(start + amountToTake)];</span><br><span class="line">Display(subset); <span class="comment">// output: 10 20 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a.. 等效于 a..^0</span></span><br><span class="line"><span class="comment">//..b 等效于 0..b</span></span><br><span class="line"><span class="comment">//.. 等效于 0..^0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>命名空间别名限定符 :: 访问已设置别名的命名空间的成员</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> forwinforms = System.Drawing;</span><br><span class="line"><span class="keyword">using</span> forwpf = System.Windows;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Converters</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> forwpf::<span class="function">Point <span class="title">Convert</span>(<span class="params">forwinforms::Point point</span>)</span> =&gt; <span class="keyword">new</span> forwpf::Point(point.X, point.Y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客部署到Coding和github</title>
    <url>/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Coding%E5%92%8Cgithub.html</url>
    <content><![CDATA[<h3 id="部署到Github和Coding"><a href="#部署到Github和Coding" class="headerlink" title="部署到Github和Coding"></a>部署到Github和Coding</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><blockquote>
<p>Github：<br>新建Repository：name.github.io</p>
<p>Coding：<br>新建Repository：name.coding.me</p>
</blockquote>
<h4 id="添加SSH-key"><a href="#添加SSH-key" class="headerlink" title="添加SSH key"></a>添加SSH key</h4><p>若无SSHkey</p>
<blockquote>
<p>ssh-keygen -t rsa -C “your e-mail”<br>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>Enter same passphrase again:&lt;再次输入加密串&gt;</p>
</blockquote>
<p>打开生成的id_rsa.pub文件并复制其中的内容添加到Github或Coding项目中然后在git中执行</p>
<blockquote>
<p>Github：<br>    ssh -T git@github.com</p>
<p>Coding：<br>    ssh -T git@git.coding.net //coding<br>    ssh -T git@git.dev.tencent.com //腾讯云</p>
</blockquote>
<p>添加到腾讯云后需要开启Pages服务才可通过name.coding.me登录</p>
<h4 id="更改博客配置文件"><a href="#更改博客配置文件" class="headerlink" title="更改博客配置文件"></a>更改博客配置文件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:silencejql/silencejql.github.io.git</span><br><span class="line">    coding: git@git.dev.tencent.com:silencejql/silencejql.coding.me.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>不同格式相应作出调整即可</p>
<h4 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h4><p><a href="http://name.coding.me">http://name.coding.me</a> 在google chrome中打开可能会默认https，修复方式为:</p>
<blockquote>
<p>地址栏中输入 chrome://net-internals/#hsts<br>在 Delete domain security policies 中输入项目的域名，并 Delete 删除<br>可以在 Query domain 测试是否删除成功</p>
</blockquote>
<p>这里如果还是不行， 请清除浏览器缓存！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>托管DLL与非托管DLL</title>
    <url>/%E6%89%98%E7%AE%A1DLL%E4%B8%8E%E9%9D%9E%E6%89%98%E7%AE%A1DLL.html</url>
    <content><![CDATA[<p>&emsp;&emsp;托管DLL和非托管DLL的区别：狭义解释讲，托管DLL就在Dotnet环境生成的DLL文件；非托管DLL不是在Dotnet环境生成的DLL文件。<br>&emsp;&emsp;托管DLL文件，可以在Dotnet环境通过 “添加引用” 的方式，直接把托管DLL文件添加到项目中，然后通过 Using DLL命名空间，来调用相应的DLL对象；非托管DLL文件，在Dotnet环境应用时，通过DllImport 调用。<br><span id="more"></span></p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;托管dll虽然符合windows的PE格式规范，但是代码是以IL的形式保存在.Text 区的，而不是机器码，CLR会在运行时JIT编译成机器码再交给操作系统执行，这也就为什么托管代码称之为”托管”的意义。<br>&emsp;&emsp;所以，要想注入托管dll，首先需要在目标进程中启动CLR，然后让CLR来加载managed dll。<br>&emsp;&emsp;托管DLL，指完全由.NET托管代码实现的DLL，完全依赖于 .NET 平台的 CLR 运行。托管DLL，受.NET CLR管控，支持内存自动回收等的，对于.NET平台是安全DLL<br>&emsp;&emsp;非托管DLL，是指完全或者部分 不是用.NET代码实现，不依赖于.NET平台即可运行，例如 COM方式 的DLL，不支持自动回收内存，对于.NET平台而言，也是非安全可控的。</p>
<hr>
<p>&emsp;&emsp;正常编程所用的高级语言，是无法被计算机识别的。需要先将高级语言翻译为机器语言，才能被机器理解和运行。<br>在标准C/C++中，编译过程是这样的：<br><img src="托管DLL与非托管DLL/Ccompile.jpg" alt=""><br>&emsp;&emsp;源代码首先经过预处理器，对头文件以及宏进行解析，然后经过编译器，生成汇编代码，接着，经过汇编，生成机器指令，最后将所有文件连接起来。这种编译方式的优点在于，最终直接生成了机器码，可以直接被计算机识别和运行，无需任何中间运行环境，但缺点也在于，由于不同平台能够识别的机器码不同，因此程序的跨平台能力较差。<br>&emsp;&emsp;而在Java语言中，源代码并没有被直接翻译成机器码，而是编译成了一种中间代码（字节码Bytecode）。因此，运行Java程序需要一个额外的JRE（Java Runtime Enviromental）运行环境，在JRE中存在着JVM（Java Virtual Mechinal，Java虚拟机），在程序运行的时候，会将中间代码进一步解释为机器码，并在机器上运行。<br>&emsp;&emsp;使用中间代码的好处在于，程序的跨平台性比较好，一次编译，可以在不同的设备上运行。<br>&emsp;&emsp;托管/非托管是微软的.net framework中特有的概念，其中，非托管代码也叫本地（native）代码。与Java中的机制类似，也是先将源代码编译成中间代码（MSIL，Microsoft Intermediate Language），然后再由.net中的CLR将中间代码编译成机器代码。<br>&emsp;&emsp;而C#与Java的区别在于，Java是先编译后解释，C#是两次编译。</p>
<hr>
<h3 id="调用DLL中的非托管函数一般方法"><a href="#调用DLL中的非托管函数一般方法" class="headerlink" title="调用DLL中的非托管函数一般方法"></a>调用DLL中的非托管函数一般方法</h3><p>首先，应该在C#语言源程序中声明外部方法，其基本形式是：<br>    [DLLImport(“DLL文件”)]<br>修饰符 extern 返回变量类型 方法名称 （参数列表）<br>其中：</p>
<blockquote>
<p>DLL文件：包含定义外部方法的库文件。<br>修饰符： 访问修饰符，除了abstract以外在声明方法时可以使用的修饰符。<br>返回变量类型：在DLL文件中你需调用方法的返回变量类型。<br>方法名称：在DLL文件中你需调用方法的名称。<br>参数列表：在DLL文件中你需调用方法的列表。</p>
</blockquote>
<p>注意：需要在程序声明中使用System.Runtime.InteropServices命名空间。<br>DllImport只能放置在方法声明上。<br>DLL文件必须位于程序当前目录或系统定义的查询路径中（即：系统环境变量中Path所设置的路径）。</p>
<p><font color="#FF0000"><strong>返回变量类型、方法名称、参数列表一定要与DLL文件中的定义相一致。</strong></font><br>若要使用其它函数名，可以使用EntryPoint属性设置，如：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport(<span class="string">&quot;user32.dll&quot;</span>, EntryPoint=<span class="string">&quot;MessageBoxA&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">MsgBox</span>(<span class="params"><span class="built_in">int</span> hWnd, <span class="built_in">string</span> msg, <span class="built_in">string</span> caption, <span class="built_in">int</span> type</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImportAttribute(<span class="string">&quot;CN210S_CSM_LV1.dll&quot;</span>, EntryPoint = <span class="string">&quot;uds_calc_key&quot;</span>, CharSet = CharSet.Ansi)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">uds_calc_key_ldw</span>(<span class="params"><span class="built_in">string</span> seed, StringBuilder key</span>)</span>;</span><br></pre></td></tr></table></figure><br>其它可选的 DllImportAttribute 属性：</p>
<blockquote>
<p>CharSet： 指示用在入口点中的字符集，如：CharSet=CharSet.Ansi；<br>SetLastError： 指示方法是否保留 Win32”上一错误”，如：SetLastError=true；<br>ExactSpelling： 指示 EntryPoint 是否必须与指示的入口点的拼写完全匹配，如：ExactSpelling=false；<br>PreserveSig： 指示方法的签名应当被保留还是被转换， 如：PreserveSig=true；<br>CallingConvention： 指示入口点的调用约定， 如：CallingConvention=CallingConvention.Winapi；</p>
</blockquote>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>css常用属性</title>
    <url>/css%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.html</url>
    <content><![CDATA[<h2 id="文本设置"><a href="#文本设置" class="headerlink" title="文本设置"></a>文本设置</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: italic bold <span class="number">36px</span> 宋体; //顺序不可变</span><br><span class="line"><span class="attribute">font</span>-wight: <span class="number">100</span>-<span class="number">900</span>、bold（加粗）</span><br><span class="line">font-size: <span class="number">10px</span>; // 	<span class="number">12px</span>(<span class="number">12</span>像素)、<span class="number">50%</span>、larger、small</span><br><span class="line"><span class="attribute">font-style</span>: initial（初始）、italic（斜体字）、normal（默认）、oblique（倾斜）</span><br><span class="line">font-family: <span class="string">&quot;微软雅黑&quot;</span> // 宋体</span><br><span class="line">text-align: center; //横向排列  <span class="attribute">left</span>、<span class="attribute">right</span> 和 center</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">200px</span>; //文本行高 通俗的讲，文字高度加上文字上下的空白区域的高度 <span class="number">50%</span>:基于字体大小的百分比</span><br><span class="line">vertical-align:-<span class="number">4px</span>; //设置元素内容的垂直对齐方式 ,只对行内元素有效，对块级元素无效</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">150px</span>; //首行缩进</span><br><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">10px</span>; //字母间隙</span><br><span class="line"><span class="attribute">word-spacing</span>: <span class="number">20px</span>; //单词间隙</span><br><span class="line"><span class="attribute">text-transform</span>: capitalize; //单词大写</span><br></pre></td></tr></table></figure>
<h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: cornflowerblue; //背景颜色</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;1.jpg&#x27;</span>); //背景图片</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat/repeat-x/repeat=t; //(默认铺满，不重复，<span class="attribute">x</span>重复，<span class="attribute">y</span>重复)</span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">600px</span> <span class="number">250px</span> //大小</span><br><span class="line">background-position: right top（<span class="number">20px</span> <span class="number">20px</span>）;//(横向：<span class="attribute">left</span> center <span class="attribute">right</span>)(纵向：<span class="attribute">top</span> center <span class="attribute">bottom</span>) //简写：</span><br><span class="line">&lt;<span class="selector-tag">body</span> style=&quot;<span class="attribute">background</span>: <span class="number">20px</span> <span class="number">20px</span> no-repeat <span class="number">#ff4</span> <span class="built_in">url</span>(<span class="string">&#x27;1.jpg&#x27;</span>)<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;div style=&quot;</span>width: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">300px</span>;<span class="attribute">background</span>: <span class="number">20px</span> <span class="number">20px</span> no-repeat <span class="number">#ff4</span> <span class="built_in">url</span>(<span class="string">&#x27;1.jpg&#x27;</span>)<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="颜色属性"><a href="#颜色属性" class="headerlink" title="颜色属性"></a>颜色属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">color</span>:blueviolet<span class="string">&quot;&gt;ppppp&lt;/div&gt; //颜色少</span></span><br><span class="line"><span class="string">&lt;div style=&quot;</span>color:<span class="number">#ffee33</span><span class="string">&quot;&gt;ppppp&lt;/div&gt;  //百度颜色代码可以查询更多</span></span><br><span class="line"><span class="string">&lt;div style=&quot;</span>color:<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)<span class="string">&quot;&gt;ppppp&lt;/div&gt; //三原色 红绿蓝256级</span></span><br><span class="line"><span class="string">&lt;div style=&quot;</span>color:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)<span class="string">&quot;&gt;ppppp&lt;/div&gt; //比上一个 加了一个透明度</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>数据转换</title>
    <url>/%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2.html</url>
    <content><![CDATA[<h2 id="IEEE-to-Double、Char、int"><a href="#IEEE-to-Double、Char、int" class="headerlink" title="IEEE to Double、Char、int"></a>IEEE to Double、Char、int</h2><h3 id="在线转换工具"><a href="#在线转换工具" class="headerlink" title="在线转换工具"></a>在线转换工具</h3><p><a href="http://www.binaryconvert.com">http://www.binaryconvert.com</a></p>
<h3 id="C-IEEE-to-Single"><a href="#C-IEEE-to-Single" class="headerlink" title="C# IEEE to Single"></a>C# IEEE to Single</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Single <span class="title">IEEE2Single</span>(<span class="params"><span class="built_in">byte</span>[] b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Array.Reverse(b);</span><br><span class="line">        Single d = BitConverter.ToSingle(b, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (Single)Math.Round(d, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">byte</span>[] <span class="title">SingleToIEEE</span>(<span class="params">Single d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] b = <span class="keyword">new</span> <span class="built_in">byte</span>[]&#123;&#125;;</span><br><span class="line">        b = BitConverter.GetBytes(d);</span><br><span class="line">        Array.Reverse(b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3CA97E13-&gt;0.02069</p>
<h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><h3 id="Double-to-Hex"><a href="#Double-to-Hex" class="headerlink" title="Double to Hex"></a>Double to Hex</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> Height_LF = (<span class="built_in">int</span>)Convert.ToDouble(XmlFO.ListObject[<span class="string">&quot;WBH_LF&quot;</span>].xValue);</span><br><span class="line">Height_RR *= <span class="number">4</span>;</span><br><span class="line"><span class="built_in">string</span> s = <span class="built_in">string</span>.Empty;</span><br><span class="line">s = s + ((<span class="built_in">byte</span>)(Height_LF &gt;&gt; <span class="number">8</span>)).ToString(<span class="string">&quot;x2&quot;</span>)+ <span class="string">&quot; &quot;</span>;</span><br><span class="line">s = s + ((<span class="built_in">byte</span>)(Height_LF)).ToString(<span class="string">&quot;x2&quot;</span>) + <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<p>2700-&gt;0a 8c</p>
<h3 id="Byte-to-uint"><a href="#Byte-to-uint" class="headerlink" title="Byte to uint"></a>Byte to uint</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">uint</span> <span class="title">BytesToUint</span>(<span class="params"><span class="built_in">byte</span>[] bys</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">uint</span> ReVal = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="built_in">byte</span> b <span class="keyword">in</span> bys)</span><br><span class="line">  &#123;</span><br><span class="line">      ReVal &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">      ReVal += b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ReVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">byte</span>[] <span class="title">UintToBytes</span>(<span class="params"><span class="built_in">uint</span> UnVal, <span class="built_in">int</span> Count</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">byte</span>[] ReVal = <span class="keyword">new</span> <span class="built_in">byte</span>[Count];</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Count; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      ReVal[Count - i - <span class="number">1</span>] = (<span class="built_in">byte</span>)(UnVal &gt;&gt; (i * <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ReVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Int-to-Byte"><a href="#Int-to-Byte" class="headerlink" title="Int to Byte"></a>Int to Byte</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">ToByte</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">string</span>[] SepPara;</span><br><span class="line">      <span class="keyword">if</span> (!XmlFO.SepParams(sPara, <span class="number">2</span>, <span class="keyword">out</span> SepPara))</span><br><span class="line">          <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">      xBytes tmpbyte = (xBytes)XmlFO.GetCheckSpecTypeObject(SepPara[<span class="number">0</span>], <span class="keyword">typeof</span>(xBytes));</span><br><span class="line">      <span class="keyword">if</span> (tmpbyte == <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">int</span> Count = Convert.ToInt32(SepPara[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (Count &gt; <span class="number">4</span>) Count = <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">if</span> (Count &lt; <span class="number">1</span>) Count = <span class="number">1</span>;</span><br><span class="line">      Byte[] TmpByte = <span class="keyword">new</span> <span class="built_in">byte</span>[Count];</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Count; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          TmpByte[i] = (<span class="built_in">byte</span>)((iValue &gt;&gt; ((Count - i - <span class="number">1</span>) * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      tmpbyte.Bytes = TmpByte;</span><br><span class="line">      <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception e)</span><br><span class="line">  &#123;</span><br><span class="line">      xErrorOutException(e);</span><br><span class="line">      <span class="keyword">return</span> xState.xError;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">xHexToBytes</span>(<span class="params"><span class="built_in">string</span> InStr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!InStr.StartsWith(<span class="string">&quot;0x&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> System.Text.Encoding.GetEncoding(cPage).GetBytes(InStr);</span><br><span class="line">    InStr = InStr.Substring(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> NSpaceStr = InStr.Replace(<span class="string">&quot; &quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line"></span><br><span class="line">    List&lt;<span class="built_in">byte</span>&gt; ReByte = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; NSpaceStr.Length / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ReByte.Add(Convert.ToByte(NSpaceStr.Substring(i * <span class="number">2</span>, <span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ReByte.ToArray();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">StringAnaToBytes</span>(<span class="params"><span class="built_in">string</span> StrAna</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">byte</span>&gt; ReByte = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] strs = StrAna.Split(<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                ReByte.AddRange(System.Text.Encoding.GetEncoding(cPage).GetBytes(strs[i]));</span><br><span class="line">            <span class="keyword">else</span> ReByte.AddRange(xHexToBytes(strs[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> xError = <span class="built_in">string</span>.Format(<span class="string">&quot;字符串转换到BYTE失败Error:&#123;0&#125; 字串：&#123;1&#125;&quot;</span>, e.Message, StrAna);</span><br><span class="line">        xErrorOut(MethodInfo.GetCurrentMethod().Name, xError);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ReByte.ToArray();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">PackBytes</span>(<span class="params"><span class="built_in">byte</span>[] ArrByte</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> ReStr = <span class="string">&quot;&#123;0x&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">byte</span> b <span class="keyword">in</span> ArrByte)</span><br><span class="line">    &#123;</span><br><span class="line">        ReStr += b.ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ReStr += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> ReStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> cPage = Encoding.Default.CodePage;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">StringToBytes</span>(<span class="params"><span class="built_in">string</span> InValue</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str = XmlFO.StringAnalysis(InValue);</span><br><span class="line">    <span class="keyword">return</span> StringAnaToBytes(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">BytesToString</span>(<span class="params"><span class="built_in">byte</span>[] InBytes</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> System.Text.Encoding.GetEncoding(cPage).GetString(Bytes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">ToString</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        XmlFO.ListObject[sPara].xValue = BytesToString(Bytes);</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">ToInt</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        xInt TmpInt = (xInt)XmlFO.GetCheckSpecTypeObject(sPara, <span class="keyword">typeof</span>(xInt));</span><br><span class="line">        <span class="keyword">if</span> (TmpInt == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> Count = Bytes.Length;</span><br><span class="line">        <span class="built_in">int</span> NumTmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            NumTmp = (<span class="built_in">sbyte</span>)Bytes[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Count &gt; <span class="number">4</span>) Count = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                NumTmp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">                NumTmp += Bytes[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TmpInt.iValue = NumTmp;</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">ToInt_MinusSign</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        xInt TmpInt = (xInt)XmlFO.GetCheckSpecTypeObject(sPara, <span class="keyword">typeof</span>(xInt));</span><br><span class="line">        <span class="keyword">if</span> (TmpInt == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> Count = Bytes.Length;</span><br><span class="line">        <span class="built_in">int</span> NumTmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            NumTmp = (Bytes[<span class="number">0</span>] &amp; <span class="number">0x7F</span>);</span><br><span class="line">            <span class="keyword">if</span> (Count &gt; <span class="number">4</span>) Count = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                NumTmp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">                NumTmp += Bytes[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Bytes[<span class="number">0</span>] &gt; <span class="number">0x7F</span>)</span><br><span class="line">                NumTmp = -NumTmp;</span><br><span class="line">        &#125;</span><br><span class="line">        TmpInt.iValue = NumTmp;</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">ToInt_Uint</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        xInt TmpInt = (xInt)XmlFO.GetCheckSpecTypeObject(sPara, <span class="keyword">typeof</span>(xInt));</span><br><span class="line">        <span class="keyword">if</span> (TmpInt == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> Count = Bytes.Length;</span><br><span class="line">        <span class="built_in">int</span> NumTmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            NumTmp = Bytes[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Count &gt; <span class="number">4</span>) Count = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                NumTmp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">                NumTmp += Bytes[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TmpInt.iValue = NumTmp;</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">CopyFrom</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        xBytes TmpByte = (xBytes)XmlFO.GetCheckSpecTypeObject(sPara, <span class="keyword">typeof</span>(xBytes));</span><br><span class="line">        <span class="keyword">if</span> (TmpByte == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TmpByte.cPage != cPage)</span><br><span class="line">            Bytes = Encoding.Convert(Encoding.GetEncoding(TmpByte.cPage), Encoding.GetEncoding(cPage), TmpByte.Bytes);</span><br><span class="line">        <span class="keyword">else</span> Bytes = TmpByte.Bytes.ToArray();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">SubByteFrom</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] SepPara;</span><br><span class="line">        <span class="keyword">if</span> (!XmlFO.SepParams(sPara, <span class="number">3</span>, <span class="keyword">out</span> SepPara))</span><br><span class="line">            <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">        List&lt;Byte&gt; tmpByte = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">        tmpByte.AddRange(StringToBytes(SepPara[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">if</span> (tmpByte.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> start = Convert.ToInt32(SepPara[<span class="number">1</span>]);<span class="comment">//start 0</span></span><br><span class="line">            <span class="built_in">int</span> leng = Convert.ToInt32(SepPara[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (start &gt;= tmpByte.Count)</span><br><span class="line">                start = tmpByte.Count - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((start + leng) &gt; tmpByte.Count)</span><br><span class="line">                leng = tmpByte.Count - start;</span><br><span class="line">            Bytes = tmpByte.GetRange(start, leng).ToArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Bytes = tmpByte.ToArray();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">IsEqual</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] SepPara;</span><br><span class="line">        <span class="keyword">if</span> (!XmlFO.SepParams(sPara, <span class="number">2</span>, <span class="keyword">out</span> SepPara))</span><br><span class="line">            <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] tmpByte = StringToBytes(SepPara[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">int</span> start = Convert.ToInt32(SepPara[<span class="number">1</span>]);<span class="comment">//start 0</span></span><br><span class="line">        <span class="keyword">if</span> ((start + tmpByte.Length) &gt; Bytes.Length)</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tmpByte.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmpByte[i] != Bytes[start + i])</span><br><span class="line">                <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">CheckBit</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] SepPara;</span><br><span class="line">        <span class="keyword">if</span> (!XmlFO.SepParams(sPara, <span class="number">2</span>, <span class="keyword">out</span> SepPara))</span><br><span class="line">            <span class="keyword">return</span> xState.xError;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> byteNo = Convert.ToInt32(SepPara[<span class="number">0</span>]);<span class="comment">//start 0</span></span><br><span class="line">        <span class="built_in">int</span> bitNo = Convert.ToInt32(SepPara[<span class="number">1</span>]);<span class="comment">//start 7---0</span></span><br><span class="line">        <span class="keyword">if</span> (bitNo &gt; <span class="number">7</span>) bitNo = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> (bitNo &lt; <span class="number">0</span>) bitNo = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> Num = (Bytes[byteNo] &lt;&lt; (<span class="number">7</span> - bitNo)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        Num = (Num &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="keyword">if</span> (Num == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">UseDefaultCodePage</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cPage = Encoding.Default.CodePage;</span><br><span class="line">    <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">UseUTF8CodePage</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cPage = Encoding.UTF8.CodePage;</span><br><span class="line">    <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">UseUnicodeCodePage</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cPage = Encoding.Unicode.CodePage;</span><br><span class="line">    <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Convert_String_ASCII</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, Bytes.Length);</span><br><span class="line"></span><br><span class="line">        XmlFO.ListObject[Sep.sName].xValue = Encoding.ASCII.GetString(Bytes, Sep.iStart, Sep.iCount);</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Convert_String_BCD</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, Bytes.Length);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> strTmp = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = Sep.iStart; (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++)</span><br><span class="line">            strTmp += Bytes[i].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        XmlFO.ListObject[Sep.sName].xValue = strTmp;</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Convert_Double</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">int</span> NumTmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = Sep.iStart; (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            NumTmp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            NumTmp += Bytes[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">double</span> DoubTmp = (NumTmp * Sep.dRadio + Sep.dOffset);</span><br><span class="line"></span><br><span class="line">        XmlFO.ListObject[Sep.sName].xValue = DoubTmp.ToString();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Convert_Double_Bit</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">double</span> NumTmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (Sep.iCount &gt; <span class="number">4</span>)</span><br><span class="line">            NumTmp = BitConverter.ToDouble(Bytes, Sep.iStart);</span><br><span class="line">        <span class="keyword">else</span> NumTmp = BitConverter.ToSingle(Bytes, Sep.iStart);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">double</span> DoubTmp = (NumTmp * Sep.dRadio + Sep.dOffset);</span><br><span class="line"></span><br><span class="line">        XmlFO.ListObject[Sep.sName].xValue = DoubTmp.ToString();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Convert_Double_Minus</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">int</span> NumTmp = (Bytes[<span class="number">0</span>] &amp; <span class="number">0x7F</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = (Sep.iStart + <span class="number">1</span>); (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            NumTmp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            NumTmp += Bytes[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Bytes[<span class="number">0</span>] &gt; <span class="number">0x7F</span>)</span><br><span class="line">            NumTmp = -NumTmp;</span><br><span class="line">        <span class="built_in">double</span> DoubTmp = (NumTmp * Sep.dRadio + Sep.dOffset);</span><br><span class="line"></span><br><span class="line">        XmlFO.ListObject[Sep.sName].xValue = DoubTmp.ToString();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Convert_Int</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">int</span> NumTmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = Sep.iStart; (i &lt; Bytes.Length) &amp;&amp; (i &lt; (Sep.iStart + Sep.iCount)); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            NumTmp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            NumTmp += Bytes[i];</span><br><span class="line">        &#125;</span><br><span class="line">        NumTmp = (<span class="built_in">int</span>)(NumTmp * Sep.dRadio + Sep.dOffset);</span><br><span class="line"></span><br><span class="line">        XmlFO.ListObject[Sep.sName].xValue = NumTmp.ToString();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Convert_Int_Bit</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">int</span> NumTmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (Sep.iCount &gt; <span class="number">4</span>)</span><br><span class="line">            NumTmp = (<span class="built_in">int</span>)BitConverter.ToInt64(Bytes, Sep.iStart);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Sep.iCount &gt; <span class="number">2</span>)</span><br><span class="line">            NumTmp = (<span class="built_in">int</span>)BitConverter.ToInt32(Bytes, Sep.iStart);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Sep.iCount &gt; <span class="number">1</span>)</span><br><span class="line">            NumTmp = (<span class="built_in">int</span>)BitConverter.ToInt16(Bytes, Sep.iStart);</span><br><span class="line">        <span class="keyword">else</span> NumTmp = Bytes[Sep.iStart];</span><br><span class="line"></span><br><span class="line">        NumTmp = (<span class="built_in">int</span>)(NumTmp * Sep.dRadio + Sep.dOffset);</span><br><span class="line"></span><br><span class="line">        XmlFO.ListObject[Sep.sName].xValue = NumTmp.ToString();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> xState <span class="title">Append_Double</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSepParams Sep = <span class="keyword">new</span> cSepParams(sPara, <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">int</span> iTmp = (<span class="built_in">int</span>)(Convert.ToDouble(XmlFO.ListObject[Sep.sName].xValue) * Sep.dRadio + Sep.dOffset);</span><br><span class="line"></span><br><span class="line">        List&lt;Byte&gt; ListTmp = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">        ListTmp.AddRange(Bytes);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Sep.iCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ListTmp.Add((<span class="built_in">byte</span>)((iTmp &gt;&gt; ((Sep.iCount - i - <span class="number">1</span>) * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bytes = ListTmp.ToArray();</span><br><span class="line">        <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(e);</span><br><span class="line">        <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据转换</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>IEEE</tag>
      </tags>
  </entry>
  <entry>
    <title>无处安放的矫情</title>
    <url>/%E6%97%A0%E5%A4%84%E5%AE%89%E6%94%BE%E7%9A%84%E7%9F%AB%E6%83%85.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d49de71674e6a77126f1b202806cad88a35dbadac5237bfb776789ed8939097a">4616fdb0c6018f8a8a0d43fdc1c10e16f9fd19a5480dba1170cf042760bccc52</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Enter password to read！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>IBM MQ</title>
    <url>/IBM-MQ.html</url>
    <content><![CDATA[<p><center></center><br>文中代码部分参考<br><a href="https://blog.csdn.net/java_sparrow/article/details/80626705">https://blog.csdn.net/java_sparrow/article/details/80626705</a></p>
<p><strong>若只做客户端部分的设计不需要安装客户端</strong></p>
<p>网上关于IBMMQ相关资源实在太少，感谢前人的努力，站在前人的肩膀实在上太舒服了<br><span id="more"></span></p>
<h2 id="IBMMQ-软件安装设置"><a href="#IBMMQ-软件安装设置" class="headerlink" title="IBMMQ 软件安装设置"></a>IBMMQ 软件安装设置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装包(WebSphereMQ8.0)已上传网盘，下载后直接安装即可。<br>链接：<a href="https://pan.baidu.com/s/1P9Dz74tvf8_SExH0Dl0hHA">https://pan.baidu.com/s/1P9Dz74tvf8_SExH0Dl0hHA</a><br>提取码：0a87</p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>下文中未提到的部分默认参数即可</p>
<h4 id="创建队列管理器"><a href="#创建队列管理器" class="headerlink" title="创建队列管理器"></a>创建队列管理器</h4><p><img src="IBM%20MQ/QM.PNG" alt=""></p>
<h5 id="设置侦听端口"><a href="#设置侦听端口" class="headerlink" title="设置侦听端口"></a>设置侦听端口</h5><p><img src="IBM%20MQ/QM3.png" alt=""></p>
<h4 id="创建通道"><a href="#创建通道" class="headerlink" title="创建通道"></a>创建通道</h4><p><img src="IBM%20MQ/CHANNEL.PNG" alt=""></p>
<h4 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h4><p><img src="IBM%20MQ/Q.PNG" alt=""></p>
<h4 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h4><p>将当前用户添加到IBMMQ管理组<br><img src="IBM%20MQ/USER.png" alt=""></p>
<p>其中对象名为下图所示安装IBMMQ后自动创建的组mqm<br><img src="IBM%20MQ/GROUP.png" alt=""></p>
<p>至此，IBMMQ环境设置完毕</p>
<h2 id="C-连接MQ"><a href="#C-连接MQ" class="headerlink" title="C# 连接MQ"></a>C# 连接MQ</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="已安装IBMMQ软件"><a href="#已安装IBMMQ软件" class="headerlink" title="已安装IBMMQ软件"></a>已安装IBMMQ软件</h4><p>程序中引用：amqmdnet.dll库文件（IBMMQ客户端安装后生成）<br>路径分别为：<br>C:\\Program Files\\IBM\WebSphere MQ\\bin\\amqmdnet.dll<br>程序中添加using IBM.WMQ;<br>程序安装完成后可能缺少mqdc.dll文件，可下载后放在安装路径<br>C:\\Program Files\\IBM\\WebSphere MQ\\bin64 下<br>链接：<a href="https://pan.baidu.com/s/19XMuE1q46K1E3BfO8lPPIQ">https://pan.baidu.com/s/19XMuE1q46K1E3BfO8lPPIQ</a><br>提取码：5qhq</p>
<h4 id="免安装IBMMQ"><a href="#免安装IBMMQ" class="headerlink" title="免安装IBMMQ"></a>免安装IBMMQ</h4><p>准备好amqmdnet.dll在程序中直接引用即可下载地址：<br>链接：<a href="https://pan.baidu.com/s/1Qb4bdDpqXmyQO5_Jx4hmnA">https://pan.baidu.com/s/1Qb4bdDpqXmyQO5_Jx4hmnA</a><br>提取码：soua<br>若缺少其他文件请自取：IBMMQ8.0安装路径Bin文件夹<br>链接：<a href="https://pan.baidu.com/s/1vdg4J2I1-1qLcHh_hnfXBA">https://pan.baidu.com/s/1vdg4J2I1-1qLcHh_hnfXBA</a><br>提取码：kgi9</p>
<h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C#代码"></a>C#代码</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> MQQueueManager qMgr;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> CCSID = <span class="number">437</span>;</span><br><span class="line">MQEnvironment.Hostname = <span class="string">&quot;10.91.232.46&quot;</span>;</span><br><span class="line">MQEnvironment.Channel = <span class="string">&quot;CHANNEL1&quot;</span>;</span><br><span class="line">MQEnvironment.Port = <span class="number">8802</span>;</span><br><span class="line">MQEnvironment.UserId = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">MQEnvironment.Password = <span class="string">&quot;Password&quot;</span>;</span><br><span class="line"><span class="comment">// 队列管理器</span></span><br><span class="line">qMgr = <span class="keyword">new</span> MQQueueManager(<span class="string">&quot;LG_2IN1_QMGR&quot;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> MQQueueManager qMgr;</span><br><span class="line">Hashtable queueProperties = <span class="keyword">new</span> Hashtable();</span><br><span class="line">queueProperties[MQC.TRANSPORT_PROPERTY] = MQC.TRANSPORT_MQSERIES_MANAGED;</span><br><span class="line">queueProperties[MQC.HOST_NAME_PROPERTY] = <span class="string">&quot;192.168.1.9&quot;</span>;</span><br><span class="line">queueProperties[MQC.PORT_PROPERTY] = <span class="number">8802</span>;</span><br><span class="line">queueProperties[MQC.CHANNEL_PROPERTY] = <span class="string">&quot;CHANNEL1&quot;</span>;</span><br><span class="line">queueProperties[MQC.USER_ID_PROPERTY] = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">queueProperties[MQC.PASSWORD_PROPERTY] = <span class="string">&quot;Password&quot;</span>;</span><br><span class="line">queueProperties[MQC.CCSID_PROPERTY] = <span class="string">&quot;1381&quot;</span>;</span><br><span class="line">qMgr = <span class="keyword">new</span> MQQueueManager(<span class="string">&quot;LG_2IN1_QMGR&quot;</span>, queueProperties);</span><br></pre></td></tr></table></figure>
<h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMsg</span>(<span class="params">String msgStr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> openOptions = MQC.MQOO_INPUT_AS_Q_DEF | MQC.MQOO_OUTPUT | MQC.MQOO_INQUIRE;</span><br><span class="line">    MQQueue queue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 建立通道的连接</span></span><br><span class="line">        queue = qMgr.AccessQueue(queueString, openOptions, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        MQMessage msg = <span class="keyword">new</span> MQMessage();<span class="comment">// 要写入队列的消息</span></span><br><span class="line">        msg.Format = MQC.MQFMT_STRING;</span><br><span class="line">        msg.CharacterSet = CCSID;</span><br><span class="line">        msg.Encoding = CCSID;</span><br><span class="line">        <span class="comment">// msg.writeObject(msgStr);</span></span><br><span class="line">        msg.WriteString(msgStr); <span class="comment">//将消息写入消息对象中</span></span><br><span class="line">        MQPutMessageOptions pmo = <span class="keyword">new</span> MQPutMessageOptions();</span><br><span class="line">        msg.Expiry = <span class="number">-1</span>; <span class="comment">// 设置消息用不过期</span></span><br><span class="line">        queue.Put(msg, pmo);<span class="comment">// 将消息放入队列</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        XmlFO.LogOut(<span class="string">&quot;IBMMQ&quot;</span>,e.ToString());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (queue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.Close();</span><br><span class="line">                <span class="comment">// qMgr.disconnect();</span></span><br><span class="line">                XmlFO.LogOut(<span class="string">&quot;IBMMQ&quot;</span>,<span class="string">&quot;写入的消息为：&quot;</span> + msgStr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MQException e) &#123;</span><br><span class="line">                XmlFO.LogOut(<span class="string">&quot;IBMMQ&quot;</span>, e.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMsg</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> openOptions = MQC.MQOO_INPUT_AS_Q_DEF | MQC.MQOO_OUTPUT | MQC.MQOO_INQUIRE;</span><br><span class="line">    MQQueue queue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        queue = qMgr.accessQueue(queueString, openOptions, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;该队列当前的深度为:&quot;</span> + queue.getCurrentDepth());</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> depth = queue.getCurrentDepth();</span><br><span class="line">        <span class="comment">// 将队列的里的消息读出来</span></span><br><span class="line">        <span class="keyword">while</span> (depth-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            MQMessage msg = <span class="keyword">new</span> MQMessage();<span class="comment">// 要读的队列的消息</span></span><br><span class="line">            MQGetMessageOptions gmo = <span class="keyword">new</span> MQGetMessageOptions();</span><br><span class="line">            queue.<span class="keyword">get</span>(msg, gmo);</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;消息的大小为：&quot;</span> + msg.getDataLength());</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;消息的内容：&quot;</span> + msg.readStringOfByteLength(msg.getDataLength()));</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        XmlFO.LogOut(<span class="string">&quot;IBMMQ&quot;</span>, e.ToString());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (queue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.close();</span><br><span class="line">                qMgr.disconnect();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MQException e) &#123;</span><br><span class="line">                XmlFO.LogOut(<span class="string">&quot;IBMMQ&quot;</span>, e.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>IBMMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库导入导出</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA.html</url>
    <content><![CDATA[<h1 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h1><h2 id="测试软件导出、Postgresql导入"><a href="#测试软件导出、Postgresql导入" class="headerlink" title="测试软件导出、Postgresql导入"></a>测试软件导出、Postgresql导入</h2><h3 id="测试软件导出"><a href="#测试软件导出" class="headerlink" title="测试软件导出"></a>测试软件导出</h3><blockquote>
<p>连接数据库设置完筛选条件后点击导出到Excel重命名为：表名.csv</p>
</blockquote>
<h3 id="测试软件导入"><a href="#测试软件导入" class="headerlink" title="测试软件导入"></a>测试软件导入</h3><blockquote>
<p>1、打开导出表添加新的数据后，删除第一行表头以及第一列序号<br>2、删除原数据库已有行后保存<br>3、打开Postgres找到相应表右键导入<br>4、文件名选择csv文件路径、格式选csv、字符编码可选<br>5、点击导入即可</p>
<blockquote>
<p>如果主键为自增序列执行6、7<br>6、将相应表的序列创建脚本后删除<br>7、更改脚本中的START大于新增数据的主键ID后执行脚本</p>
</blockquote>
</blockquote>
<h2 id="SQL-shell-psql-导入"><a href="#SQL-shell-psql-导入" class="headerlink" title="SQL shell(psql)导入"></a>SQL shell(psql)导入</h2><blockquote>
<p>1、将excel处理好后，另存为csv（Comma Delimited）<br>2、运行SQL shell(psql) 并登录<br>3、运行’COPY mytable FROM ‘/myfile.csv’  WITH CSV  HEADER</p>
</blockquote>
<h2 id="SQL-shell-psql-导出"><a href="#SQL-shell-psql-导出" class="headerlink" title="SQL shell(psql)导出"></a>SQL shell(psql)导出</h2><blockquote>
<p>COPY (select * from mytable) to ‘/myfile.csv’ with csv header;</p>
</blockquote>
]]></content>
      <categories>
        <category>工作</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbit MQ</title>
    <url>/Rabbit-MQ.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Erlang安装"><a href="#Erlang安装" class="headerlink" title="Erlang安装"></a>Erlang安装</h3><p>Rabbit MQ安装前需先安装Erlang语言环境安装包下载地址：<br>链接：<a href="https://pan.baidu.com/s/14_Z6JUdvQfY8PGQ4NBb73A">https://pan.baidu.com/s/14_Z6JUdvQfY8PGQ4NBb73A</a><br>提取码：abtt</p>
<h3 id="Rabbit-MQ服务端安装"><a href="#Rabbit-MQ服务端安装" class="headerlink" title="Rabbit MQ服务端安装"></a>Rabbit MQ服务端安装</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>软件安装在C盘(第一次安装到D盘后进入命令行程序不能执行，有兴趣可以研究研究)安装包下载地址：<br>链接：<a href="https://pan.baidu.com/s/1NbHfVoGyo_oVAXzaTnZuAw">https://pan.baidu.com/s/1NbHfVoGyo_oVAXzaTnZuAw</a><br>提取码：9am0</p>
<h4 id="启用管理工具"><a href="#启用管理工具" class="headerlink" title="启用管理工具"></a>启用管理工具</h4><p>在服务程序中确保RabbitMQ服务已启用<br>安装完成后打开所有程序中的RabbitMQ Command Prompt (sbin dir)<br>输入命令：’rabbitmq-plugins enable rabbitmq_management’<br><img src="Rabbit%20MQ/安装成功.png" alt=""><br>打开浏览器输入<a href="http://localhost:15672">http://localhost:15672</a><br>默认账号、密码均为guest</p>
<h2 id="C-Producer"><a href="#C-Producer" class="headerlink" title="C# Producer"></a>C# Producer</h2><p>项目中需要引用RabbitMQ.Client.dll下载链接为：<br>链接：<a href="https://pan.baidu.com/s/1aJ-8RVJnJWibeqtPcTn9hw">https://pan.baidu.com/s/1aJ-8RVJnJWibeqtPcTn9hw</a><br>提取码：9d8n<br>此版本支持.Net4.0，全版本请自行下载<br>下载地址：ht</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> RabbitMQ.Client;</span><br><span class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">factory.HostName = <span class="string">&quot;localhost&quot;</span>;<span class="comment">//RabbitMQ服务在本地运行127.0.0.1</span></span><br><span class="line">factory.UserName = <span class="string">&quot;guest&quot;</span>;<span class="comment">//用户名</span></span><br><span class="line">factory.Password = <span class="string">&quot;guest&quot;</span>;<span class="comment">//密码</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())<span class="comment">//创建一个Channel</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">          channel.QueueDeclarePassive(mqqueueString);<span class="comment">//判断队列是否存在</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception e)</span><br><span class="line">      &#123;</span><br><span class="line">          Log(mqqueueString + <span class="string">&quot;队列未创建!&quot;</span>);</span><br><span class="line">          <span class="keyword">throw</span> e;</span><br><span class="line">          <span class="comment">//return false;</span></span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">/*在创建队列的时候，只有RabbitMQ上该队列不存在，才会去创建。</span></span><br><span class="line"><span class="comment">        消息是以二进制数组的形式传输的，所以如果消息是实体对象的话，需要序列化和然后转化为二进制数组。*/</span></span><br><span class="line">        IBasicProperties properties = channel.CreateBasicProperties();</span><br><span class="line">        properties.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">        properties.ContentEncoding = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        properties.Headers = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">        properties.Headers.Add(<span class="string">&quot;srcSystem&quot;</span>, <span class="string">&quot;EQP&quot;</span>);</span><br><span class="line">        properties.Headers.Add(<span class="string">&quot;desSystem&quot;</span>, <span class="string">&quot;IMES&quot;</span>);</span><br><span class="line">        properties.Headers.Add(<span class="string">&quot;msgType&quot;</span>, <span class="string">&quot;EQP_IMES_EM&quot;</span>);</span><br><span class="line">        properties.Headers.Add(<span class="string">&quot;msgID&quot;</span>, msgID);</span><br><span class="line">        channel.ConfirmSelect();</span><br><span class="line">        channel.QueueDeclare(mqqueueString, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);<span class="comment">//消息队列</span></span><br><span class="line">        <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(msgStr);</span><br><span class="line">        channel.BasicPublish(mqExchange, mqRoutingKey, properties, body); <span class="comment">//开始传递</span></span><br><span class="line">        <span class="keyword">if</span> (channel.WaitForConfirms())</span><br><span class="line">        &#123;</span><br><span class="line">            Log(<span class="string">&quot;数据发送成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Log(<span class="string">&quot;数据发送成功，但未收到确认消息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送成功后可登录网页在Queues中查看到上传的消息队列及内容</p>
<h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><h4 id="QueueDeclare"><a href="#QueueDeclare" class="headerlink" title="QueueDeclare"></a>QueueDeclare</h4><p>转自<a href="https://blog.csdn.net/vbirdbest/article/details/78670550">https://blog.csdn.net/vbirdbest/article/details/78670550</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">queueDeclare(String queue,</span><br><span class="line">			boolean durable,</span><br><span class="line">			boolean exclusive,</span><br><span class="line">			Map&lt;String, Object&gt; arguments);</span><br></pre></td></tr></table></figure><br>queue: 队列名称</p>
<p>durable： 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库</p>
<p>exclusive：是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常：com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=405, reply-text=RESOURCE_LOCKED - cannot obtain exclusive access to locked queue ‘queue_name’ in vhost ‘/‘, class-id=50, method-id=20)一般等于true的话用于一个队列只能有一个消费者来消费的场景</p>
<p>autoDelete：是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除</p>
<p>arguments：<br>队列中的消息什么时候会自动被删除</p>
<blockquote>
<p>Message TTL(x-message-ttl)：设置队列中的所有消息的生存周期(统一为整个队列的所有消息设置生命周期), 也可以在发布消息的时候单独为某个消息指定剩余生存时间,单位毫秒, 类似于redis中的ttl，生存时间到了，消息会被从队里中删除，注意是消息被删除，而不是队列被删除， 特性Features=TTL, 单独为某条消息设置过期时间AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties().builder().expiration(“6000”);<br>channel.basicPublish(EXCHANGE_NAME, “”, properties.build(), message.getBytes(“UTF-8”));</p>
<p>Auto Expire(x-expires): 当队列在指定的时间没有被访问(consume, basicGet, queueDeclare…)就会被删除,Features=Exp</p>
<p>Max Length(x-max-length): 限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉， 类似于mongodb中的固定集合，例如保存最新的100条消息, Feature=Lim</p>
<p>Max Length Bytes(x-max-length-bytes): 限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小, Features=Lim B</p>
<p>Dead letter exchange(x-dead-letter-exchange)： 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉,Features=DLX</p>
<p>Dead letter routing key(x-dead-letter-routing-key)：将删除的消息推送到指定交换机的指定路由键的队列中去, Feature=DLK</p>
<p>Maximum priority(x-max-priority)：优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费,</p>
<p>Lazy mode(x-queue-mode=lazy)： Lazy Queues: 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中</p>
<p>Master locator(x-queue-master-locator)</p>
</blockquote>
<h4 id="basicPublish"><a href="#basicPublish" class="headerlink" title="basicPublish"></a>basicPublish</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">basicPublish(String exchange,</span><br><span class="line">             String routingKey,</span><br><span class="line">            BasicProperties props,</span><br><span class="line">            <span class="built_in">byte</span>[] body)</span><br></pre></td></tr></table></figure>
<p>String exchange — 交换机名称<br>String routingKey — 路由关键字<br>BasicProperties props — 消息的基本属性，例如路由头等<br>byte[] body — 消息体<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">basicPublish(String exchange,</span><br><span class="line">             String routingKey,</span><br><span class="line">             boolean mandatory,</span><br><span class="line">             BasicProperties props,</span><br><span class="line">             <span class="built_in">byte</span>[] body)</span><br></pre></td></tr></table></figure><br>boolean mandatory — 是否为强制性<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">basicPublish(String exchange,</span><br><span class="line">             String routingKey,</span><br><span class="line">             boolean mandatory,</span><br><span class="line">             boolean immediate,</span><br><span class="line">             BasicProperties props,</span><br><span class="line">             <span class="built_in">byte</span>[] body)</span><br></pre></td></tr></table></figure><br>boolean immediate — 消息是否立即发送出去</p>
<h4 id="BasicProperties"><a href="#BasicProperties" class="headerlink" title="BasicProperties"></a>BasicProperties</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">BasicProperties</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> String contentType; <span class="comment">//上下文类型</span></span><br><span class="line">  <span class="keyword">private</span> String contentEncoding; <span class="comment">//编码集</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;String,Object&gt; headers; <span class="comment">//消息头</span></span><br><span class="line">  <span class="keyword">private</span> Integer deliveryMode; <span class="comment">//消息的投递模式</span></span><br><span class="line">  <span class="keyword">private</span> Integer priority; <span class="comment">//优先级</span></span><br><span class="line">  <span class="keyword">private</span> String correlationId; <span class="comment">//</span></span><br><span class="line">  <span class="keyword">private</span> String replyTo; <span class="comment">//</span></span><br><span class="line">  <span class="keyword">private</span> String expiration; <span class="comment">//过期时间</span></span><br><span class="line">  <span class="keyword">private</span> String messageId; <span class="comment">//消息编号</span></span><br><span class="line">  <span class="keyword">private</span> Date timestamp; <span class="comment">//发送消息时的时间戳</span></span><br><span class="line">  <span class="keyword">private</span> String type; <span class="comment">// 消息类型</span></span><br><span class="line">  <span class="keyword">private</span> String userId;</span><br><span class="line">  <span class="keyword">private</span> String appId;</span><br><span class="line">  <span class="keyword">private</span> String clusterId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Consumer"><a href="#C-Consumer" class="headerlink" title="C# Consumer"></a>C# Consumer</h2><p>编写客户端链接RabbitMQ读取信息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> RabbitMQ.Client;</span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;</span><br><span class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">factory.HostName = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">factory.UserName = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line">factory.Password = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        channel.QueueDeclare(<span class="string">&quot;hello&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line">        channel.BasicConsume(<span class="string">&quot;hello&quot;</span>, <span class="literal">false</span>, consumer);</span><br><span class="line">        consumer.Received += (model, ea) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> body = ea.Body;</span><br><span class="line">            <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;已接收： &#123;0&#125;&quot;</span>, message);   </span><br><span class="line">        &#125;;</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数说明-1"><a href="#函数说明-1" class="headerlink" title="函数说明"></a>函数说明</h3><h4 id="BasicConsume"><a href="#BasicConsume" class="headerlink" title="BasicConsume"></a>BasicConsume</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">basicConsume</span>(<span class="params">String queue,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Consumer callback</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">String <span class="title">basicConsume</span>(<span class="params">String queue,</span></span></span><br><span class="line"><span class="params"><span class="function">                    boolean autoAck,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Consumer callback</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">String <span class="title">basicConsume</span>(<span class="params">String queue,</span></span></span><br><span class="line"><span class="params"><span class="function">                    boolean autoAck,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Map&lt;String, Object&gt; arguments,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Consumer callback</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">String <span class="title">basicConsume</span>(<span class="params">String queue,</span></span></span><br><span class="line"><span class="params"><span class="function">                    boolean autoAck,</span></span></span><br><span class="line"><span class="params"><span class="function">                    String consumerTag,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Consumer callback</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">String <span class="title">basicConsume</span>(<span class="params">String queue,</span></span></span><br><span class="line"><span class="params"><span class="function">                    boolean autoAck,</span></span></span><br><span class="line"><span class="params"><span class="function">                    String consumerTag,</span></span></span><br><span class="line"><span class="params"><span class="function">                    boolean noLocal,</span></span></span><br><span class="line"><span class="params"><span class="function">                    boolean exclusive,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Map&lt;String, Object&gt; arguments,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Consumer callback</span>)</span></span><br></pre></td></tr></table></figure>
<p>queue 队列名<br>autoAck 是否自动确认消息,true自动确认,false 不自动要手动调用,建立设置为false<br>consumerTag 消费者标签，用来区分多个消费者<br>noLocal 设置为true，表示 不能将同一个Conenction中生产者发送的消息传递给这个Connection中 的消费者<br>exclusive 是否排他<br>arguments 消费者的参数<br>callback 消费者 DefaultConsumer建立使用，重写其中的方法</p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Rabbit MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型的特点</title>
    <url>/%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%89%B9%E7%82%B9.html</url>
    <content><![CDATA[<h4 id="泛型的主要特性"><a href="#泛型的主要特性" class="headerlink" title="泛型的主要特性"></a>泛型的主要特性</h4><p>泛型类型的一些重要特征使它们相比传统的非泛型类型具有如下的显著特征：</p>
<blockquote>
<p>类型安全<br>性能<br>二进制代码复用</p>
</blockquote>
<h5 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h5><p>泛型最重要的特征之一是类型安全性。对于非泛型ArrayList类，如果使用对象类型，则可以向集合中添加任何类型，这些类型有时会导致严重的问题。下面的示例显示向ArrayList类型的集合添加一个整数、字符串和对象；<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArrayList obj = <span class="keyword">new</span> ArrayList();  </span><br><span class="line">obj.Add(<span class="number">50</span>);  </span><br><span class="line">obj.Add(<span class="string">&quot;Dog&quot;</span>);  </span><br><span class="line">obj.Add(<span class="keyword">new</span> TestClass());  </span><br></pre></td></tr></table></figure><br>现在，如果使用整数对象来使用foreach语句进行遍历的话，当编译器接受到代码，但是因为集合中的所有元素都不是整数，所以会导致运行时异常；<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> obj)  </span><br><span class="line">&#123;  </span><br><span class="line">    Console.WriteLine(i);    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>编程的经验法则是应该尽早检测到错误。对于泛型类Test，泛型类型T定义允许哪些类型。通过使用Test的定义，只能向集合添加整型类型的数据。这时候当Add()方法具有以下无效参数的时候编译器将不编译代码；<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Test&lt;<span class="built_in">int</span>&gt; obj = <span class="keyword">new</span> Test&lt;<span class="built_in">int</span>&gt;();  </span><br><span class="line">obj.Add(<span class="number">50</span>);  </span><br><span class="line">obj.Add(<span class="string">&quot;Dog&quot;</span>);            <span class="comment">//编译错误</span></span><br><span class="line">obj.Add(<span class="keyword">new</span> TestClass());  <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure></p>
<h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><p>在下面的示例中，ArrayList类存储对象，并且定义了Add()方法来存储一些整型参数。因此，整数类型被装箱。当使用foreach语句读取ArrayList中的值时，将发生拆箱。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArrayList  obj = <span class="keyword">new</span> ArrayList();   </span><br><span class="line">obj.Add(<span class="number">50</span>);    <span class="comment">//装箱- 值类型转换成引用类型</span></span><br><span class="line"><span class="built_in">int</span> x= (<span class="built_in">int</span>)obj[<span class="number">0</span>]; <span class="comment">//拆箱</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> obj)  </span><br><span class="line">&#123;  </span><br><span class="line">   Console.WriteLine(i);   <span class="comment">// 拆箱</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意：泛型比其他集合（如ArrayList）更快。</p>
<p>代替使用对象类型，TestClass类的泛型类型被定义为int，因此在从编译器动态生成的类中将使用int类型。所以将不会发生装箱和拆箱，如下所示；<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">TestClass&lt;<span class="built_in">int</span>&gt; obj = <span class="keyword">new</span> TestClass&lt;<span class="built_in">int</span>&gt;();  </span><br><span class="line">obj.Add(<span class="number">50</span>);    <span class="comment">//没有装箱</span></span><br><span class="line"><span class="built_in">int</span> x= obj[<span class="number">0</span>]; <span class="comment">// 没有拆箱</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> obj)  </span><br><span class="line">&#123;  </span><br><span class="line">   Console.WriteLine(i);   <span class="comment">//没有拆箱</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p>
<h5 id="二进制代码复用"><a href="#二进制代码复用" class="headerlink" title="二进制代码复用"></a>二进制代码复用</h5><p>泛型类型提供了一种源代码保护机制。泛型类可以定义一次，并且可以使用许多不同类型来进行实例化。泛型可以在一种CLR支持的语言中定义，并可以被另一种.NET语言使用。以下TestClass 使用int和string类型进行实例化：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">TestClass&lt;<span class="built_in">int</span>&gt; obj = <span class="keyword">new</span> TestClass&lt;<span class="built_in">int</span>&gt;();  </span><br><span class="line">obj.Add(<span class="number">50</span>);  </span><br><span class="line"></span><br><span class="line">TestClass&lt;<span class="built_in">string</span>&gt; obj1 = <span class="keyword">new</span> TestClass&lt;<span class="built_in">string</span>&gt;();  </span><br><span class="line">Obj1.Add(<span class="string">&quot;hello&quot;</span>);  </span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>国六排放指令说明</title>
    <url>/%E5%9B%BD%E5%85%AD%E6%8E%92%E6%94%BE%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<p><center></center><br>&emsp; 国六排放测试过程中常用通讯指令说明</p>
<p>详细资料请参考ISO15031-5或J1979-DA<br><span id="more"></span></p>
<h2 id="ISO15031-5"><a href="#ISO15031-5" class="headerlink" title="ISO15031-5"></a>ISO15031-5</h2><h3 id="15765-4"><a href="#15765-4" class="headerlink" title="15765-4"></a>15765-4</h3><h4 id="Service-01"><a href="#Service-01" class="headerlink" title="Service 01"></a>Service 01</h4><p>请求当前动力系统诊断数据<br>01后最多可以读取6个PID(Parameter Identification)<br>请求：01 PID PID PID PID PID PID<br>回复：41 PID Data PID Data PID Data PID Data PID Data PID Data</p>
<h5 id="PID"><a href="#PID" class="headerlink" title="PID"></a>PID</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">PID</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">数据长度（byte）</th>
<th style="text-align:center">计算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00</td>
<td style="text-align:center">查看支持的PID</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">01</td>
<td style="text-align:center">清除故障诊断码后的监视器状态</td>
<td style="text-align:center">4</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">04</td>
<td style="text-align:center">负载值</td>
<td style="text-align:center">1</td>
<td style="text-align:center">y=x/255</td>
</tr>
<tr>
<td style="text-align:center"><font color="#FF0000"> 05  </font></td>
<td style="text-align:center"><font color="#FF0000"> 冷却液温度  </font></td>
<td style="text-align:center">1</td>
<td style="text-align:center">y=x-40</td>
</tr>
<tr>
<td style="text-align:center">0B</td>
<td style="text-align:center">进气歧管绝对压力</td>
<td style="text-align:center">1</td>
<td style="text-align:center">y=x</td>
</tr>
<tr>
<td style="text-align:center"><font color="#FF0000"> 0C  </font></td>
<td style="text-align:center"><font color="#FF0000"> 发动机转速  </font></td>
<td style="text-align:center">2</td>
<td style="text-align:center">y=x/4</td>
</tr>
<tr>
<td style="text-align:center"><font color="#FF0000"> 0D  </font></td>
<td style="text-align:center"><font color="#FF0000"> 车速  </font></td>
<td style="text-align:center">1</td>
<td style="text-align:center">y=x</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">空气流量</td>
<td style="text-align:center">2</td>
<td style="text-align:center">y=x/100</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">节气门位置</td>
<td style="text-align:center">1</td>
<td style="text-align:center">y=x/255</td>
</tr>
<tr>
<td style="text-align:center">44</td>
<td style="text-align:center">Commanded Equivalence Ratio</td>
<td style="text-align:center">2</td>
<td style="text-align:center">y=2x/65535</td>
</tr>
<tr>
<td style="text-align:center"><font color="#FF0000"> 5C  </font></td>
<td style="text-align:center"><font color="#FF0000"> 油温  </font></td>
<td style="text-align:center">1</td>
<td style="text-align:center">y=x-40</td>
</tr>
<tr>
<td style="text-align:center">6A</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">6E</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">78</td>
<td style="text-align:center">尾气温度</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">7A</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">83</td>
<td style="text-align:center">NOx传感器</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">85</td>
<td style="text-align:center">NOx控制系统</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h6 id="PID-00"><a href="#PID-00" class="headerlink" title="PID 00"></a>PID 00</h6><p>请求：01 00<br>回复：</p>
<blockquote>
<p>41 00 A B C D //PID 01~20<br>41 20 A B C D //PID 21~40<br>41 40 A B C D //PID 41~60<br>41 60 A B C D //PID 61~80<br>41 80 A B C D //PID 81~A0<br>41 A0 A B C D //PID A1~C0<br>41 C0 A B C D //PID C1~E0<br>41 E0 A B C D //PID E1~FF</p>
</blockquote>
<p><code>41 00 A B C D</code><br>Data A bit7 ~ Data D bit0 表示是否支持PID 01~20</p>
<p>如：<code>41 00 90 39 00 00</code><br>Data A = 90 = 1001 0000<br>bit7 = 1; bit4 = 1<br>表示支持 PID 01、PID 04<br>Data B = 39 = 0011 1001<br>bit5 = bit4 = bit3 = bit0 = 1<br>表示支持 PID 0B、PID 0C、PID 0D、PID 10</p>
<h4 id="Service-09"><a href="#Service-09" class="headerlink" title="Service 09"></a>Service 09</h4><h5 id="PID-1"><a href="#PID-1" class="headerlink" title="PID"></a>PID</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">PID</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">数据长度（byte）</th>
<th style="text-align:center">计算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">02</td>
<td style="text-align:center">VIN</td>
<td style="text-align:center">17</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">04</td>
<td style="text-align:center">Cal.ID</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">06</td>
<td style="text-align:center">Cal.CVN</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">08</td>
<td style="text-align:center">IPT</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h2 id="ISO27145"><a href="#ISO27145" class="headerlink" title="ISO27145"></a>ISO27145</h2><h4 id="Service-22"><a href="#Service-22" class="headerlink" title="Service 22"></a>Service 22</h4><p>22 F4 对应 ISO15031的01服务<br>22 F8 对应 ISO15031的09服务</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>IDMDownload</title>
    <url>/IDMDownload.html</url>
    <content><![CDATA[<p><center></center><br>Google Chrome 利用IDM下载器下载资源，可下载百度网盘资源<br><span id="more"></span></p>
<h3 id="安装Google-Chrome"><a href="#安装Google-Chrome" class="headerlink" title="安装Google Chrome"></a>安装Google Chrome</h3><h3 id="安装浏览器插件Tampermonkey"><a href="#安装浏览器插件Tampermonkey" class="headerlink" title="安装浏览器插件Tampermonkey"></a>安装浏览器插件Tampermonkey</h3><h3 id="安装百度网盘直接下载助手脚本"><a href="#安装百度网盘直接下载助手脚本" class="headerlink" title="安装百度网盘直接下载助手脚本"></a>安装百度网盘直接下载助手脚本</h3><h3 id="安装IDM-integration-Module"><a href="#安装IDM-integration-Module" class="headerlink" title="安装IDM integration Module"></a>安装IDM integration Module</h3>]]></content>
  </entry>
  <entry>
    <title>IBMMQ错误代码</title>
    <url>/IBMMQ%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81.html</url>
    <content><![CDATA[<p><center></center><br>IBM官方说明：<a href="https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.0.0/com.ibm.mq.tro.doc/q040710_.htm">https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.0.0/com.ibm.mq.tro.doc/q040710_.htm</a><br><span id="more"></span></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">ErrorCode</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
<p>0 (0000) (RC0)| MQRC_NONE<br>900 (0384) (RC900)| MQRC_APPL_FIRST<br>999 (03E7) (RC999)| MQRC_APPL_LAST<br>2001 (07D1) (RC2001)| MQRC_ALIAS_BASE_Q_TYPE_ERROR<br>2002 (07D2) (RC2002)| MQRC_ALREADY_CONNECTED<br>2003 (07D3) (RC2003)| MQRC_BACKED_OUT<br>2004 (07D4) (RC2004)| MQRC_BUFFER_ERROR<br>2005 (07D5) (RC2005)| MQRC_BUFFER_LENGTH_ERROR<br>2006 (07D6) (RC2006)| MQRC_CHAR_ATTR_LENGTH_ERROR<br>2007 (07D7) (RC2007)| MQRC_CHAR_ATTRS_ERROR<br>2008 (07D8) (RC2008)| MQRC_CHAR_ATTRS_TOO_SHORT<br>2009 (07D9) (RC2009)| MQRC_CONNECTION_BROKEN<br>2010 (07DA) (RC2010)| MQRC_DATA_LENGTH_ERROR<br>2011 (07DB) (RC2011)| MQRC_DYNAMIC_Q_NAME_ERROR<br>2012 (07DC) (RC2012)| MQRC_ENVIRONMENT_ERROR<br>2013 (07DD) (RC2013)| MQRC_EXPIRY_ERROR<br>2014 (07DE) (RC2014)| MQRC_FEEDBACK_ERROR<br>2016 (07E0) (RC2016)| MQRC_GET_INHIBITED<br>2017 (07E1) (RC2017)| MQRC_HANDLE_NOT_AVAILABLE<br>2018 (07E2) (RC2018)| MQRC_HCONN_ERROR<br>2019 (07E3) (RC2019)| MQRC_HOBJ_ERROR<br>2020 (07E4) (RC2020)| MQRC_INHIBIT_VALUE_ERROR<br>2021 (07E5) (RC2021)| MQRC_INT_ATTR_COUNT_ERROR<br>2022 (07E6) (RC2022)| MQRC_INT_ATTR_COUNT_TOO_SMALL<br>2023 (07E7) (RC2023)| MQRC_INT_ATTRS_ARRAY_ERROR<br>2024 (07E8) (RC2024)| MQRC_SYNCPOINT_LIMIT_REACHED<br>2025 (07E9) (RC2025)| MQRC_MAX_CONNS_LIMIT_REACHED<br>2026 (07EA) (RC2026)| MQRC_MD_ERROR<br>2027 (07EB) (RC2027)| MQRC_MISSING_REPLY_TO_Q<br>2029 (07ED) (RC2029)| MQRC_MSG_TYPE_ERROR<br>2030 (07EE) (RC2030)| MQRC_MSG_TOO_BIG_FOR_Q<br>2031 (07EF) (RC2031)| MQRC_MSG_TOO_BIG_FOR_Q_MGR<br>2033 (07F1) (RC2033)| MQRC_NO_MSG_AVAILABLE<br>2034 (07F2) (RC2034)| MQRC_NO_MSG_UNDER_CURSOR<br>2035 (07F3) (RC2035)| MQRC_NOT_AUTHORIZED<br>2036 (07F4) (RC2036)| MQRC_NOT_OPEN_FOR_BROWSE<br>2037 (07F5) (RC2037)| MQRC_NOT_OPEN_FOR_INPUT<br>2038 (07F6) (RC2038)| MQRC_NOT_OPEN_FOR_INQUIRE<br>2039 (07F7) (RC2039)| MQRC_NOT_OPEN_FOR_OUTPUT<br>2040 (07F8) (RC2040)| MQRC_NOT_OPEN_FOR_SET<br>2041 (07F9) (RC2041)| MQRC_OBJECT_CHANGED<br>2042 (07FA) (RC2042)| MQRC_OBJECT_IN_USE<br>2043 (07FB) (RC2043)| MQRC_OBJECT_TYPE_ERROR<br>2044 (07FC) (RC2044)| MQRC_OD_ERROR<br>2045 (07FD) (RC2045)| MQRC_OPTION_NOT_VALID_FOR_TYPE<br>2046 (07FE) (RC2046)| MQRC_OPTIONS_ERROR<br>2047 (07FF) (RC2047)| MQRC_PERSISTENCE_ERROR<br>2048 (0800) (RC2048)| MQRC_PERSISTENT_NOT_ALLOWED<br>2049 (0801) (RC2049)| MQRC_PRIORITY_EXCEEDS_MAXIMUM<br>2050 (0802) (RC2050)| MQRC_PRIORITY_ERROR<br>2051 (0803) (RC2051)| MQRC_PUT_INHIBITED<br>2052 (0804) (RC2052)| MQRC_Q_DELETED<br>2053 (0805) (RC2053)| MQRC_Q_FULL<br>2055 (0807) (RC2055)| MQRC_Q_NOT_EMPTY<br>2056 (0808) (RC2056)| MQRC_Q_SPACE_NOT_AVAILABLE<br>2057 (0809) (RC2057)| MQRC_Q_TYPE_ERROR<br>2058 (080A) (RC2058)| MQRC_Q_MGR_NAME_ERROR<br>2059 (080B) (RC2059)| MQRC_Q_MGR_NOT_AVAILABLE<br>2061 (080D) (RC2061)| MQRC_REPORT_OPTIONS_ERROR<br>[z/OS]2062 (080E) (RC2062)| MQRC_SECOND_MARK_NOT_ALLOWED<br>2063 (080F) (RC2063)| MQRC_SECURITY_ERROR<br>2065 (0811) (RC2065)| MQRC_SELECTOR_COUNT_ERROR<br>2066 (0812) (RC2066)| MQRC_SELECTOR_LIMIT_EXCEEDED<br>2067 (0813) (RC2067)| MQRC_SELECTOR_ERROR<br>2068 (0814) (RC2068)| MQRC_SELECTOR_NOT_FOR_TYPE<br>[z/OS][Windows]2069 (0815) (RC2069)| MQRC_SIGNAL_OUTSTANDING<br>[z/OS][Windows]2070 (0816) (RC2070)| MQRC_SIGNAL_REQUEST_ACCEPTED<br>2071 (0817) (RC2071)| MQRC_STORAGE_NOT_AVAILABLE<br>2072 (0818) (RC2072)| MQRC_SYNCPOINT_NOT_AVAILABLE<br>2075 (081B) (RC2075)| MQRC_TRIGGER_CONTROL_ERROR<br>2076 (081C) (RC2076)| MQRC_TRIGGER_DEPTH_ERROR<br>2077 (081D) (RC2077)| MQRC_TRIGGER_MSG_PRIORITY_ERR<br>2078 (081E) (RC2078)| MQRC_TRIGGER_TYPE_ERROR<br>2079 (081F) (RC2079)| MQRC_TRUNCATED_MSG_ACCEPTED<br>2080 (0820) (RC2080)| MQRC_TRUNCATED_MSG_FAILED<br>2082 (0822) (RC2082)| MQRC_UNKNOWN_ALIAS_BASE_Q<br>2085 (0825) (RC2085)| MQRC_UNKNOWN_OBJECT_NAME<br>2086 (0826) (RC2086)| MQRC_UNKNOWN_OBJECT_Q_MGR<br>2087 (0827) (RC2087)| MQRC_UNKNOWN_REMOTE_Q_MGR<br>2090 (082A) (RC2090)| MQRC_WAIT_INTERVAL_ERROR<br>2091 (082B) (RC2091)| MQRC_XMIT_Q_TYPE_ERROR<br>2092 (082C) (RC2092)| MQRC_XMIT_Q_USAGE_ERROR<br>2093 (082D) (RC2093)| MQRC_NOT_OPEN_FOR_PASS_ALL<br>2094 (082E) (RC2094)| MQRC_NOT_OPEN_FOR_PASS_IDENT<br>2095 (082F) (RC2095)| MQRC_NOT_OPEN_FOR_SET_ALL<br>2096 (0830) (RC2096)| MQRC_NOT_OPEN_FOR_SET_IDENT<br>2097 (0831) (RC2097)| MQRC_CONTEXT_HANDLE_ERROR<br>2098 (0832) (RC2098)| MQRC_CONTEXT_NOT_AVAILABLE<br>[z/OS][Windows]2099 (0833) (RC2099)| MQRC_SIGNAL1_ERROR<br>2100 (0834) (RC2100)| MQRC_OBJECT_ALREADY_EXISTS<br>2101 (0835) (RC2101)| MQRC_OBJECT_DAMAGED<br>2102 (0836) (RC2102)| MQRC_RESOURCE_PROBLEM<br>[UNIX, Linux, Windows, IBM i]2103 (0837) (RC2103)| MQRC_ANOTHER_Q_MGR_CONNECTED<br>2104 (0838) (RC2104)| MQRC_UNKNOWN_REPORT_OPTION<br>[z/OS]2105 (0839) (RC2105)| MQRC_STORAGE_CLASS_ERROR<br>[z/OS]2106 (083A) (RC2106)| MQRC_COD_NOT_VALID_FOR_XCF_Q<br>2107 (083B) (RC2107)| MQRC_XWAIT_CANCELED<br>[z/OS]2108 (083C) (RC2108)| MQRC_XWAIT_ERROR<br>2109 (083D) (RC2109)| MQRC_SUPPRESSED_BY_EXIT<br>2110 (083E) (RC2110)| MQRC_FORMAT_ERROR<br>2111 (083F) (RC2111)| MQRC_SOURCE_CCSID_ERROR<br>2112 (0840) (RC2112)| MQRC_SOURCE_INTEGER_ENC_ERROR<br>2113 (0841) (RC2113)| MQRC_SOURCE_DECIMAL_ENC_ERROR<br>2114 (0842) (RC2114)| MQRC_SOURCE_FLOAT_ENC_ERROR<br>2115 (0843) (RC2115)| MQRC_TARGET_CCSID_ERROR<br>2116 (0844) (RC2116)| MQRC_TARGET_INTEGER_ENC_ERROR<br>2117 (0845) (RC2117)| MQRC_TARGET_DECIMAL_ENC_ERROR<br>2118 (0846) (RC2118)| MQRC_TARGET_FLOAT_ENC_ERROR<br>2119 (0847) (RC2119)| MQRC_NOT_CONVERTED<br>2120 (0848) (RC2120)| MQRC_CONVERTED_MSG_TOO_BIG<br>[IBM i][UNIX][Windows]2121 (0849) (RC2121)| MQRC_NO_EXTERNAL_PARTICIPANTS<br>[IBM i][UNIX][Windows]2122 (084A) (RC2122)| MQRC_PARTICIPANT_NOT_AVAILABLE<br>[UNIX][Windows]2123 (084B) (RC2123)| MQRC_OUTCOME_MIXED<br>[UNIX][Windows][z/OS]2124 (084C) (RC2124)| MQRC_OUTCOME_PENDING<br>2125 (084D) (RC2125)| MQRC_BRIDGE_STARTED<br>2126 (084E) (RC2126)| MQRC_BRIDGE_STOPPED<br>[z/OS]2127 (084F) (RC2127)| MQRC_ADAPTER_STORAGE_SHORTAGE<br>[IBM i][UNIX][Windows]2128 (0850) (RC2128)| MQRC_UOW_IN_PROGRESS<br>[z/OS]2129 (0851) (RC2129)| MQRC_ADAPTER_CONN_LOAD_ERROR<br>[z/OS]2130 (0852) (RC2130)| MQRC_ADAPTER_SERV_LOAD_ERROR<br>[z/OS]2131 (0853) (RC2131)| MQRC_ADAPTER_DEFS_ERROR<br>[z/OS]2132 (0854) (RC2132)| MQRC_ADAPTER_DEFS_LOAD_ERROR<br>[z/OS]2133 (0855) (RC2133)| MQRC_ADAPTER_CONV_LOAD_ERROR<br>[IBM i][UNIX][Windows]2134 (0856) (RC2134)| MQRC_BO_ERROR<br>[IBM i][UNIX][Windows]2135 (0857) (RC2135)| MQRC_DH_ERROR<br>[IBM i][UNIX][Windows]2136 (0858) (RC2136)| MQRC_MULTIPLE_REASONS<br>[IBM i][UNIX][Windows]2137 (0859) (RC2137)| MQRC_OPEN_FAILED<br>[z/OS]2138 (085A) (RC2138)| MQRC_ADAPTER_DISC_LOAD_ERROR<br>[IBM i][UNIX][Windows]2139 (085B) (RC2139)| MQRC_CNO_ERROR<br>[z/OS]2140 (085C) (RC2140)| MQRC_CICS_WAIT_FAILED<br>2141 (085D) (RC2141)| MQRC_DLH_ERROR<br>2142 (085E) (RC2142)| MQRC_HEADER_ERROR<br>2143 (085F) (RC2143)| MQRC_SOURCE_LENGTH_ERROR<br>2144 (0860) (RC2144)| MQRC_TARGET_LENGTH_ERROR<br>2145 (0861) (RC2145)| MQRC_SOURCE_BUFFER_ERROR<br>2146 (0862) (RC2146)| MQRC_TARGET_BUFFER_ERROR<br>[Windows][V9.0.0.6 Mar 2019]2147 (0863) (RC2147)| MQRC_INCOMPLETE_TRANSACTION<br>2148 (0864) (RC2148)| MQRC_IIH_ERROR<br>2149 (0865) (RC2149)| MQRC_PCF_ERROR<br>2150 (0866) (RC2150)| MQRC_DBCS_ERROR<br>[IBM i][UNIX][Windows]2152 (0868) (RC2152)| MQRC_OBJECT_NAME_ERROR<br>[IBM i][UNIX][Windows]2153 (0869) (RC2153)| MQRC_OBJECT_Q_MGR_NAME_ERROR<br>[IBM i][UNIX][Windows]2154 (086A) (RC2154)| MQRC_RECS_PRESENT_ERROR<br>[IBM i][UNIX][Windows]2155 (086B) (RC2155)| MQRC_OBJECT_RECORDS_ERROR<br>[IBM i][UNIX][Windows]2156 (086C) (RC2156)| MQRC_RESPONSE_RECORDS_ERROR<br>[z/OS]2157 (086D) (RC2157)| MQRC_ASID_MISMATCH<br>[IBM i][UNIX][Windows]2158 (086E) (RC2158)| MQRC_PMO_RECORD_FLAGS_ERROR<br>[IBM i][UNIX][Windows]2159 (086F) (RC2159)| MQRC_PUT_MSG_RECORDS_ERROR<br>[z/OS]2160 (0870) (RC2160)| MQRC_CONN_ID_IN_USE<br>2161 (0871) (RC2161)| MQRC_Q_MGR_QUIESCING<br>2162 (0872) (RC2162)| MQRC_Q_MGR_STOPPING<br>[z/OS]2163 (0873) (RC2163)| MQRC_DUPLICATE_RECOV_COORD<br>2173 (087D) (RC2173)| MQRC_PMO_ERROR<br>2182 (0886) (RC2182)| MQRC_API_EXIT_NOT_FOUND<br>2183 (0887) (RC2183)| MQRC_API_EXIT_LOAD_ERROR<br>2184 (0888) (RC2184)| MQRC_REMOTE_Q_NAME_ERROR<br>2185 (0889) (RC2185)| MQRC_INCONSISTENT_PERSISTENCE<br>2186 (088A) (RC2186)| MQRC_GMO_ERROR<br>[z/OS]2187 (088B) (RC2187)| MQRC_CICS_BRIDGE_RESTRICTION<br>2188 (088C) (RC2188)| MQRC_STOPPED_BY_CLUSTER_EXIT<br>2189 (088D) (RC2189)| MQRC_CLUSTER_RESOLUTION_ERROR<br>2190 (088E) (RC2190)| MQRC_CONVERTED_STRING_TOO_BIG<br>[IBM i][UNIX][Windows]2191 (088F) (RC2191)| MQRC_TMC_ERROR<br>2192 (0890) (RC2192)| MQRC_PAGESET_FULL<br>[z/OS]2192 (0890) (RC2192)| MQRC_STORAGE_MEDIUM_FULL<br>[z/OS]2193 (0891) (RC2193)| MQRC_PAGESET_ERROR<br>2194 (0892) (RC2194)| MQRC_NAME_NOT_VALID_FOR_TYPE<br>2195 (0893) (RC2195)| MQRC_UNEXPECTED_ERROR<br>2196 (0894) (RC2196)| MQRC_UNKNOWN_XMIT_Q<br>2197 (0895) (RC2197)| MQRC_UNKNOWN_DEF_XMIT_Q<br>2198 (0896) (RC2198)| MQRC_DEF_XMIT_Q_TYPE_ERROR<br>2199 (0897) (RC2199)| MQRC_DEF_XMIT_Q_USAGE_ERROR<br>[z/OS]2201 (0899) (RC2201)| MQRC_NAME_IN_USE<br>2202 (089A) (RC2202)| MQRC_CONNECTION_QUIESCING<br>2203 (089B) (RC2203)| MQRC_CONNECTION_STOPPING<br>[z/OS]2204 (089C) (RC2204)| MQRC_ADAPTER_NOT_AVAILABLE<br>2206 (089E) (RC2206)| MQRC_MSG_ID_ERROR<br>2207 (089F) (RC2207)| MQRC_CORREL_ID_ERROR<br>2208 (08A0) (RC2208)| MQRC_FILE_SYSTEM_ERROR<br>2209 (08A1) (RC2209)| MQRC_NO_MSG_LOCKED<br>2210 (08A2) (RC2210)| MQRC_SOAP_DOTNET_ERROR<br>2211 (08A3) (RC2211)| MQRC_SOAP_AXIS_ERROR<br>2212 (08A4) (RC2212)| MQRC_SOAP_URL_ERROR<br>[z/OS]2217 (08A9) (RC2217)| MQRC_CONNECTION_NOT_AUTHORIZED<br>2218 (08AA) (RC2218)| MQRC_MSG_TOO_BIG_FOR_CHANNEL<br>2219 (08AB) (RC2219)| MQRC_CALL_IN_PROGRESS<br>2220 (08AC) (RC2220)| MQRC_RMH_ERROR<br>2222 (08AE) (RC2222)| MQRC_Q_MGR_ACTIVE<br>2223 (08AF) (RC2223)| MQRC_Q_MGR_NOT_ACTIVE<br>2224 (08B0) (RC2224)| MQRC_Q_DEPTH_HIGH<br>2225 (08B1) (RC2225)| MQRC_Q_DEPTH_LOW<br>2226 (08B2) (RC2226)| MQRC_Q_SERVICE_INTERVAL_HIGH<br>2227 (08B3) (RC2227)| MQRC_Q_SERVICE_INTERVAL_OK<br>2228 (08B4) (RC2228)| MQRC_RFH_HEADER_FIELD_ERROR<br>2229 (08B5) (RC2229)| MQRC_RAS_PROPERTY_ERROR<br>2232 (08B8) (RC2232)| MQRC_UNIT_OF_WORK_NOT_STARTED<br>[IBM i][UNIX][Windows]2233 (08B9) (RC2233)| MQRC_CHANNEL_AUTO_DEF_OK<br>[IBM i][UNIX][Windows]2234 (08BA) (RC2234)| MQRC_CHANNEL_AUTO_DEF_ERROR<br>[IBM i][UNIX][Windows]2235 (08BB) (RC2235)| MQRC_CFH_ERROR<br>[IBM i][UNIX][Windows]2236 (08BC) (RC2236)| MQRC_CFIL_ERROR<br>[IBM i][UNIX][Windows]2237 (08BD) (RC2237)| MQRC_CFIN_ERROR<br>[IBM i][UNIX][Windows]2238 (08BE) (RC2238)| MQRC_CFSL_ERROR<br>[IBM i][UNIX][Windows]2239 (08BF) (RC2239)| MQRC_CFST_ERROR<br>2241 (08C1) (RC2241)| MQRC_INCOMPLETE_GROUP<br>2242 (08C2) (RC2242)| MQRC_INCOMPLETE_MSG<br>[IBM i][UNIX][Windows]2243 (08C3) (RC2243)| MQRC_INCONSISTENT_CCSIDS<br>[IBM i][UNIX][Windows]2244 (08C4) (RC2244)| MQRC_INCONSISTENT_ENCODINGS<br>2245 (08C5) (RC2245)| MQRC_INCONSISTENT_UOW<br>[IBM i][UNIX][Windows]2246 (08C6) (RC2246)| MQRC_INVALID_MSG_UNDER_CURSOR<br>2247 (08C7) (RC2247)| MQRC_MATCH_OPTIONS_ERROR<br>2248 (08C8) (RC2248)| MQRC_MDE_ERROR<br>2249 (08C9) (RC2249)| MQRC_MSG_FLAGS_ERROR<br>2250 (08CA) (RC2250)| MQRC_MSG_SEQ_NUMBER_ERROR<br>2251 (08CB) (RC2251)| MQRC_OFFSET_ERROR<br>2252 (08CC) (RC2252)| MQRC_ORIGINAL_LENGTH_ERROR<br>[IBM i][UNIX][Windows]2253 (08CD) (RC2253)| MQRC_SEGMENT_LENGTH_ZERO<br>[IBM i][UNIX][Windows]2255 (08CF) (RC2255)| MQRC_UOW_NOT_AVAILABLE<br>2256 (08D0) (RC2256)| MQRC_WRONG_GMO_VERSION<br>2257 (08D1) (RC2257)| MQRC_WRONG_MD_VERSION<br>[IBM i][UNIX][Windows]2258 (08D2) (RC2258)| MQRC_GROUP_ID_ERROR<br>[IBM i][UNIX][Windows]2259 (08D3) (RC2259)| MQRC_INCONSISTENT_BROWSE<br>2260 (08D4) (RC2260)| MQRC_XQH_ERROR<br>[IBM i][UNIX][Windows]2261 (08D5) (RC2261)| MQRC_SRC_ENV_ERROR<br>[IBM i][UNIX][Windows]2262 (08D6) (RC2262)| MQRC_SRC_NAME_ERROR<br>[IBM i][UNIX][Linux]2263 (08D7) (RC2263)| MQRC_DEST_ENV_ERROR<br>[IBM i][UNIX][Windows]2264 (08D8) (RC2264)| MQRC_DEST_NAME_ERROR<br>2265 (08D9) (RC2265)| MQRC_TM_ERROR<br>2266 (08DA) (RC2266)| MQRC_CLUSTER_EXIT_ERROR<br>2267 (08DB) (RC2267)| MQRC_CLUSTER_EXIT_LOAD_ERROR<br>2268 (08DC) (RC2268)| MQRC_CLUSTER_PUT_INHIBITED<br>2269 (08DD) (RC2269)| MQRC_CLUSTER_RESOURCE_ERROR<br>2270 (08DE) (RC2270)| MQRC_NO_DESTINATIONS_AVAILABLE<br>[z/OS]2271 (08DF) (RC2271)| MQRC_CONN_TAG_IN_USE<br>2272 (08E0) (RC2272)| MQRC_PARTIALLY_CONVERTED<br>2273 (08E1) (RC2273)| MQRC_CONNECTION_ERROR<br>2274 (08E2) (RC2274)| MQRC_OPTION_ENVIRONMENT_ERROR<br>[IBM i][UNIX][Windows]2277 (08E5) (RC2277)| MQRC_CD_ERROR<br>[IBM i][UNIX][Windows]2278 (08E6) (RC2278)| MQRC_CLIENT_CONN_ERROR<br>2279 (08E7) (RC2279)| MQRC_CHANNEL_STOPPED_BY_USER<br>[UNIX, Linux, Windows, IBM i]2280 (08E8) (RC2280)| MQRC_HCONFIG_ERROR<br>[UNIX, Linux, Windows, IBM i]2281 (08E9) (RC2281)| MQRC_FUNCTION_ERROR<br>2282 (08EA) (RC2282)| MQRC_CHANNEL_STARTED<br>2283 (08EB) (RC2283)| MQRC_CHANNEL_STOPPED<br>2284 (08EC) (RC2284)| MQRC_CHANNEL_CONV_ERROR<br>[UNIX, Linux, Windows, IBM i]2285 (08ED) (RC2285)| MQRC_SERVICE_NOT_AVAILABLE<br>[UNIX, Linux, Windows, IBM i]2286 (08EE) (RC2286)| MQRC_INITIALIZATION_FAILED<br>[UNIX, Linux, Windows, IBM i]2287 (08EF) (RC2287)| MQRC_TERMINATION_FAILED<br>[UNIX, Linux, Windows, IBM i]2288 (08F0) (RC2288)| MQRC_UNKNOWN_Q_NAME<br>[UNIX, Linux, Windows, IBM i]2289 (08F1) (RC2289)| MQRC_SERVICE_ERROR<br>[UNIX, Linux, Windows, IBM i]2290 (08F2) (RC2290)| MQRC_Q_ALREADY_EXISTS<br>[UNIX, Linux, Windows, IBM i]2291 (08F3) (RC2291)| MQRC_USER_ID_NOT_AVAILABLE<br>[UNIX, Linux, Windows, IBM i]2292 (08F4) (RC2292)| MQRC_UNKNOWN_ENTITY<br>[UNIX, Linux, Windows, IBM i]2294 (08F6) (RC2294)| MQRC_UNKNOWN_REF_OBJECT<br>2295 (08F7) (RC2295)| MQRC_CHANNEL_ACTIVATED<br>2296 (08F8) (RC2296)| MQRC_CHANNEL_NOT_ACTIVATED<br>2297 (08F9) (RC2297)| MQRC_UOW_CANCELED<br>2298 (08FA) (RC2298)| MQRC_FUNCTION_NOT_SUPPORTED<br>2299 (08FB) (RC2299)| MQRC_SELECTOR_TYPE_ERROR<br>2300 (08FC) (RC2300)| MQRC_COMMAND_TYPE_ERROR<br>2301 (08FD) (RC2301)| MQRC_MULTIPLE_INSTANCE_ERROR<br>2302 (08FE) (RC2302)| MQRC_SYSTEM_ITEM_NOT_ALTERABLE<br>2303 (08FF) (RC2303)| MQRC_BAG_CONVERSION_ERROR<br>2304 (0900) (RC2304)| MQRC_SELECTOR_OUT_OF_RANGE<br>2305 (0901) (RC2305)| MQRC_SELECTOR_NOT_UNIQUE<br>2306 (0902) (RC2306)| MQRC_INDEX_NOT_PRESENT<br>2307 (0903) (RC2307)| MQRC_STRING_ERROR<br>2308 (0904) (RC2308)| MQRC_ENCODING_NOT_SUPPORTED<br>2309 (0905) (RC2309)| MQRC_SELECTOR_NOT_PRESENT<br>2310 (0906) (RC2310)| MQRC_OUT_SELECTOR_ERROR<br>2311 (0907) (RC2311)| MQRC_STRING_TRUNCATED<br>2312 (0908) (RC2312)| MQRC_SELECTOR_WRONG_TYPE<br>2313 (0909) (RC2313)| MQRC_INCONSISTENT_ITEM_TYPE<br>2314 (090A) (RC2314)| MQRC_INDEX_ERROR<br>2315 (090B) (RC2315)| MQRC_SYSTEM_BAG_NOT_ALTERABLE<br>2316 (090C) (RC2316)| MQRC_ITEM_COUNT_ERROR<br>2317 (090D) (RC2317)| MQRC_FORMAT_NOT_SUPPORTED<br>2318 (090E) (RC2318)| MQRC_SELECTOR_NOT_SUPPORTED<br>2319 (090F) (RC2319)| MQRC_ITEM_VALUE_ERROR<br>2320 (0910) (RC2320)| MQRC_HBAG_ERROR<br>2321 (0911) (RC2321)| MQRC_PARAMETER_MISSING<br>2322 (0912) (RC2322)| MQRC_CMD_SERVER_NOT_AVAILABLE<br>2323 (0913) (RC2323)| MQRC_STRING_LENGTH_ERROR<br>2324 (0914) (RC2324)| MQRC_INQUIRY_COMMAND_ERROR<br>2325 (0915) (RC2325)| MQRC_NESTED_BAG_NOT_SUPPORTED<br>2326 (0916) (RC2326)| MQRC_BAG_WRONG_TYPE<br>2327 (0917) (RC2327)| MQRC_ITEM_TYPE_ERROR<br>2328 (0918) (RC2328)| MQRC_SYSTEM_BAG_NOT_DELETABLE<br>2329 (0919) (RC2329)| MQRC_SYSTEM_ITEM_NOT_DELETABLE<br>2330 (091A) (RC2330)| MQRC_CODED_CHAR_SET_ID_ERROR<br>2331 (091B) (RC2331)| MQRC_MSG_TOKEN_ERROR<br>[z/OS]2332 (091C) (RC2332)| MQRC_MISSING_WIH<br>2333 (091D) (RC2333)| MQRC_WIH_ERROR<br>2334 (091E) (RC2334)| MQRC_RFH_ERROR<br>2335 (091F) (RC2335)| MQRC_RFH_STRING_ERROR<br>2336 (0920) (RC2336)| MQRC_RFH_COMMAND_ERROR<br>2337 (0921) (RC2337)| MQRC_RFH_PARM_ERROR<br>2338 (0922) (RC2338)| MQRC_RFH_DUPLICATE_PARM<br>2339 (0923) (RC2339)| MQRC_RFH_PARM_MISSING<br>[z/OS]2340 (0924) (RC2340)| MQRC_CHAR_CONVERSION_ERROR<br>[z/OS]2341 (0925) (RC2341)| MQRC_UCS2_CONVERSION_ERROR<br>[z/OS]2342 (0926) (RC2342)| MQRC_DB2_NOT_AVAILABLE<br>[z/OS]2343 (0927) (RC2343)| MQRC_OBJECT_NOT_UNIQUE<br>[z/OS]2344 (0928) (RC2344)| MQRC_CONN_TAG_NOT_RELEASED<br>[z/OS]2345 (0929) (RC2345)| MQRC_CF_NOT_AVAILABLE<br>[z/OS]2346 (092A) (RC2346)| MQRC_CF_STRUC_IN_USE<br>[z/OS]2347 (092B) (RC2347)| MQRC_CF_STRUC_LIST_HDR_IN_USE<br>[z/OS]2348 (092C) (RC2348)| MQRC_CF_STRUC_AUTH_FAILED<br>[z/OS]2349 (092D) (RC2349)| MQRC_CF_STRUC_ERROR<br>[z/OS]2350 (092E) (RC2350)| MQRC_CONN_TAG_NOT_USABLE<br>[Windows][z/OS]2351 (092F) (RC2351)| MQRC_GLOBAL_UOW_CONFLICT<br>[Windows][z/OS]2352 (0930) (RC2352)| MQRC_LOCAL_UOW_CONFLICT<br>[Windows]2353 (0931) (RC2353)| MQRC_HANDLE_IN_USE_FOR_UOW<br>[HPNSS][Windows]2354 (0932) (RC2354)| MQRC_UOW_ENLISTMENT_ERROR<br>[HPNSS][Windows]2355 (0933) (RC2355)| MQRC_UOW_MIX_NOT_SUPPORTED<br>2356 (0934) (RC2356)| MQRC_WXP_ERROR<br>2357 (0935) (RC2357)| MQRC_CURRENT_RECORD_ERROR<br>2358 (0936) (RC2358)| MQRC_NEXT_OFFSET_ERROR<br>2359 (0937) (RC2359)| MQRC_NO_RECORD_AVAILABLE<br>[z/OS]2360 (0938) (RC2360)| MQRC_OBJECT_LEVEL_INCOMPATIBLE<br>2361 (0939) (RC2361)| MQRC_NEXT_RECORD_ERROR<br>2362 (093A) (RC2362)| MQRC_BACKOUT_THRESHOLD_REACHED<br>2363 (093B) (RC2363)| MQRC_MSG_NOT_MATCHED<br>2364 (093C) (RC2364)| MQRC_JMS_FORMAT_ERROR<br>[z/OS]2365 (093D) (RC2365)| MQRC_SEGMENTS_NOT_SUPPORTED<br>[z/OS]2366 (093E) (RC2366)| MQRC_WRONG_CF_LEVEL<br>2367 (093F) (RC2367)| MQRC_CONFIG_CREATE_OBJECT<br>2368 (0940) (RC2368)| MQRC_CONFIG_CHANGE_OBJECT<br>2369 (0941) (RC2369)| MQRC_CONFIG_DELETE_OBJECT<br>2370 (0942) (RC2370)| MQRC_CONFIG_REFRESH_OBJECT<br>2371 (0943) (RC2371)| MQRC_CHANNEL_SSL_ERROR<br>[z/OS]2373 (0945) (RC2373)| MQRC_CF_STRUC_FAILED<br>[UNIX][Windows]2374 (0946) (RC2374)| MQRC_API_EXIT_ERROR<br>[UNIX][Windows]2375 (0947) (RC2375)| MQRC_API_EXIT_INIT_ERROR<br>[UNIX][Windows]2376 (0948) (RC2376)| MQRC_API_EXIT_TERM_ERROR<br>[UNIX][Windows]2377 (0949) (RC2377)| MQRC_EXIT_REASON_ERROR<br>[UNIX][Windows]2378 (094A) (RC2378)| MQRC_RESERVED_VALUE_ERROR<br>[UNIX, Linux, Windows, IBM i]2379 (094B) (RC2379)| MQRC_NO_DATA_AVAILABLE<br>[UNIX][Windows]2380 (094C) (RC2380)| MQRC_SCO_ERROR<br>[UNIX][Windows]2381 (094D) (RC2381)| MQRC_KEY_REPOSITORY_ERROR<br>[UNIX][Windows]2382 (094E) (RC2382)| MQRC_CRYPTO_HARDWARE_ERROR<br>[UNIX][Windows]2383 (094F) (RC2383)| MQRC_AUTH_INFO_REC_COUNT_ERROR<br>[UNIX][Windows]2384 (0950) (RC2384)| MQRC_AUTH_INFO_REC_ERROR<br>[UNIX][Windows]2385 (0951) (RC2385)| MQRC_AIR_ERROR<br>[UNIX][Windows]2386 (0952) (RC2386)| MQRC_AUTH_INFO_TYPE_ERROR<br>[UNIX][Windows]2387 (0953) (RC2387)| MQRC_AUTH_INFO_CONN_NAME_ERROR<br>[UNIX][Windows]2388 (0954) (RC2388)| MQRC_LDAP_USER_NAME_ERROR<br>[UNIX][Windows]2389 (0955) (RC2389)| MQRC_LDAP_USER_NAME_LENGTH_ERR<br>[UNIX][Windows]2390 (0956) (RC2390)| MQRC_LDAP_PASSWORD_ERROR<br>[UNIX][Windows]2391 (0957) (RC2391)| MQRC_SSL_ALREADY_INITIALIZED<br>[UNIX][Windows]2392 (0958) (RC2392)| MQRC_SSL_CONFIG_ERROR<br>[UNIX][Windows]2393 (0959) (RC2393)| MQRC_SSL_INITIALIZATION_ERROR<br>[z/OS]2394 (095A) (RC2394)| MQRC_Q_INDEX_TYPE_ERROR<br>[IBM i][UNIX][Windows]2395 (095B) (RC2395)| MQRC_CFBS_ERROR<br>2396 (095C) (RC2396)| MQRC_SSL_NOT_ALLOWED<br>2397 (095D) (RC2397)| MQRC_JSSE_ERROR<br>2398 (095E) (RC2398)| MQRC_SSL_PEER_NAME_MISMATCH<br>2399 (095F) (RC2399)| MQRC_SSL_PEER_NAME_ERROR<br>2400 (0960) (RC2400)| MQRC_UNSUPPORTED_CIPHER_SUITE<br>2401 (0961) (RC2401)| MQRC_SSL_CERTIFICATE_REVOKED<br>2402 (0962) (RC2402)| MQRC_SSL_CERT_STORE_ERROR<br>2406 (0966) (RC2406)| MQRC_CLIENT_EXIT_LOAD_ERROR<br>2407 (0967) (RC2407)| MQRC_CLIENT_EXIT_ERROR<br>2409 (0969) (RC2409)| MQRC_SSL_KEY_RESET_ERROR<br>2411 (096B) (RC2411)| MQRC_LOGGER_STATUS<br>2412 (096C) (RC2412)| MQRC_COMMAND_MQSC<br>2413 (096D) (RC2413)| MQRC_COMMAND_PCF<br>2414 (096E) (RC2414)| MQRC_CFIF_ERROR<br>2415 (096F) (RC2415)| MQRC_CFSF_ERROR<br>2416 (0970) (RC2416)| MQRC_CFGR_ERROR<br>2417 (0971) (RC2417)| MQRC_MSG_NOT_ALLOWED_IN_GROUP<br>2418 (0972) (RC2418)| MQRC_FILTER_OPERATOR_ERROR<br>2419 (0973) (RC2419)| MQRC_NESTED_SELECTOR_ERROR<br>2420 (0974) (RC2420)| MQRC_EPH_ERROR<br>2421 (0975) (RC2421)| MQRC_RFH_FORMAT_ERROR<br>[IBM i][UNIX][Windows]2422 (0976) (RC2422)| MQRC_CFBF_ERROR<br>2423 (0977) (RC2423)| MQRC_CLIENT_CHANNEL_CONFLICT<br>2424 (0978) (RC2424)| MQRC_SD_ERROR<br>2425 (0979) (RC2425)| MQRC_TOPIC_STRING_ERROR<br>2426 (097A) (RC2426)| MQRC_STS_ERROR<br>2428 (097C) (RC2428)| MQRC_NO_SUBSCRIPTION<br>2429 (097D) (RC2429)| MQRC_SUBSCRIPTION_IN_USE<br>2430 (097E) (RC2430)| MQRC_STAT_TYPE_ERROR<br>2431 (097F) (RC2431)| MQRC_SUB_USER_DATA_ERROR<br>2432 (0980) (RC2432)| MQRC_SUB_ALREADY_EXISTS<br>2434 (0982) (RC2434)| MQRC_IDENTITY_MISMATCH<br>2435 (0983) (RC2435)| MQRC_ALTER_SUB_ERROR<br>2436 (0984) (RC2436)| MQRC_DURABILITY_NOT_ALLOWED<br>2437 (0985) (RC2437)| MQRC_NO_RETAINED_MSG<br>2438 (0986) (RC2438)| MQRC_SRO_ERROR<br>2440 (0988) (RC2440)| MQRC_SUB_NAME_ERROR<br>2441 (0989) (RC2441)| MQRC_OBJECT_STRING_ERROR<br>2442 (098A) (RC2442)| MQRC_PROPERTY_NAME_ERROR<br>2443 (098B) (RC2443)| MQRC_SEGMENTATION_NOT_ALLOWED<br>2444 (098C) (RC2444)| MQRC_CBD_ERROR<br>2445 (098D) (RC2445)| MQRC_CTLO_ERROR<br>2446 (098E) (RC2446)| MQRC_NO_CALLBACKS_ACTIVE<br>2448 (0990) (RC2448)| MQRC_CALLBACK_NOT_REGISTERED<br>2449 (0991) (RC2449)| MQRC_OPERATION_NOT_ALLOWED<br>2457 (0999) (RC2457)| MQRC_OPTIONS_CHANGED<br>2458 (099A) (RC2458)| MQRC_READ_AHEAD_MSGS<br>2459 (099B) (RC2459)| MQRC_SELECTOR_SYNTAX_ERROR<br>2460 (099C) (RC2460)| MQRC_HMSG_ERROR<br>2461 (099D) (RC2461)| MQRC_CMHO_ERROR<br>2462 (099E) (RC2462)| MQRC_DMHO_ERROR<br>2463 (099F) (RC2463)| MQRC_SMPO_ERROR<br>2464 (09A0) (RC2464)| MQRC_IMPO_ERROR<br>2465 (09A1) (RC2465)| MQRC_PROPERTY_NAME_TOO_BIG<br>2466 (09A2) (RC2466)| MQRC_PROP_VALUE_NOT_CONVERTED<br>2467 (09A3) (RC2467)| MQRC_PROP_TYPE_NOT_SUPPORTED<br>2469 (09A5) (RC2469)| MQRC_PROPERTY_VALUE_TOO_BIG<br>2470 (09A6) (RC2470)| MQRC_PROP_CONV_NOT_SUPPORTED<br>2471 (09A7) (RC2471)| MQRC_PROPERTY_NOT_AVAILABLE<br>2472 (09A8) (RC2472)| MQRC_PROP_NUMBER_FORMAT_ERROR<br>2473 (09A9) (RC2473)| MQRC_PROPERTY_TYPE_ERROR<br>2478 (09AE) (RC2478)| MQRC_PROPERTIES_TOO_BIG<br>2479 (09AF) (RC2479)| MQRC_PUT_NOT_RETAINED<br>2480 (09B0) (RC2480)| MQRC_ALIAS_TARGTYPE_CHANGED<br>2481 (09B1) (RC2481)| MQRC_DMPO_ERROR<br>2482 (09B2) (RC2482)| MQRC_PD_ERROR<br>2483 (09B3) (RC2483)| MQRC_CALLBACK_TYPE_ERROR<br>2484 (09B4) (RC2484)| MQRC_CBD_OPTIONS_ERROR<br>2485 (09B5) (RC2485)| MQRC_MAX_MSG_LENGTH_ERROR<br>2486 (09B6) (RC2486)| MQRC_CALLBACK_ROUTINE_ERROR<br>[z/OS]2487 (09B7) (RC2487)| MQRC_CALLBACK_LINK_ERROR<br>2488 (09B8) (RC2488)| MQRC_OPERATION_ERROR<br>2489 (09B9) (RC2489)| MQRC_BMHO_ERROR<br>2490 (09BA) (RC2490)| MQRC_UNSUPPORTED_PROPERTY<br>2492 (09BC) (RC2492)| MQRC_PROP_NAME_NOT_CONVERTED<br>2494 (09BE) (RC2494)| MQRC_GET_ENABLED<br>2495 (09BF) (RC2495)| MQRC_MODULE_NOT_FOUND<br>2496 (09C0) (RC2496)| MQRC_MODULE_INVALID<br>2497 (09C1) (RC2497)| MQRC_MODULE_ENTRY_NOT_FOUND<br>2498 (09C2) (RC2498)| MQRC_MIXED_CONTENT_NOT_ALLOWED<br>2499 (09C3) (RC2499)| MQRC_MSG_HANDLE_IN_USE<br>2500 (09C4) (RC2500)| MQRC_HCONN_ASYNC_ACTIVE<br>2501 (09C5) (RC2501)| MQRC_MHBO_ERROR<br>2502 (09C6) (RC2502)| MQRC_PUBLICATION_FAILURE<br>2503 (09C7) (RC2503)| MQRC_SUB_INHIBITED<br>2504 (09C8) (RC2504)| MQRC_SELECTOR_ALWAYS_FALSE<br>2507 (09CB) (RC2507)| MQRC_XEPO_ERROR<br>2509 (09CD) (RC2509)| MQRC_DURABILITY_NOT_ALTERABLE<br>2510 (09CE) (RC2510)| MQRC_TOPIC_NOT_ALTERABLE<br>2512 (09D0) (RC2512)| MQRC_SUBLEVEL_NOT_ALTERABLE<br>2513 (09D1) (RC2513)| MQRC_PROPERTY_NAME_LENGTH_ERR<br>2514 (09D2) (RC2514)| MQRC_DUPLICATE_GROUP_SUB<br>2515 (09D3) (RC2515)| MQRC_GROUPING_NOT_ALTERABLE<br>2516 (09D4) (RC2516)| MQRC_SELECTOR_INVALID_FOR_TYPE<br>2517 (09D5) (RC2517)| MQRC_HOBJ_QUIESCED<br>2518 (09D6) (RC2518)| MQRC_HOBJ_QUIESCED_NO_MSGS<br>2519 (09D7) (RC2519)| MQRC_SELECTION_STRING_ERROR<br>2520 (09D8) (RC2520)| MQRC_RES_OBJECT_STRING_ERROR<br>2521 (09D9) (RC2521)| MQRC_CONNECTION_SUSPENDED<br>2522 (09DA) (RC2522)| MQRC_INVALID_DESTINATION<br>2523 (09DB) (RC2523)| MQRC_INVALID_SUBSCRIPTION<br>2524 (09DC) (RC2524)| MQRC_SELECTOR_NOT_ALTERABLE<br>2525 (09DD) (RC2525)| MQRC_RETAINED_MSG_Q_ERROR<br>2526 (09DE) (RC2526)| MQRC_RETAINED_NOT_DELIVERED<br>2527 (09DF) (RC2527)| MQRC_RFH_RESTRICTED_FORMAT_ERR<br>2528 (09E0) (RC2528)| MQRC_CONNECTION_STOPPED<br>2529 (09E1) (RC2529)| MQRC_ASYNC_UOW_CONFLICT<br>2530 (09E2) (RC2530)| MQRC_ASYNC_XA_CONFLICT<br>2531 (09E3) (RC2531)| MQRC_PUBSUB_INHIBITED<br>2532 (09E4) (RC2532)| MQRC_MSG_HANDLE_COPY_FAILURE<br>2533 (09E5) (RC2533)| MQRC_DEST_CLASS_NOT_ALTERABLE<br>2534 (09E6) (RC2534)| MQRC_OPERATION_NOT_ALLOWED<br>2535 (09E7)| MQRC_ACTION_ERROR<br>2537 (09E9) (RC2537)| MQRC_CHANNEL_NOT_AVAILABLE<br>2538 (09EA) (RC2538)| MQRC_HOST_NOT_AVAILABLE<br>2539 (09EB) (RC2539)| MQRC_CHANNEL_CONFIG_ERROR<br>2540 (09EC) (RC2540)| MQRC_UNKNOWN_CHANNEL_NAME<br>2541 (09ED) (RC2541)| MQRC_LOOPING_PUBLICATION<br>2543 (09EF) (RC2543)| MQRC_STANDBY_Q_MGR<br>2544 (09F0) (RC2544)| MQRC_RECONNECTING<br>2545 (09F1) (RC2545)| MQRC_RECONNECTED<br>2546 (09F2) (RC2546)| MQRC_RECONNECT_QMID_MISMATCH<br>2547 (09F3) (RC2547)| MQRC_RECONNECT_INCOMPATIBLE<br>2548 (09F4) (RC2548)| MQRC_RECONNECT_FAILED<br>2549 (09F5) (RC2549)| MQRC_CALL_INTERRUPTED<br>2550 (09F6) (RC2550)| MQRC_NO_SUBS_MATCHED<br>2551 (09F7) (RC2551)| MQRC_SELECTION_NOT_AVAILABLE<br>2552 (09F8) (RC2552)| MQRC_CHANNEL_SSL_WARNING<br>2553 (09F9) (RC2553)| MQRC_OCSP_URL_ERROR<br>2554 (09FA) (RC2554)| MQRC_CONTENT_ERROR<br>2555 (09FB) (RC2555)| MQRC_RECONNECT_Q_MGR_REQD<br>2556 (09FC) (RC2556)| MQRC_RECONNECT_TIMED_OUT<br>[UNIX, Linux, Windows, IBM i]2557 (09FD) (RC2557)| MQRC_PUBLISH_EXIT_ERROR<br>2558 (09FE) (RC2558)| MQRC_COMMINFO_ERROR<br>2560 (0A00) (RC2560)| MQRC_MULTICAST_ONLY<br>[z/OS]2561 (0A01) (RC2561)| MQRC_DATA_SET_NOT_AVAILABLE<br>2562 (0A02) (RC2562)| MQRC_GROUPING_NOT_ALLOWED<br>2563 (0A03) (RC2563)| MQRC_GROUP_ADDRESS_ERROR<br>2564 (0A04) (RC2564)| MQRC_MULTICAST_CONFIG_ERROR<br>2565 (0A05) (RC2565)| MQRC_MULTICAST_INTERFACE_ERROR<br>2566 (0A06) (RC2566)| MQRC_MULTICAST_SEND_ERROR<br>2567 (0A07) (RC2567)| MQRC_MULTICAST_INTERNAL_ERROR<br>2568 (0A08) (RC2568)| MQRC_CONNECTION_NOT_AVAILABLE<br>2569 (0A09) (RC2569)| MQRC_SYNCPOINT_NOT_ALLOWED<br>2577 (0A11) (RC2577)| MQRC_CHANNEL_BLOCKED<br>2578 (0A12) (RC2578)| MQRC_CHANNEL_BLOCKED_WARNING<br>2583 (0A17) (RC2583)| MQRC_INSTALLATION_MISMATCH<br>2587 (0A1B) (RC2587)| MQRC_HMSG_NOT_AVAILABLE<br>2589 (0A1D) (RC2589)| MQRC_INSTALLATION_MISSING<br>2590 (0A1E) (RC2590)| MQRC_FASTPATH_NOT_AVAILABLE<br>2591 (0A1F) (RC2591)| MQRC_CIPHER_SPEC_NOT_SUITE_B<br>2592 (0A20) (RC2592)| MQRC_SUITE_B_ERROR<br>2593 (0A21)(RC2593)| MQRC_CERT_VAL_POLICY_ERROR<br>2594 (0A22)(RC2594)| MQRC_PASSWORD_PROTECTION_ERROR<br>2595 (0A23)(RC2595)| MQRC_CSP_ERROR<br>2596 (0A24)(RC2596)| MQRC_CERT_LABEL_NOT_ALLOWED<br>2598 (0A26)(RC2598)| MQRC_ADMIN_TOPIC_STRING_ERROR<br>6100 (17D4) (RC6100)| MQRC_REOPEN_EXCL_INPUT_ERROR<br>6101 (17D5) (RC6101)| MQRC_REOPEN_INQUIRE_ERROR<br>6102 (17D6) (RC6102)| MQRC_REOPEN_SAVED_CONTEXT_ERR<br>6103 (17D7) (RC6103)| MQRC_REOPEN_TEMPORARY_Q_ERROR<br>6104 (17D8) (RC6104)| MQRC_ATTRIBUTE_LOCKED<br>6105 (17D9) (RC6105)| MQRC_CURSOR_NOT_VALID<br>6106 (17DA) (RC6106)| MQRC_ENCODING_ERROR<br>6107 (17DB) (RC6107)| MQRC_STRUC_ID_ERROR<br>6108 (17DC) (RC6108)| MQRC_NULL_POINTER<br>6109 (17DD) (RC6109)| MQRC_NO_CONNECTION_REFERENCE<br>6110 (17DE) (RC6110)| MQRC_NO_BUFFER<br>6111 (17DF) (RC6111)| MQRC_BINARY_DATA_LENGTH_ERROR<br>6112 (17E0) (RC6112)| MQRC_BUFFER_NOT_AUTOMATIC<br>6113 (17E1) (RC6113)| MQRC_INSUFFICIENT_BUFFER<br>6114 (17E2) (RC6114)| MQRC_INSUFFICIENT_DATA<br>6115 (17E3) (RC6115)| MQRC_DATA_TRUNCATED<br>6116 (17E4) (RC6116)| MQRC_ZERO_LENGTH<br>6117 (17E5) (RC6117)| MQRC_NEGATIVE_LENGTH<br>6118 (17E6) (RC6118)| MQRC_NEGATIVE_OFFSET<br>6119 (17E7) (RC6119)| MQRC_INCONSISTENT_FORMAT<br>6120 (17E8) (RC6120)| MQRC_INCONSISTENT_OBJECT_STATE<br>6121 (17E9) (RC6121)| MQRC_CONTEXT_OBJECT_NOT_VALID<br>6122 (17EA) (RC6122)| MQRC_CONTEXT_OPEN_ERROR<br>6123 (17EB) (RC6123)| MQRC_STRUC_LENGTH_ERROR<br>6124 (17EC) (RC6124)| MQRC_NOT_CONNECTED<br>6125 (17ED) (RC6125)| MQRC_NOT_OPEN<br>6126 (17EE) (RC6126)| MQRC_DISTRIBUTION_LIST_EMPTY<br>6127 (17EF) (RC6127)| MQRC_INCONSISTENT_OPEN_OPTIONS<br>6128 (17FO) (RC6128)| MQRC_WRONG_VERSION<br>6129 (17F1) (RC6129)| MQRC_REFERENCE_ERROR</p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>IBMMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>git command</title>
    <url>/git-command.html</url>
    <content><![CDATA[<center></center>

<span id="more"></span>
<h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><h3 id="Bash-常用命令"><a href="#Bash-常用命令" class="headerlink" title="Bash 常用命令"></a>Bash 常用命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">command</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cd</td>
<td style="text-align:center">切换目录</td>
</tr>
<tr>
<td style="text-align:left">pwd</td>
<td style="text-align:center">查看当前目录</td>
</tr>
<tr>
<td style="text-align:left">ls(ll)</td>
<td style="text-align:center">查看当前目录文件</td>
</tr>
<tr>
<td style="text-align:left">touch file.*</td>
<td style="text-align:center">新建文件</td>
</tr>
<tr>
<td style="text-align:left">rm file.*</td>
<td style="text-align:center">删除文件</td>
</tr>
<tr>
<td style="text-align:left">mkdir fold</td>
<td style="text-align:center">新建文件夹</td>
</tr>
<tr>
<td style="text-align:left">rm -r fold</td>
<td style="text-align:center">删除文件夹</td>
</tr>
<tr>
<td style="text-align:left">mv file destfold file</td>
<td style="text-align:center">移动文件</td>
</tr>
<tr>
<td style="text-align:left">clear</td>
<td style="text-align:center">清屏</td>
</tr>
<tr>
<td style="text-align:left">history</td>
<td style="text-align:center">查看历史命令</td>
</tr>
</tbody>
</table>
</div>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="设置用户名与邮箱"><a href="#设置用户名与邮箱" class="headerlink" title="设置用户名与邮箱"></a>设置用户名与邮箱</h3><p><code>git config --global user.name &quot;Your Name&quot;</code></p>
<p><code>git config --global user.email &quot;email@example.com&quot;</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">command</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
<p>git init| 在指定路径下执行，创建本地仓库<br>git config -l |查看git环境详细配置<br>git config —system —list  |  查看系统config<br>git config —global  —list  |  查看当前用户（global）配置<br>git config —local  —list  |  查看当前仓库配置信息<br>git add |提交文件到暂存区，多个文件空格分开<br>git commit| 提交到仓库分支<br>git commit -m “说明”| 添加本次提交的说明便于查看更改记录<br>git log |历史版本信息 Git中版本用HEAD做标识，当前版本为HEAD，上一个版本是HEAD^<br>git reset —hard HEAD^ | 退回到上个版本<br>git reset —hard commit_id|  HEAD 可用commit id前几位<br>git reflog| 查看之前所有版本信息<br>git status |查看状态<br>git diff HEAD — file |查看工作区与版本库中的区别<br>git checkout — file  |将工作区恢复到暂存区或版本库中的内容<br>git reset HEAD file | 将暂存区恢复到版本库的内容<br>git rm file | 删除文件<br>git remote add origin git@github.com:yourgithubname/Repositoryname.git |关联远程库<br>git push -u origin master |将本地仓库推送到远程仓库master分支并关联本地master分支<br>git push origin master  |推送到远程master分支<br>git clone git@github.com:githubname/Repositoryname.git |clone到本地<br>git branch bra | 创建bra分支<br>git checkout bra | 切换到bra分支<br>git checkout -b bra|等效于上面两条指令<br>git branch | 查看分支，当前分支用*标识，切换分支后提交到当前分支<br>git checkout master |切换到master分支<br>git merge  |合并指定分支到当前分支<br>git branch -d bra | 删除bra分支<br>git switch -c bra | 创建并切换分支<br>git switch master | 切换到master分支</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML常用标签</title>
    <url>/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE.html</url>
    <content><![CDATA[<h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><h3 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="水平线-分割线"><a href="#水平线-分割线" class="headerlink" title="水平线/分割线"></a>水平线/分割线</h3><p><code>&lt;hr/&gt;</code></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>html注释：&lt;!-- comment --&gt;</code></p>
<h3 id="段落及换行"><a href="#段落及换行" class="headerlink" title="段落及换行"></a>段落及换行</h3><p>html段落<code>&lt;p&gt;</code>以及段落换行<code>&lt;br/&gt;</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello <span class="tag">&lt;<span class="name">br</span>/&gt;</span> world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;b&gt;</code></td>
<td style="text-align:center">加粗</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;big&gt;</code></td>
<td style="text-align:center">大号字体</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;em&gt;</code></td>
<td style="text-align:center">着重文字</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;i&gt;</code></td>
<td style="text-align:center">斜体</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;small&gt;</code></td>
<td style="text-align:center">小号字体</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;sub&gt;</code></td>
<td style="text-align:center">下标</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;sup&gt;</code></td>
<td style="text-align:center">上标</td>
</tr>
</tbody>
</table>
</div>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><code>&lt;a&gt;</code>比较重要的属性有两个，分别是href、target<br>href指定超链接地址<br>target指定打开方式<br>&emsp;_blank  新页面打开</p>
<h4 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h4><p><code>&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</code></p>
<h4 id="邮件链接"><a href="#邮件链接" class="headerlink" title="邮件链接"></a>邮件链接</h4><p>标签最简式<br><code>&lt;a href=&quot;mailto:xxx@xx.com&quot;&gt;联系站长&lt;/a&gt;</code></p>
<h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p>使用格式：<code>&lt;img src=&quot;url&quot;&gt;</code><br>&emsp;alt  定义当图片无法加载时，显示什么信息<br>&emsp;width 定义宽度，单位可以为像素  也可以为百分比<br>&emsp;height 定义高度<br><code>&lt; img src=“11.jpg” width=&quot;100px&quot; height=&quot;200px&quot; title=&quot;title&quot; alt=&quot;图片无法显示，请刷新&quot;/&gt;</code></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格由<code>&lt;table&gt;</code>来定义，每行<code>&lt;tr&gt;</code> 有许多单元格<code>&lt;td&gt;</code>。表头可以使用<code>&lt;th&gt;</code><br><code>&lt;table&gt;</code>标签属性：</p>
<blockquote>
<p>border：表格边框属性；当使用border=”1”设置边框时，会在所有td以及table上嵌套边框，当border加大时，只有table框会加粗。<br>cellspacing：单元格与单元格之间的间隙。当cellspacing=”0”时，单元格之间的间隙为0，但边框线并不会合并。<br>☆☆合并边框的写法style=”border-collapse:collapse;” 使用边框合并时，无需设置cellspacing。<br>cellpadding:单元格内边距，单元格中文字与单元格边框之间的距离。<br>width/height:表格的宽高<br>align：设置表格在父容器中的对齐方式 ，left/居左 center/居中 right/居右<br>☆☆当表格使用align属性时，相当于使表格浮动，可能会导致表格后面的元素受表格浮动影响，导致布局错乱。<br>bgcolor：背景色<br>background：背景图，后接相对路径。背景图和背景色同时生效时，图会覆盖背景色<br>bordercolor：设置边框颜色</p>
</blockquote>
<p>在<code>&lt;table&gt;</code>中可以嵌入<code>&lt;th&gt;  &lt;tr&gt;  &lt;td&gt;</code>等标签<br>　　<code>&lt;tr&gt;</code>   定义行<br>　　<code>&lt;th&gt;</code>   定义表头<br>　　　　colspan  定义表头单元格可以横跨的列数。<br>　　　　rowspan  定义表头单元格横跨的行数<br>　　　　heardes  定义与表头单元格相关联的一个或者多个单元格。(html5新增)　　　<br>　　<code>&lt;td&gt;</code>   定义单元格<br>　　　　colspan  定义单元格可以横跨的列数。<br>　　　　rowspan  定义单元格横跨的行数<br>　　　　heardes  定义与单元格相关联的一个或者多个单元格。(html5新增)　　<br>表格固定高度：overflow-y:auto;</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表<code>&lt;ul&gt;</code><br>有序列表<code>&lt;ol&gt;</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>male<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>female<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>male<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>female<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库自动备份、删除数据</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE.html</url>
    <content><![CDATA[<p>文中指令可在windows命令行中执行测试<br>本文介绍的是实用简单的方式实现所需功能，所有功能均可写在上位机软件中自动实现，但不同现场很难通用<br>通过脚本的形式实现简单易改<br><span id="more"></span></p>
<h1 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h1><h2 id="数据库备份脚本"><a href="#数据库备份脚本" class="headerlink" title="数据库备份脚本"></a>数据库备份脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo off</span><br><span class="line">set PRJDB=LocalDB</span><br><span class="line">set FileName=%PRJDB%_%date:~0,4%_%date:~5,2%_%date:~8,2%.backup</span><br><span class="line">if not exist &quot;D:\BBK\DBbackup&quot; (md D:\BBK\DBbackup)</span><br><span class="line">D:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin/pg_dump.exe --host localhost --port 5432 --username &quot;postgres&quot; --no-password  --format custom --verbose --file &quot;D:\BBK\DBbackup\%FileName%&quot; &quot;LocalDB&quot;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<blockquote>
<p>备份保存路径为<code>D:\BBK\DBbackup</code><br>命名为：LocalDB_年_月_日.backup<br><code>D:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin/pg_dump.exe</code>为Postgresql数据库程序所在路径</p>
</blockquote>
<h2 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 删除一个月以前的数据</span><br><span class="line">D:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin/psql -h 127.0.0.1 -p 5432 -d LocalDB -U postgres --command &quot;delete from 侧滑表 where 测试时间 &lt; (now() - interval &#x27;1 month&#x27;)&quot;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<blockquote>
<p><code>D:/&quot;Program Files (x86)&quot;/PostgreSQL/9.5/bin</code>为Postgresql数据库程序所在文件夹</p>
</blockquote>
<h3 id="时间扩展"><a href="#时间扩展" class="headerlink" title="时间扩展"></a>时间扩展</h3><h4 id="年"><a href="#年" class="headerlink" title="年"></a>年</h4><p><code>interval &#39;2 years&#39;</code><br><code>interval &#39;2 year&#39;</code><br><code>interval &#39;2 y&#39;</code><br><code>interval &#39;2 Y&#39;</code><br><code>interval &#39;2Y&#39;</code></p>
<h4 id="月"><a href="#月" class="headerlink" title="月"></a>月</h4><p><code>interval &#39;1 month&#39;</code><br><code>interval &#39;one month&#39;</code></p>
<h4 id="周"><a href="#周" class="headerlink" title="周"></a>周</h4><p><code>interval &#39;3 week&#39;</code></p>
<p>说明：interval 可以不写</p>
<p>运行时会提示数据用户名密码<br>windows系统可在<code>%APPDATA%\postgresql\pgpass.conf</code>中添加服务器信息，实现免密操作<br>格式：地址:端口:数据库:用户名:密码<br>如：<code>127.0.0.1:5432:LocalDB:postgres:123</code><br>参考：<a href="https://www.postgresql.org/docs/current/libpq-pgpass.html">https://www.postgresql.org/docs/current/libpq-pgpass.html</a></p>
<h2 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h2><p>将上述shell指令分别复制到文本文档中另存为 name.bat，然后创建任务计划自动调用；<br>任务计划创建方法：windows运行compmgmt.msc 新建任务计划程序按提示操作即可</p>
<h1 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h1><h2 id="数据库自动备份"><a href="#数据库自动备份" class="headerlink" title="数据库自动备份"></a>数据库自动备份</h2><p>打开数据库，依次进入：管理——维护计划，根据维护计划向导操作即可</p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>启动SQL Server Agent服务，在步骤中新建作业，类型选择transact-SQL，<br>命令中输入：<br>declare @tm <code>datetime</code><br>delete from <code>tablename</code> where tm&gt;=dateadd(month,-6,getdate())//删除表中6个月之前的数据<br>然后打开计划自定义执行周期</p>
<h1 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h1><p>直接用脚本复制重命名，新建任务计划自动执行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set PRJDB=LocalDB</span><br><span class="line">set FileName=%PRJDB%_%date:~0,4%_%date:~5,2%_%date:~8,2%.backup</span><br><span class="line">copy D:\BBK\LocalDB.mdb D:\BBK\DBbackup\%FileName%&quot;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>工作</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>工作-BBK</title>
    <url>/%E5%B7%A5%E4%BD%9C-BBK.html</url>
    <content><![CDATA[<a href="/%E8%AF%8A%E6%96%AD%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E-OBD%E6%A8%A1%E5%9D%97.html" title="诊断指令说明--OBD模块">诊断指令说明--OBD模块</a>
<p><br /><br><a href="/%E7%8E%B0%E5%9C%BA%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD%E8%B7%AF%E5%BE%84.html" title="现场软件备份路径">现场软件备份路径</a><br><br /><br><a href="/%E7%8E%B0%E5%9C%BA%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86.html" title="现场问题整理">现场问题整理</a><br><br /><br><a href="/Postgresql%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA.html" title="Postgresql数据导入导出">Postgresql数据导入导出</a><br><br /><br><a href="/%E7%8E%B0%E5%9C%BA%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD.html" title="现场软件安装包下载">现场软件安装包下载</a></p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content><![CDATA[<h2 id="Re库"><a href="#Re库" class="headerlink" title="Re库"></a>Re库</h2><p>re.search 扫描整个字符串并返回第一个成功的匹配<br>re.search(pattern,string,flag=0)</p>
<blockquote>
<p>pattern:正则表达式字符串<br>string:待匹配字符串<br>flag:控制标记</p>
<blockquote>
<p>re.I或re.IGNORECASE表示忽略正则表达式的大小写，[A-Z]可匹配大小写<br>re.M或re.MULTILINE正字表达式中的^操作符能将给定字符串的每一行当做匹配开始<br>re.S或re.DOTALL正则表达式中的.操作符能匹配所有字符，默认不能匹配换行符</p>
</blockquote>
</blockquote>
<p>re.match(pattern,string,flag=0)</p>
<blockquote>
<p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配</p>
</blockquote>
<p>re.findall在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表<br>re.split(pattern,string,maxsplit=0,flag=0)</p>
<blockquote>
<p>将字符串按照正则表达式匹配的结果进行分割，返回列表<br>re.split([a],sadfab)返回s,df,b</p>
</blockquote>
<p>re.sub(pattern,repl,string,count=0,flag=0)</p>
<blockquote>
<p>在一个字符串中替换所有正则表达式所匹配的子串，返回替换后的字符串<br>repl:替换匹配字符串的字符串<br>count:匹配的最大替换次数</p>
</blockquote>
<h3 id="Match对象属性"><a href="#Match对象属性" class="headerlink" title="Match对象属性"></a>Match对象属性</h3><p>&gt;</p>
<blockquote>
<p>.string:待匹配文本<br>.re:匹配时使用的pattern对象<br>.pos:正则表达式搜索文本的开始位置<br>.endpos:正则表达式搜索文本的结束位置</p>
</blockquote>
<h3 id="Match对象方法"><a href="#Match对象方法" class="headerlink" title="Match对象方法"></a>Match对象方法</h3><p>&gt;</p>
<blockquote>
<p>.group():group(0)获取匹配后的字符串,group(n)匹配正则表达式中如(\\d+)第n个括号所匹配字符串<br>.start():匹配字符串在原始字符串的开始位置<br>.end():<br>.span():返回(.start(),.end())</p>
</blockquote>
<h2 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h2><div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>任意单个字符</td>
<td></td>
</tr>
<tr>
<td>[]</td>
<td>字符集，对单个字符给出取值范围</td>
<td>[abc]表示a或b或c的单个字符，[a-z]表示a-z的单个字符</td>
</tr>
<tr>
<td><sup><a href="#fn_" id="reffn_"></a></sup></td>
<td>非字符集，对单个字符给出排除范围</td>
<td><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup>表示非a或b或c的单个字符</td>
</tr>
</tbody>
</table>
</div>
<p>* | 前一个字符0次或无限次重复  |  abc*表示ab、abc、abccccc</p>
<p>+ | 前一个字符的1次或无限次重复  |abc+表示abc、abccc<br>?   | 前一个字符0次或1次重复  |   abc?表示ab或abc<br> | |左右表达式任意一个   |a|b 表示a或b<br>{m}  |重复前一个字符m次   |ab{2}cb表示abbcb,注意次数<br>{m,n}  | 重复前面一个字符m至n次(包含n)  |  ab{1,2}c表示abc或abbc<br>^  | 匹配字符串开头  | ^abc表示abc在一个字符串的开头<br>$  | 匹配字符串结尾  | abc$abc表示abc在一个字符串的结尾<br>()  | 分组标记，内部只能用|操作符  | (abc)表示abc,(abc|def)表示abc或def<br>\d  | 数字，等价于[0-9]  |<br>\w  | 单词字符，等价于[A-Za-z0-9]  |  </p>
<h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\cx</td>
<td style="text-align:center">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:center">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:center">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td style="text-align:center">匹配任何非空白字符。等价于 <sup><a href="#fn_ \f\n\r\t\v" id="reffn_ \f\n\r\t\v"> \f\n\r\t\v</a></sup>。</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td style="text-align:center">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td>
</tr>
<tr>
<td style="text-align:center">( )</td>
<td style="text-align:left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">匹配前面的子表达式零次或多次。要匹配 <em> 字符，请使用 \</em>。</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
<tr>
<td style="text-align:center">[</td>
<td style="text-align:left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:left">[abc]表示a或b或c，[a~z]表示a~z其中一个</td>
</tr>
<tr>
<td style="text-align:center"><sup><a href="#fn_" id="reffn_"></a></sup></td>
<td style="text-align:left"><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup>表示非a或b或c</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\\’ 匹配 “\”，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:left">匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。</td>
</tr>
<tr>
<td style="text-align:center">{</td>
<td style="text-align:left">标记限定符表达式的开始。要匹配 {，请使用 \{。</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:left"></td>
<td>指明两项之间的一个选择。要匹配 \</td>
<td>，请使用 \</td>
<td>。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。<br>正则表达式的限定符有：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">匹配前面的子表达式零次或多次。例如，zo<em>能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td style="text-align:center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td style="text-align:center">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody>
</table>
</div>
<p><strong><em>\</em>、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配*</strong></p>
<h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。<br>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。<br>正则表达式的定位符有：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:left">匹配一个单词边界，即字与空格间的位置。</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td style="text-align:left">非单词边界匹配。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。<br>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。<br>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。</p>
<h2 id="环视"><a href="#环视" class="headerlink" title="环视"></a>环视</h2><p>环视又叫预搜索和零宽断言<br>环视只占用逻辑位置 不占用物理位置</p>
<p>环视 | 含义<br>|:|:|<br>(?=exp)  | 肯定顺序环视，子表达式能匹配右侧的文本<br>(?!exp)  | 否定顺序环视，子表达式不能匹配右侧的文本<br>(?&lt;=exp)  |  肯定逆序环视，子表达式能匹配左侧的文本<br>(?&lt;!exp)  |  否定逆序环视，子表达式不能匹配左侧的文本</p>
<p>示例：<br>下列环视正则匹配均输出”AAA”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&quot;(?&lt;=B)AAA&quot;</span>,<span class="string">&quot;BAAA&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&quot;(?&lt;!B)AAA&quot;</span>,<span class="string">&quot;CAAA&quot;</span>))<span class="comment">#这里使用(?&lt;!B)、(?&lt;!=B)均可</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&quot;AAA(?=B)&quot;</span>,<span class="string">&quot;AAAB&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&quot;AAA(?!B)&quot;</span>,<span class="string">&quot;AAAC&quot;</span>))<span class="comment">#这里使用(?!B)、(?!=B)均可</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>现场工作代码路径说明</title>
    <url>/%E7%8E%B0%E5%9C%BA%E5%B7%A5%E4%BD%9C%E4%BB%A3%E7%A0%81%E8%B7%AF%E5%BE%84%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<p><center></center><br>程序版本更新后可能没有合入原有程序，本文作为各现场的程序在电脑中存放的路径进行说明<br><span id="more"></span></p>
<h2 id="国六排放"><a href="#国六排放" class="headerlink" title="国六排放"></a>国六排放</h2><h3 id="MES联网"><a href="#MES联网" class="headerlink" title="MES联网"></a>MES联网</h3><p><code>D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS</code></p>
<p>包含上汽临港、上汽南京、上汽宁德、上汽郑州、上汽无锡大通、<br>长沙菲亚特、杭州福特(包含QLS，双怠速转速控制)、重庆福特、哈尔滨福特(继承杭州福特未测试)</p>
<h2 id="上汽"><a href="#上汽" class="headerlink" title="上汽"></a>上汽</h2><h3 id="上汽检测线"><a href="#上汽检测线" class="headerlink" title="上汽检测线"></a>上汽检测线</h3><p>上汽DSA：<code>D:\工作\software\Platforms_Using\Platforms2\SocketOpraLib</code></p>
<p>其中包括上汽郑州FAS、360；上汽宁德现场程序。</p>
<h2 id="五菱"><a href="#五菱" class="headerlink" title="五菱"></a>五菱</h2><p>五菱ABS：<code>D:\工作\software\Platforms_Using\PlatABS\RBABS_SGMW</code></p>
<p>20191028新增宝骏现场更改保持在线3E 00为3E 80备份，目前调试未成功，采用备份程序</p>
<p>程序包含所有五菱现场最新的ABS程序</p>
<h2 id="东风"><a href="#东风" class="headerlink" title="东风"></a>东风</h2><h3 id="东风小康"><a href="#东风小康" class="headerlink" title="东风小康"></a>东风小康</h3><p>东风小康MES：<code>D:\工作\现场工作文件整理\东风小康\319015-201905\Platforms2-正在使用\SpeciallNeed</code></p>
<p>程序为东风小康现场最新MES程序，新增64字节车型识别</p>
<h3 id="东风乘用车-武汉"><a href="#东风乘用车-武汉" class="headerlink" title="东风乘用车(武汉)"></a>东风乘用车(武汉)</h3><p><code>D:\工作\现场工作文件整理\武汉东风乘用车\Platforms2-武汉东风乘用车</code></p>
<p>其中SpecialNeed中包含FAS工位AEB相关提示，CanCmdOpraLib包含FAS相关安全算法<br>ABS：<code>D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS\RBABS_DF</code></p>
<h2 id="合众"><a href="#合众" class="headerlink" title="合众"></a>合众</h2><p><code>D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS</code><br>201909新增EP30ESC</p>
<h2 id="比亚迪"><a href="#比亚迪" class="headerlink" title="比亚迪"></a>比亚迪</h2><p><code>D:\BaiduNetdiskDownload\GX\Platforms2\Platforms2\CanCmdOpraLib</code><br>201904增加联电供应商的转速控制</p>
<h2 id="程序合并进行中"><a href="#程序合并进行中" class="headerlink" title="程序合并进行中"></a>程序合并进行中</h2><h3 id="PlatABS"><a href="#PlatABS" class="headerlink" title="PlatABS"></a>PlatABS</h3><p>最新程序在<code>D:\BaiduNetdiskDownload\GX\Platforms2\PlatABS</code>中<br>20191120将五菱ABS更新至本工程代码中，待测试，其中包含齿讯学习</p>
<h4 id="ABS"><a href="#ABS" class="headerlink" title="ABS"></a>ABS</h4><p>合众<br>东风乘用车</p>
<h4 id="国六"><a href="#国六" class="headerlink" title="国六"></a>国六</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">现场</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>上汽临港|MES<br>上汽名爵|MES<br>上汽宁德|MES<br>上汽郑州一期|MES<br>上汽无锡大通|MES、车型信息获取、ZTS匹配<br>福特杭州|MES、QLS、双怠速转速控制<br>福特重庆|MES、QLS、双怠速转速控制<br>福特哈尔滨|MES、QLS、双怠速转速控制<br>菲亚特长沙|MES</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>北汽莱西FAS</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库链接字符串汇总</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%93%BE%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B1%87%E6%80%BB.html</url>
    <content><![CDATA[<p>链接字符串：<br><a href="https://www.connectionstrings.com/">https://www.connectionstrings.com/</a><br><span id="more"></span></p>
<h2 id="通用示例"><a href="#通用示例" class="headerlink" title="通用示例"></a>通用示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> ConnStr_EOLDDATA = <span class="string">&quot;$System.Data.SqlClient$Data Source=.;Initial Catalog=EOLDATA;Persist Security Info=True;User ID=sa;Password=321&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> SqlLoginTable = <span class="built_in">string</span>.Format(<span class="string">&quot;select * from [登录表] where [VIN] = &#x27;&#123;0&#125;&#x27;&quot;</span>, textBoxVIN.Text);</span><br><span class="line">DbDataAdapter AdapLogin = BConnString.CreateDataAdapter(SqlLoginTable, ConnStr_EOLDDATA);</span><br><span class="line">DataTable dtLogin = <span class="keyword">new</span> DataTable();</span><br><span class="line">AdapLogin.Fill(dtLogin);</span><br><span class="line">DataRow drLogin = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (dtLogin.Rows.Count &lt; <span class="number">1</span>)</span><br><span class="line">    drLogin = dtLogin.Rows.Add();</span><br><span class="line"><span class="keyword">else</span> drLogin = dtLogin.Rows[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//drLogin = dtLogin.Rows.Count &lt; 1 ? dtLogin.Rows.Add() : dtLogin.Rows[0];</span></span><br></pre></td></tr></table></figure>
<h2 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h2><p>链接字符串：<code>$System.Data.OleDb$Provider=Microsoft.Jet.OLEDB.4.0;Data Source=LoginSet.mdb</code><br>SQL字符串：<code>select * from [Table] where ZTS = &#39;zts&#39;</code></p>
<p><code>string strSql = string.Format(&quot;select * from FinalData where DateTime&gt;#&#123;0&#125;#&quot;, dTime);</code></p>
<h2 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h2><p>链接字符串：<code>$Npgsql$Database=LocalDB;Host=LocalHost;Port=5432;Username=postgres;Password=123</code><br>SQL字符串：<code>select * from [Table] where VIN=&#39;vin&#39; order by ID desc</code><br><code>string strLocalSql = string.Format(&quot;select * from [四轮表] order by [测试时间] desc limit 1&quot;);</code></p>
<h3 id="判断字段中包含某字符串所在位"><a href="#判断字段中包含某字符串所在位" class="headerlink" title="判断字段中包含某字符串所在位"></a>判断字段中包含某字符串所在位</h3><p><code>select * from [车型库] where POSITION(&#39;&#123;0&#125;&#39; in [VIN])&gt;0</code><br>eg:<code>postion(&#39;abc&#39; in &#39;123abc123&#39;)</code>—-&gt;4</p>
<h3 id="时间判断"><a href="#时间判断" class="headerlink" title="时间判断"></a>时间判断</h3><p><code>SELECT * FROM [FAS表] where [VIN]=&#39;&#123;0&#125;&#39; and to_char([测试时间],&#39;yyyy-MM-dd HH24:MI:ss&#39;)=&#39;&#123;1&#125;&#39; limit 1</code></p>
<h2 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h2><p>SQLServer字符串：<code>$System.Data.SqlClient$Data Source=EOLSERVICE;Initial Catalog=EOLData;Persist Security Info=True;User ID=sa;Password=321</code><br>SQL字符串：<code>select * from [Table] where VIN=&#39;vin&#39; order by ID desc</code></p>
<h3 id="SQLServer判断字段中包含某字符串所在位"><a href="#SQLServer判断字段中包含某字符串所在位" class="headerlink" title="SQLServer判断字段中包含某字符串所在位"></a>SQLServer判断字段中包含某字符串所在位</h3><p><code>select * from [车型库] where charindex(&#39;&#123;0&#125;&#39;,[VIN])&gt;0</code></p>
<h3 id="选择左侧为某字符串"><a href="#选择左侧为某字符串" class="headerlink" title="选择左侧为某字符串"></a>选择左侧为某字符串</h3><p><code>select * from [车型库] where left([VIN],3)=&#39;LZW&#39;</code></p>
<h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>不需要借助客户端可直接访问数据库<br><code>string Ora_ConnStr = &quot;User ID=jcxuser;Password=jcxuser;Data Source =(DESCRIPTION = (ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.111.89)(PORT = 1521))) (CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = yadata)))&quot;;</code></p>
<p>需要安装Oracle客户端并配置链接方可访问<br><code>string Ora_ConnStrOLEDB = &quot;Provider=OraOLEDB.Oracle;Data Source=yadata;Persist Security Info=True;Password=jcxuser;User ID=jcxuser&quot;;</code><br>有时间对比这两种链接字符串的区别，下面可访问但访问数据不全<br><code>string Ora_ConnStr = &quot;$System.Data.OleDb$Provider=MSDAORA;Data Source=yadata;Persist Security Info=True;Password=jcxuser;User ID=jcxuser&quot;;</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">OracleConnection conn = <span class="keyword">new</span> OracleConnection(Ora_ConnStr);</span><br><span class="line">conn.Open();</span><br><span class="line"><span class="built_in">string</span> OracleSqlStr = <span class="built_in">string</span>.Format(<span class="string">&quot;select * from &#123;0&#125; where SN =  &#x27;&#123;1&#125;&#x27;&quot;</span>, Ora_tableForVSN, sVIN);</span><br><span class="line">DataTable dtVSN = <span class="keyword">new</span> DataTable();</span><br><span class="line">OracleDataAdapter odaVSN = <span class="keyword">new</span> OracleDataAdapter(OracleSqlStr,  Ora_ConnStr);</span><br><span class="line">odaVSN.Fill(dtVSN);</span><br><span class="line">conn.Close();</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">OleDbConnection conn = <span class="keyword">new</span> OleDbConnection(Ora_ConnStrOLEDB);</span><br><span class="line">conn.Open();</span><br><span class="line">OleDbCommand cmdVSN = conn.CreateCommand();</span><br><span class="line">cmdVSN.CommandText = <span class="built_in">string</span>.Format(<span class="string">&quot;select * from &#123;0&#125; where SN = &#x27;&#123;1&#125;&#x27;&quot;</span>, Ora_tableForVSN, sVIN);</span><br><span class="line">DataTable dtVSN = <span class="keyword">new</span> DataTable();</span><br><span class="line">OleDbDataAdapter odaVSN = <span class="keyword">new</span> OleDbDataAdapter();</span><br><span class="line">odaVSN.SelectCommand = cmdVSN;</span><br><span class="line">odaVSN.Fill(dtVSN);</span><br><span class="line">conn.Close();</span><br></pre></td></tr></table></figure>
<p>SQLServer向Oracle数据库传数据</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Oracle.ManagedDataAccess;</span><br><span class="line"></span><br><span class="line">OracleConnection cnn = <span class="keyword">new</span> OracleConnection(mesConnStr);</span><br><span class="line">cnn.Open();</span><br><span class="line">DataTable dtMES = <span class="keyword">new</span> DataTable();</span><br><span class="line">OracleDataAdapter oda = <span class="keyword">new</span> OracleDataAdapter(oraSql, mesConnStr);</span><br><span class="line">OracleCommandBuilder ocb = <span class="keyword">new</span> OracleCommandBuilder(oda);</span><br><span class="line">oda.SelectCommand.CommandText = oraSql;</span><br><span class="line">oda.InsertCommand = ocb.GetInsertCommand();</span><br><span class="line">oda.Fill(dtMES);</span><br><span class="line">cnn.Close();</span><br><span class="line"></span><br><span class="line">DataRow drMES = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (dtMES.Rows.Count &gt; <span class="number">0</span>)</span><br><span class="line">    drMES = dtMES.Rows[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> drMES = dtMES.Rows.Add();</span><br><span class="line"><span class="keyword">foreach</span> (DataColumn dcEOL <span class="keyword">in</span> upload.Columns)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (dtMES.Columns.Contains(dcEOL.ColumnName))</span><br><span class="line">        drMES[dcEOL.ColumnName] = drEOL[dcEOL.ColumnName];</span><br><span class="line">&#125;</span><br><span class="line">oda.Update(dtMES);</span><br><span class="line">dtMES.AcceptChanges();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建数据库表</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateTable</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SQLiteConnection cn = <span class="keyword">new</span> SQLiteConnection(connStr);<span class="comment">//建立数据库连接</span></span><br><span class="line">    <span class="keyword">if</span> (cn.State!= System.Data.ConnectionState.Open)</span><br><span class="line">    &#123;</span><br><span class="line">        cn.Open();<span class="comment">//打开数据库</span></span><br><span class="line">        SQLiteCommand cmd = <span class="keyword">new</span> SQLiteCommand();</span><br><span class="line">        cmd.Connection = cn;<span class="comment">//把 SQLiteCommand的 Connection和SQLiteConnection 联系起来</span></span><br><span class="line">        cmd.CommandText = <span class="string">&quot;CREATE TABLE IF NOT EXISTS t1(id varchar(4),score int)&quot;</span>;<span class="comment">//输入SQL语句</span></span><br><span class="line">        cmd.ExecuteNonQuery();<span class="comment">//调用此方法运行</span></span><br><span class="line">    &#125;</span><br><span class="line">    cn.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!File.Exists(dbPath))</span><br><span class="line">    SQLiteConnection.CreateFile(dbPath);</span><br><span class="line">SQLiteConnection sqliteConn = <span class="keyword">new</span> SQLiteConnection(<span class="string">&quot;data source=&quot;</span> + dbPath);</span><br><span class="line"> <span class="keyword">if</span> (sqliteConn.State != System.Data.ConnectionState.Open)</span><br><span class="line"> &#123;</span><br><span class="line">     sqliteConn.Open();</span><br><span class="line">     SQLiteCommand cmd = <span class="keyword">new</span> SQLiteCommand();</span><br><span class="line">     cmd.Connection = sqliteConn;</span><br><span class="line">     <span class="comment">//cmd.CommandText = &quot;DROP TABLE IF EXISTS t1&quot;;</span></span><br><span class="line">     <span class="comment">//cmd.CommandText = &quot;CREATE TABLE &quot; + &quot;FirstTabel&quot; + &quot;(Name varchar,Team varchar, Number varchar)&quot;;</span></span><br><span class="line">     <span class="comment">//cmd.CommandText = &quot;INSERT INTO FirstTabel VALUES(&#x27;Kobe&#x27;,&#x27;Lakers&#x27;,&#x27;24&#x27;)&quot;;</span></span><br><span class="line">     <span class="comment">//cmd.CommandText = &quot;REPLACE INTO t1(id,age) VALUES(@id,@age)&quot;;</span></span><br><span class="line">     <span class="comment">//cmd.CommandText = &quot;UPDATE t1 SET id=@id,age=@age WHERE id=&#x27;0123456789&#x27;&quot;;</span></span><br><span class="line">     <span class="comment">//cmd.CommandText = &quot;DELETE FROM t1 WHERE id=&#x27;99999&#x27;&quot;;</span></span><br><span class="line">     <span class="comment">//cmd.CommandText = &quot;ALTER TABLE t1 ADD COLUMN age int&quot;;</span></span><br><span class="line">     cmd.CommandText = <span class="string">&quot;insert into FirstTabel(Name,Team,Number) values(@name,@team,@number)&quot;</span>;</span><br><span class="line">     cmd.Parameters.AddWithValue(<span class="string">&quot;@name&quot;</span>, <span class="string">&quot;Kobe&quot;</span>);</span><br><span class="line">     cmd.Parameters.AddWithValue(<span class="string">&quot;@Team&quot;</span>, <span class="string">&quot;Lakers&quot;</span>);</span><br><span class="line">     cmd.Parameters.AddWithValue(<span class="string">&quot;@Number&quot;</span>, <span class="string">&quot;24&quot;</span>);</span><br><span class="line">     cmd.ExecuteNonQuery();</span><br><span class="line"> &#125;</span><br><span class="line"> sqliteConn.Close();</span><br><span class="line"><span class="comment">//常用</span></span><br><span class="line">SQLiteConnection cn = <span class="keyword">new</span> SQLiteConnection(connStr);</span><br><span class="line">cn.Open();</span><br><span class="line">SQLiteCommand cmd = cn.CreateCommand();</span><br><span class="line">cmd.CommandText= <span class="built_in">string</span>.Format(<span class="string">&quot;select * from &#123;0&#125; where SN = &#x27;&#123;1&#125;&#x27;&quot;</span>, Ora_tableForVSN, sVIN);</span><br><span class="line"><span class="comment">//方法一：用DataAdapter和DataTable类，调用方法为using System.Data</span></span><br><span class="line">SQLiteDataAdapter adapter = <span class="keyword">new</span> SQLiteDataAdapter(cmd);</span><br><span class="line">DataTable table = <span class="keyword">new</span> DataTable();</span><br><span class="line">adapter.Fill(table);</span><br><span class="line">cn.Close();</span><br><span class="line"><span class="comment">//方法二：用DataReader，这个效率高些</span></span><br><span class="line">SQLiteDataReader reader = cmd.ExecuteReader();</span><br></pre></td></tr></table></figure>
<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> MySql.Data.MySqlClient;</span><br><span class="line"></span><br><span class="line">MySqlConnection myconn = <span class="keyword">new</span> MySqlConnection(<span class="string">&quot;server=10.102.62.26;database=cartest_reporter;user id=root;password=root;Charset=utf8&quot;</span>);</span><br><span class="line">myconn.Open();</span><br><span class="line">MySqlCommand mycom = myconn.CreateCommand();</span><br><span class="line">mycom.CommandText = <span class="string">&quot;SELECT *FROM student1&quot;</span>;</span><br><span class="line">MySqlDataAdapter adap = <span class="keyword">new</span> MySqlDataAdapter(mycom);</span><br><span class="line">MySqlCommandBuilder mysqlcb = <span class="keyword">new</span> MySqlCommandBuilder(adap);<span class="comment">// insert</span></span><br><span class="line">DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">adap.Fill(dt);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*string MES_ConnStr = @&quot;server = 10.23.1.67;Uid = testams;Pwd = test@ams;database= test;CharSet=utf8&quot;;</span></span><br><span class="line"><span class="comment">MySqlConnection conn = new MySqlConnection(MES_ConnStr);</span></span><br><span class="line"><span class="comment">if (conn.State != ConnectionState.Open)</span></span><br><span class="line"><span class="comment">    conn.Open();</span></span><br><span class="line"><span class="comment">strOra_Sql = string.Format(&quot;select * from &#123;0&#125;&quot;, MESTableName);</span></span><br><span class="line"><span class="comment">MySqlDataAdapter sdap = new MySqlDataAdapter();</span></span><br><span class="line"><span class="comment">MySqlCommand mycmdFind = new MySqlCommand(strOra_Sql, conn);</span></span><br><span class="line"><span class="comment">MySqlCommandBuilder cb = new MySqlCommandBuilder(sdap);</span></span><br><span class="line"><span class="comment">DataTable dt = new DataTable();</span></span><br><span class="line"><span class="comment">sdap.SelectCommand = mycmdFind;</span></span><br><span class="line"><span class="comment">sdap.Fill(dt);</span></span><br><span class="line"><span class="comment">DataRow dr = dt.NewRow();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">foreach (string s in ListMap.Keys)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    dr[s] = drEOL[ListMap[s]];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">dt.Rows.Add(dr);</span></span><br><span class="line"><span class="comment">sdap.Update(dt);</span></span><br><span class="line"><span class="comment">conn.Close();*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">OleDbConnection conn = <span class="keyword">new</span> OleDbConnection(strConn);</span><br><span class="line"><span class="built_in">string</span> sql = <span class="built_in">string</span>.Format(<span class="string">&quot;select * from [&#123;0&#125;$] where [VIN] like &#x27;%&#123;1&#125;%&#x27;&quot;</span>,</span><br><span class="line">    sourceTableName, VINString);</span><br><span class="line">OleDbDataAdapter oada = <span class="keyword">new</span> OleDbDataAdapter(sql, conn);</span><br><span class="line">oada.Fill(ds);</span><br><span class="line"><span class="keyword">foreach</span> (DataRow drr <span class="keyword">in</span> ds.Tables[<span class="number">0</span>].Rows)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>CSharp</tag>
        <tag>链接字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>现场软件备份路径</title>
    <url>/%E7%8E%B0%E5%9C%BA%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD%E8%B7%AF%E5%BE%84.html</url>
    <content><![CDATA[<p>网盘中软件工程下有相应文件夹的上传在相应文件夹中，没有的上传在对应项目文件夹中，后期会提醒Dean在软件工程中新建相应文件夹。<br><code>Z:\4-软件共享John\软件工程</code><br><span id="more"></span></p>
<h3 id="网盘地址"><a href="#网盘地址" class="headerlink" title="网盘地址"></a>网盘地址</h3><p>内网：<a href="http://192.168.1.80:5000/">http://192.168.1.80:5000/</a><br>外网：<a href="https://bbknick.synology.me:5001/">https://bbknick.synology.me:5001/</a></p>
<h2 id="北汽"><a href="#北汽" class="headerlink" title="北汽"></a>北汽</h2><h4 id="莱西被动式ACC"><a href="#莱西被动式ACC" class="headerlink" title="莱西被动式ACC"></a>莱西被动式ACC</h4><h5 id="更新时间：20190806"><a href="#更新时间：20190806" class="headerlink" title="更新时间：20190806 "></a><font color="#FF0000">更新时间：20190806 </font></h5><p><code>Z:\6-项目管理Jason\2018\218039 北汽新能源莱西工厂一套驾驶辅助标定设备项目-Jones\17-现场设备调试程序</code></p>
<h4 id="北汽昆明"><a href="#北汽昆明" class="headerlink" title="北汽昆明"></a>北汽昆明</h4><h5 id="更新时间：20190806-1"><a href="#更新时间：20190806-1" class="headerlink" title="更新时间：20190806 "></a><font color="#FF0000">更新时间：20190806 </font></h5><p><code>Z:\6-项目管理Jason\2017\117314 北汽新能源汽车工程技术中心（昆明）检测线项目-Jones\17-现场设备调试程序\设备程序</code></p>
<h2 id="众泰"><a href="#众泰" class="headerlink" title="众泰"></a>众泰</h2><h4 id="贵港腾骏"><a href="#贵港腾骏" class="headerlink" title="贵港腾骏"></a>贵港腾骏</h4><h5 id="更新时间：20190806-2"><a href="#更新时间：20190806-2" class="headerlink" title="更新时间：20190806 "></a><font color="#FF0000">更新时间：20190806 </font></h5><p><code>Z:\4-软件共享John\软件工程\腾骏\腾骏贵港</code></p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>现场软件备份</tag>
      </tags>
  </entry>
  <entry>
    <title>现场软件安装包下载</title>
    <url>/%E7%8E%B0%E5%9C%BA%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD.html</url>
    <content><![CDATA[<h4 id="百度网盘下载推荐用ENFI下载器"><a href="#百度网盘下载推荐用ENFI下载器" class="headerlink" title="百度网盘下载推荐用ENFI下载器"></a>百度网盘下载推荐用ENFI下载器</h4><p>链接：<a href="https://www.enfi.cloud/#/index">https://www.enfi.cloud/#/index</a></p>
<h4 id="串口调试助手"><a href="#串口调试助手" class="headerlink" title="串口调试助手"></a>串口调试助手</h4><p>链接：<a href="https://pan.baidu.com/s/1KAisgybEesC8fMTwJ-oK3w">https://pan.baidu.com/s/1KAisgybEesC8fMTwJ-oK3w</a><br>提取码：au8d</p>
<h4 id="Socktools"><a href="#Socktools" class="headerlink" title="Socktools"></a>Socktools</h4><p>链接：<a href="https://pan.baidu.com/s/1lXWZWLjt9LE4xxCjK873-Q">https://pan.baidu.com/s/1lXWZWLjt9LE4xxCjK873-Q</a><br>提取码：v5qn</p>
<h4 id="NetFramework4-0"><a href="#NetFramework4-0" class="headerlink" title=".NetFramework4.0"></a>.NetFramework4.0</h4><p>链接：<a href="https://pan.baidu.com/s/1Hwdt4rEToEK4Ao4ljvmURA">https://pan.baidu.com/s/1Hwdt4rEToEK4Ao4ljvmURA</a><br>提取码：wlfc</p>
<h4 id="虚拟串口"><a href="#虚拟串口" class="headerlink" title="虚拟串口"></a>虚拟串口</h4><p>链接：<a href="https://pan.baidu.com/s/1FrqtaKrp74EPmyvVqNOu6g">https://pan.baidu.com/s/1FrqtaKrp74EPmyvVqNOu6g</a><br>提取码：wkv3</p>
<h4 id="VisualStudio2010"><a href="#VisualStudio2010" class="headerlink" title="VisualStudio2010"></a>VisualStudio2010</h4><p>链接：<a href="https://pan.baidu.com/s/1Z-EUIWWsJmUN22KS8QNKcg">https://pan.baidu.com/s/1Z-EUIWWsJmUN22KS8QNKcg</a><br>提取码：rwpn</p>
<h4 id="SQLServer2008"><a href="#SQLServer2008" class="headerlink" title="SQLServer2008"></a>SQLServer2008</h4><p>链接：<a href="https://pan.baidu.com/s/15hGavjba8ewaFxlyd_K-dw">https://pan.baidu.com/s/15hGavjba8ewaFxlyd_K-dw</a><br>提取码：xdxa</p>
<h4 id="KepServer5-2"><a href="#KepServer5-2" class="headerlink" title="KepServer5.2"></a>KepServer5.2</h4><p>链接：<a href="https://pan.baidu.com/s/1zmX5Myqts5zzG3DTjairdg">https://pan.baidu.com/s/1zmX5Myqts5zzG3DTjairdg</a><br>提取码：7dwx</p>
<h4 id="Postgresql9-5-3"><a href="#Postgresql9-5-3" class="headerlink" title="Postgresql9.5.3"></a>Postgresql9.5.3</h4><p>链接：<a href="https://pan.baidu.com/s/1NA4aNTu9CGmAEYd9aeo-Gg">https://pan.baidu.com/s/1NA4aNTu9CGmAEYd9aeo-Gg</a><br>提取码：l9h6</p>
<h4 id="Setup-Npgsql-2-2-3-0-r2-net40"><a href="#Setup-Npgsql-2-2-3-0-r2-net40" class="headerlink" title="Setup_Npgsql-2.2.3.0-r2-net40"></a>Setup_Npgsql-2.2.3.0-r2-net40</h4><p>链接：<a href="https://pan.baidu.com/s/1wLBTi8vgJUCvlqO8HvorOQ">https://pan.baidu.com/s/1wLBTi8vgJUCvlqO8HvorOQ</a><br>提取码：yv4h</p>
<h4 id="Orical-10g-Client"><a href="#Orical-10g-Client" class="headerlink" title="Orical 10g Client"></a>Orical 10g Client</h4><p>链接：<a href="https://pan.baidu.com/s/1btHhUl-ataDjq6J7KAWfuA">https://pan.baidu.com/s/1btHhUl-ataDjq6J7KAWfuA</a><br>提取码：ks71</p>
<h4 id="psqlodbc-x86"><a href="#psqlodbc-x86" class="headerlink" title="psqlodbc_x86"></a>psqlodbc_x86</h4><p>链接：<a href="https://pan.baidu.com/s/19FKNrVT4CxO5yHyvhVayOw">https://pan.baidu.com/s/19FKNrVT4CxO5yHyvhVayOw</a><br>提取码：9yud</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>现场问题整理</title>
    <url>/%E7%8E%B0%E5%9C%BA%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[<h2 id="通讯测试"><a href="#通讯测试" class="headerlink" title="通讯测试"></a>通讯测试</h2><p>串口测试车辆通讯问题<br>SendID：<code>0730</code>；RecvID：<code>0738</code><br><code>33 33 07 38 FF FF 88 88</code> 设置滤波 只接收ID为<code>0738</code>的指令<br><code>55 55 07 30 02 10 03 00 00 00 00 00 88 88</code> 发送指令 发送ID为<code>0730</code><br>其中：<font color="#FF0000"> 02 10 03 00 00 00 00 00 </font> 为CAN指令，第一位为长度位。</p>
<h2 id="四轮大灯"><a href="#四轮大灯" class="headerlink" title="四轮大灯"></a>四轮大灯</h2><h3 id="四轮设备中文乱码导致数据上传失败"><a href="#四轮设备中文乱码导致数据上传失败" class="headerlink" title="四轮设备中文乱码导致数据上传失败"></a>四轮设备中文乱码导致数据上传失败</h3><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><blockquote>
<p>更改时间、区域为China 详情请咨询 <a href="mailto:coulson@bbkco.com.cn">Coulsonxia</a></p>
<h3 id="宝骏现场大灯数据单独上传"><a href="#宝骏现场大灯数据单独上传" class="headerlink" title="宝骏现场大灯数据单独上传"></a>宝骏现场大灯数据单独上传</h3><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><p>流程中新建TCPClient用于接收大灯通讯<br>启动大灯需要发送车型信息，格式为：{0x02}{车辆信息_ToHLA_ZTS};{车辆信息_ToHLA_VIN}{0x0D}{0x0A}<br>接收解析并保存大灯数据</p>
</blockquote>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>现场问题</tag>
      </tags>
  </entry>
  <entry>
    <title>诊断指令说明--OBD模块</title>
    <url>/%E8%AF%8A%E6%96%AD%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E-OBD%E6%A8%A1%E5%9D%97.html</url>
    <content><![CDATA[<h2 id="通讯测试"><a href="#通讯测试" class="headerlink" title="通讯测试"></a>通讯测试</h2><p>串口测试车辆通讯问题<br>SendID：<code>0730</code>；RecvID：<code>0738</code><br><code>33 33 07 38 FF FF 88 88</code> 设置滤波 只接收ID为<code>0738</code>的指令<br><code>55 55 07 30 02 10 03 00 00 00 00 00 88 88</code> 发送指令 发送ID为<code>0730</code><br>其中：<font color="#FF0000"> 02 </font> <font color="#00FF00"> 10 03 </font> <font color="#000000"> 00 00 00 00 00 </font>为CAN指令，第一位为长度位。<br>为什么用55指令测试通讯：</p>
<blockquote>
<p>55指令中不包含CAN通讯等待的时间参数，不会出现第三版协议因超时时间较短而导致收不到车辆回复。</p>
</blockquote>
<h2 id="第三版协议指令说明"><a href="#第三版协议指令说明" class="headerlink" title="第三版协议指令说明"></a>第三版协议指令说明</h2><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><p>F0 F0<br>XX XX// 数据长度<br>XX //指令类型:<br>&emsp;&emsp;10: CAN数据（针对ISO15765协议而定）<br>&emsp;&emsp;13: 设置CAN通信滤波ID<br>&emsp;&emsp;14: 只发送指定长度(小于等于8)CAN数据<br>&emsp;&emsp;15:设置CAN通信波特率及标准帧拓展帧<br>&emsp;&emsp;20 :K线数据<br>&emsp;&emsp;25: 设置K线初始化波特率及通信波特率<br>&emsp;&emsp;05: 设置超时时间 CAN通讯短等待回复时间，默认100ms，长等待时间，默认5000ms<br>XX XX XX XX //本机ID<br>XX XX XX XX //目标ID<br>XX n…//数据<br>FF//结尾</p>
<h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><p>0F 0F<br>XX XX// 数据长度<br>XX //指令类型:<br>&emsp;&emsp;10: CAN数据（针对ISO15765协议而定）<br>&emsp;&emsp;13: 设置CAN通信滤波ID<br>&emsp;&emsp;14: 接收到已设置了CAN通信滤波ID的CAN数据<br>&emsp;&emsp;15:设置CAN通信波特率及标准帧拓展帧<br>&emsp;&emsp;20: K线数据<br>&emsp;&emsp;25: 设置K线初始化波特率及通信波特率<br>&emsp;&emsp;05: 设置通信响应超时时间成功的响应指令<br>&emsp;&emsp;7F: 收到错误回复，比如超时、数据格式错误等<br>XX XX XX XX //本机ID<br>XX XX XX XX //目标ID<br>XX n…//数据<br>FF//结尾</p>
<p>示例：<br>发送：<code>F0 F0 00 0C 10 00 00 07 20 00 00 07 30 10 03 FF</code><br>接收：<code>0F 0F 00 10 10 00 00 07 20 00 00 07 30 50 03 00 32 01 F4 FF</code></p>
<h3 id="设置指定滤波ID及读取超时时间-0x12"><a href="#设置指定滤波ID及读取超时时间-0x12" class="headerlink" title="设置指定滤波ID及读取超时时间(0x12)"></a>设置指定滤波ID及读取超时时间(0x12)</h3><p>发送：<code>F0 F0 00 07 12 00 00 07 30 14 FF</code><br>接收：若CAN总线上指定滤波ID(<code>00 00 07 20</code>)对应的数据及超时时间（20*10=200ms），则返回：<br><code>0F 0F 00 0E 12 00 00 07 30 00 01 02 03 04 05 06 07 FF</code> //(<code>00 00 07 30</code> 目标ID)<br>否则返回超时提示；</p>
<h3 id="设置滤波ID-0x13"><a href="#设置滤波ID-0x13" class="headerlink" title="设置滤波ID(0x13)"></a>设置滤波ID(0x13)</h3><p>发送：<code>F0 F0 00 0A 13 00 00 07 20 FF FF FF FF FF</code><br>接收：若CAN总线上有设置的ID对应的数据，则返回：<br><code>0F 0F 00 0E 14 00 00 07 30 50 03 00 32 01 F4 FF</code>//(<code>00 00 07 30</code> 目标ID)<br>否则无返回；</p>
<h3 id="只发送单帧数据-0x14"><a href="#只发送单帧数据-0x14" class="headerlink" title="只发送单帧数据(0x14)"></a>只发送单帧数据(0x14)</h3><p>发送：<code>F0 F0 00 0E 14 00 00 07 20 00 00 00 00 12 34 56 78 FF</code><br>发送的目标ID: <code>00 00 07 20</code>  发送的CAN数据: <code>12 34 56 78</code></p>
<h3 id="设置波特率及标准帧拓展帧（0x15）"><a href="#设置波特率及标准帧拓展帧（0x15）" class="headerlink" title="设置波特率及标准帧拓展帧（0x15）"></a>设置波特率及标准帧拓展帧（0x15）</h3><p>第6字节及第7字节表示设置波特率大小，单位kbps<br>第8字节及第9字节表示设置标准帧或拓展帧：<code>00 00</code> 标准帧 <code>00 01</code> 拓展帧<br>接收数据01代表设置成功，无返回或者返回其他字节数目则设置失败，请注意检测数据格式。<br>比如<br>发送：<code>F0 F0 00 06 15 01 F4 00 01 FF</code>//设置波特率500K，拓展帧<br>接收：<code>0F 0F 00 03 15 01 FF</code>//设置成功</p>
<h3 id="设置波特率及标准帧拓展帧，无返回确认指令（针对0x15）-0x16"><a href="#设置波特率及标准帧拓展帧，无返回确认指令（针对0x15）-0x16" class="headerlink" title="设置波特率及标准帧拓展帧，无返回确认指令（针对0x15）(0x16)"></a>设置波特率及标准帧拓展帧，无返回确认指令（针对0x15）(0x16)</h3><p>第6字节及第7字节表示设置波特率大小，单位kbps<br>第8字节及第9字节表示设置标准帧或拓展帧：<code>00 00</code> 标准帧 <code>00 01</code> 拓展帧<br>设置成功与否，都不返回数据<br>发送：<code>F0 F0 00 06 16 01 F4 00 01 FF</code>//设置波特率500K，拓展帧<br>接收：无</p>
<h3 id="K-Line设置初始波特率及正常通讯波特率（0x25）"><a href="#K-Line设置初始波特率及正常通讯波特率（0x25）" class="headerlink" title="K-Line设置初始波特率及正常通讯波特率（0x25）"></a>K-Line设置初始波特率及正常通讯波特率（0x25）</h3><p>第6字节及第7字节表示设置初始波特率（单位：bps），默认200bps<br>第8字节及第9字节表示设置正常通讯波特率（单位：bps），默认10400bps<br>接收数据01代表设置成功，无返回或者返回其他字节数目则设置失败，请注意检测数据格式。</p>
<blockquote>
<p>发送：<code>F0 F0 00 06 25 00 C8 28 A0 FF</code>//设置波初始波特率200bps及正常通讯波特率10400bps<br>接收：<code>0F 0F 00 03 25 01 FF</code>//设置成功</p>
</blockquote>
<h3 id="K线指令（0x20）"><a href="#K线指令（0x20）" class="headerlink" title="K线指令（0x20）"></a>K线指令（0x20）</h3><p>发送：<code>F0 F0 00 08 20 80 28 F1 01 81 1b FF</code><br>接收：<code>0F 0F 00 0A 20 80 F1 28 03 C1 6B 8F 57 FF</code></p>
<h3 id="通讯错误的回复指令（0x7F）"><a href="#通讯错误的回复指令（0x7F）" class="headerlink" title="通讯错误的回复指令（0x7F）"></a>通讯错误的回复指令（0x7F）</h3><p><code>0F 0F 00 03 7F XX FF</code></p>
<h4 id="故障码说明"><a href="#故障码说明" class="headerlink" title="故障码说明"></a>故障码说明</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><code>XX</code>故障码(Hex)</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>00</code></td>
<td style="text-align:center">等待接收或延时发送</td>
</tr>
<tr>
<td style="text-align:center"><code>02</code></td>
<td style="text-align:center">发送单帧100ms超时未收到CAN数据</td>
</tr>
<tr>
<td style="text-align:center"><code>03</code></td>
<td style="text-align:center">5000ms超时提示</td>
</tr>
<tr>
<td style="text-align:center"><code>04</code></td>
<td style="text-align:center">接收多帧时，未收到数据100ms超时提示</td>
</tr>
<tr>
<td style="text-align:center"><code>05</code></td>
<td style="text-align:center">读取指定ID数据，超时提示</td>
</tr>
<tr>
<td style="text-align:center"><code>11</code></td>
<td style="text-align:center">接收多帧时未收到流控帧提示</td>
</tr>
<tr>
<td style="text-align:center"><code>12</code></td>
<td style="text-align:center">接收到的CAN数据长度大于7错误提示</td>
</tr>
<tr>
<td style="text-align:center"><code>13</code></td>
<td style="text-align:center">接收到未符合要求的数据类型</td>
</tr>
<tr>
<td style="text-align:center"><code>21</code></td>
<td style="text-align:center">发送Kline数据500ms超时未收到CAN数据</td>
</tr>
<tr>
<td style="text-align:center"><code>F2</code></td>
<td style="text-align:center">接收到PC数据不是以0xFF结尾</td>
</tr>
<tr>
<td style="text-align:center"><code>F1</code></td>
<td style="text-align:center">CAN数据超过4096个字节</td>
</tr>
<tr>
<td style="text-align:center"><code>2A</code></td>
<td style="text-align:center">K线初始化后未接收到”格式”字节</td>
</tr>
<tr>
<td style="text-align:center"><code>2B</code></td>
<td style="text-align:center">K线初始化后自反馈是未接收到指定长度K线数据</td>
</tr>
<tr>
<td style="text-align:center"><code>2C</code></td>
<td style="text-align:center">K线未接收到0x80字节</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>诊断指令</tag>
        <tag>CAN</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法说明</title>
    <url>/Markdown%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<p><center></center><br><a href="https://www.appinn.com/markdown/">参考</a><br><span id="more"></span></p>
<h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 ``标签。</p>
<p>如果你确实想要依赖 Markdown 来插入 ``标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 ，但是简单地「每个换行都转换为」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">This is an H1</span></span><br><span class="line"><span class="section">=============</span></span><br><span class="line">​</span><br><span class="line"><span class="section">This is an H2</span></span><br><span class="line"><span class="section">-------------</span></span><br></pre></td></tr></table></figure>
<p>任何数量的 = 和 - 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是 H1</span></span><br><span class="line">​</span><br><span class="line"><span class="section">## 这是 H2</span></span><br><span class="line">​</span><br><span class="line"><span class="section">###### 这是 H6</span></span><br></pre></td></tr></table></figure>
<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是 H1 #</span></span><br><span class="line">​</span><br><span class="line"><span class="section">## 这是 H2 ##</span></span><br><span class="line">​</span><br><span class="line"><span class="section">### 这是 H3 ######</span></span><br></pre></td></tr></table></figure>
<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br><span class="line">Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</span><br><span class="line"></span><br><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">​</span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>
<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></table></figure>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1.   这是第一行列表项。</span><br><span class="line">&gt; 2.   这是第二行列表项。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt; </span><br><span class="line">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</span><br></pre></td></tr></table></figure>
<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure></p>
<p>等同于：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure></p>
<p>也等同于：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure></p>
<p>有序列表则使用数字接着一个英文句点：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure></p>
<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;McHale&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Parish&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果你的列表标记写成：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">1.  McHale</span><br><span class="line">1.  Parish</span><br></pre></td></tr></table></figure></p>
<p>或甚至是：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. Bird</span><br><span class="line">1. McHale</span><br><span class="line">8. Parish</span><br></pre></td></tr></table></figure></p>
<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>但是如果你懒，那也行：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></p>
<p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 `` 标签包起来，举例来说：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Bird</span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure></p>
<p>会被转换为：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Magic&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>
<p>但是这个：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Bird</span><br><span class="line">​</span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure></p>
<p>会被转换为：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>
<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line">​</span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></p>
<p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line">​</span><br><span class="line">    This is the second paragraph in the list item. You&#x27;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line">​</span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure></p>
<p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line">​</span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure></p>
<p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line">​</span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure></p>
<p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<p><code>1986. What a great season.</code></p>
<p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<p><code>1986\. What a great season.</code></p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 和 标签来把代码区块包起来。</p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<p>这是一个普通段落：<br>​```<br>    这是一个代码区块。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 会转换成：</span><br></pre></td></tr></table></figure></p>
<p><p>这是一个普通段落：</p><br>​</p>
<p><pre><code>这是一个代码区块。
</code></pre><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</span><br></pre></td></tr></table></figure><br>Here is an example of AppleScript:<br>​<br>    tell application “Foo”<br>        beep<br>    end tell<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">会被转换为：</span><br></pre></td></tr></table></figure></p>
<p><p>Here is an example of AppleScript:</p><br>​</p>
<p><pre><code>tell application "Foo"
    beep
end tell
</code></pre><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</span><br><span class="line"></span><br><span class="line">在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</span><br></pre></td></tr></table></figure><br>    <div class="footer">
        &copy; 2004 Foo Corporation
    </div><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">会被转换为：</span><br></pre></td></tr></table></figure></p>
<p><pre><code>&lt;div class="footer"&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</span><br><span class="line"></span><br><span class="line">分隔线</span><br><span class="line">你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</span><br></pre></td></tr></table></figure></p>
<hr>
<p>​</p>
<hr>
<p>​</p>
<hr>
<p>​</p>
<hr>
<h2 id="​"><a href="#​" class="headerlink" title="​"></a>​</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 区段元素</span><br><span class="line">### 链接</span><br><span class="line">Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</span><br><span class="line"></span><br><span class="line">不管是哪一种，链接文字都是用 [方括号] 来标记。</span><br><span class="line"></span><br><span class="line">要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</span><br></pre></td></tr></table></figure>
<p>This is <a href="http://example.com/" title="Title">an example</a> inline link.<br>​<br><a href="http://example.net/">This link</a> has no title attribute.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">会产生：</span><br></pre></td></tr></table></figure></p>
<p><p>This is <a href="http://example.com/" title="Title">
an example</a> inline link.</p><br>​</p>
<p><p><a href="http://example.net/">This link</a> has no
title attribute.</p><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">如果你是要链接到同样主机的资源，你可以使用相对路径：</span><br></pre></td></tr></table></figure><br>See my <a href="/about/">About</a> page for details.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</span><br></pre></td></tr></table></figure><br>This is <a href="url/to/image" title="Optional title attribute">an example</a> reference-style link.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">你也可以选择性地在两个方括号中间加上一个空格：</span><br></pre></td></tr></table></figure><br>This is <a href="url/to/image" title="Optional title attribute">an example</a> reference-style link.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">链接内容定义的形式为：</span><br><span class="line"></span><br><span class="line">方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</span><br><span class="line">接着一个冒号</span><br><span class="line">接着一个以上的空格或制表符</span><br><span class="line">接着链接的网址</span><br><span class="line">选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</span><br><span class="line">下面这三种链接的定义都是相同：</span><br></pre></td></tr></table></figure>
<p><a href="http://example.com/" title="Optional Title Here">foo</a>: <a href="http://example.com/">http://example.com/</a>  ‘Optional Title Here’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</span><br><span class="line"></span><br><span class="line">链接网址也可以用方括号包起来：</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</span><br></pre></td></tr></table></figure>
<pre><code>&quot;Optional Title Here&quot;
</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</span><br><span class="line"></span><br><span class="line">链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</span><br></pre></td></tr></table></figure>
<p>[link text][a]<br>[link text][A]<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 &quot;Google&quot; 链接到 google.com，你可以简化成：</span><br></pre></td></tr></table></figure><br><a href="http://google.com/" title="Google">Google</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">然后定义链接内容：</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</span><br></pre></td></tr></table></figure>
<p>Visit <a href="http://daringfireball.net/">Daring Fireball</a> for more information.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后接着定义链接：</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</span><br><span class="line"></span><br><span class="line">下面是一个参考式链接的范例：</span><br></pre></td></tr></table></figure>
<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.<br>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">如果改成用链接名称的方式写：</span><br></pre></td></tr></table></figure>
<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.<br>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">上面两种写法都会产生下面的 HTML。</span><br></pre></td></tr></table></figure>
<p><p>I get 10 times more traffic from <a href="http://google.com/"
title="Google">Google</a> than from
<a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a>
or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</span><br></pre></td></tr></table></figure><br>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a><br>than from <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or<br><a href="http://search.msn.com/" title="MSN Search">MSN</a>.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</span><br><span class="line"></span><br><span class="line">使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</span><br><span class="line"></span><br><span class="line">## 强调</span><br><span class="line"></span><br><span class="line">Markdown 使用星号（`*`）和底线（`_`）作为标记强调字词的符号，被 `*` 或 `_` 包围的字词会被转成用 标签包围，用两个`*`或`_`包起来的话，则会被转成，例如：</span><br></pre></td></tr></table></figure><br><em>single asterisks</em><br>​<br>_single underscores_<br>​<br><strong>double asterisks</strong><br>​<br><strong>double underscores</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">会转成：</span><br></pre></td></tr></table></figure><br><em>single asterisks</em><br>​<br><em>single underscores</em><br>​<br><strong>double asterisks</strong><br>​<br><strong>double underscores</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</span><br><span class="line"></span><br><span class="line">强调也可以直接插在文字中间：</span><br></pre></td></tr></table></figure><br>un<em>frigging</em>believable<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">但是如果你的 `\*` 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</span><br><span class="line"></span><br><span class="line">如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</span><br></pre></td></tr></table></figure><br>*this text is surrounded by literal asterisks*<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">代码</span><br><span class="line">如果要标记一小段行内代码，你可以用反引号把它包起来（```），例如：</span><br></pre></td></tr></table></figure><br>Use the <code>printf()</code> function.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">会产生：</span><br></pre></td></tr></table></figure></p>
<p><p>Use the <code>printf()</code> function.</p><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</span><br><span class="line"></span><br><span class="line">``There is a literal backtick (`) here.``</span><br><span class="line">这段语法会产生：</span><br></pre></td></tr></table></figure></p>
<p><p><code>There is a literal backtick (`) here.</code></p><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</span><br></pre></td></tr></table></figure><br>A single backtick in a code span: <code>` </code><br>​<br>A backtick-delimited string in a code span: <code>`foo` </code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">会产生：</span><br></pre></td></tr></table></figure></p>
<p><p>A single backtick in a code span: <code>`</code></p><br>​</p>
<p><p>A backtick-delimited string in a code span: <code>`foo`</code></p><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</span><br></pre></td></tr></table></figure><br>Please don’t use any <code>&lt;blink&gt;</code> tags.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">转为：</span><br></pre></td></tr></table></figure></p>
<p><p>Please don't use any <code>&lt;blink&gt;</code> tags.</p><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">你也可以这样写：</span><br></pre></td></tr></table></figure><br><code>&amp;#8212;</code> is the decimal-encoded equivalent of <code>&amp;mdash;</code>.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">以产生：</span><br></pre></td></tr></table></figure></p>
<p><p><code>&amp;#8212;</code> is the decimal-encoded
equivalent of <code>&amp;mdash;</code>.</p><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">图片</span><br><span class="line">很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</span><br><span class="line"></span><br><span class="line">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</span><br><span class="line"></span><br><span class="line">行内式的图片语法看起来像是：</span><br></pre></td></tr></table></figure><br><img src="/path/to/img.jpg" alt="Alt text"><br>​<br><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">详细叙述如下：</span><br><span class="line"></span><br><span class="line">一个惊叹号 !</span><br><span class="line">接着一个方括号，里面放上图片的替代文字</span><br><span class="line">接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &#x27;title&#x27; 文字。</span><br><span class="line">参考式的图片语法则长得像这样：</span><br></pre></td></tr></table></figure><br><img src="url/to/image" alt="Alt text" title="Optional title attribute"><br>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `` 标签。</span><br><span class="line"></span><br><span class="line">## 其它</span><br><span class="line">### 自动链接</span><br><span class="line">Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</span><br></pre></td></tr></table></figure>
<p><a href="http://example.com/">http://example.com/</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 会转为：</span><br></pre></td></tr></table></figure><br><a href="http://example.com/">http://example.com/</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</span><br></pre></td></tr></table></figure><br><a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x61;&#x64;&#100;&#114;&#101;&#x73;&#115;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;">&#x61;&#x64;&#100;&#114;&#101;&#x73;&#115;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 会转成：</span><br></pre></td></tr></table></figure><br><a href="&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;
&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;
&#109;">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;<br>&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在浏览器里面，这段字串（其实是 `[address@example.com](mailto:address@example.com)`）会变成一个可以点击的「address@example.com」链接。</span><br><span class="line"></span><br><span class="line">（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</span><br><span class="line"></span><br><span class="line">### 反斜杠</span><br><span class="line">Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `` 标签），你可以在星号的前面加上反斜杠：</span><br><span class="line"></span><br><span class="line">`\*literal asterisks\*`</span><br><span class="line">Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</span><br></pre></td></tr></table></figure><br>\   反斜线<br>`   反引号</p>
<ul>
<li>星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li>
</ul>
<ul>
<li>加号</li>
</ul>
<ul>
<li>减号<br>.   英文句点<br>!   惊叹号<br>```</li>
</ul>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>BEP独立大灯数据接收</title>
    <url>/BEP%E7%8B%AC%E7%AB%8B%E5%A4%A7%E7%81%AF%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6.html</url>
    <content><![CDATA[<center></center>

<p>上位机软件通过TCP读取独立大灯测试数据，参考武汉日产现场。<br><span id="more"></span></p>
<h2 id="BEP大灯配置"><a href="#BEP大灯配置" class="headerlink" title="BEP大灯配置"></a>BEP大灯配置</h2><p>SoftWare Config—NCA/Host Comm Settings中<br>NCA Setting使能Use Results Config File<br>关闭Send HLA Tests To Run</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>NcaResults.xml<br>hoststring.xml</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp调用SQL存储过程</title>
    <url>/C-%E8%B0%83%E7%94%A8SQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<p><center></center><br>C# 执行SQLServer数据库中的存储过程，新增数据<br><span id="more"></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">存储过程名：SP_Check_Equipotential</span><br><span class="line">	参数：</span><br><span class="line">		<span class="variable">@Part2GNDInfo</span> <span class="type">varchar</span>(<span class="number">3000</span>),<span class="comment">--</span></span><br><span class="line">		<span class="variable">@Part2GND</span> <span class="type">decimal</span>(<span class="number">3</span>,<span class="number">2</span>),<span class="comment">--</span></span><br><span class="line">		<span class="variable">@Resultflag</span> <span class="type">int</span> output,<span class="comment">--1保存成功  0保存失败</span></span><br><span class="line">		<span class="variable">@ResultMessage</span> <span class="type">varchar</span>(<span class="number">4000</span>)output<span class="comment">--返回success 或 错误信息</span></span><br><span class="line">	返回值：</span><br><span class="line">		<span class="variable">@Resultflag</span> <span class="type">int</span> output,<span class="comment">--1保存成功  0保存失败</span></span><br><span class="line">		<span class="variable">@ResultMessage</span> <span class="type">varchar</span>(<span class="number">4000</span>)output<span class="comment">--返回success 或 错误信息</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SqlConnection DbConnection = <span class="keyword">new</span> SqlConnection(m_MESConnString);</span><br><span class="line">SqlCommand command = <span class="keyword">new</span> SqlCommand(<span class="string">&quot;SP_Check_Equipotential&quot;</span>, DbConnection);</span><br><span class="line">DbConnection.Open();</span><br><span class="line">InitCommand(<span class="keyword">ref</span> command);</span><br><span class="line">command.Parameters[<span class="string">&quot;@Part2GNDInfo&quot;</span>].Value = Part2GNDInfo;</span><br><span class="line">command.Parameters[<span class="string">&quot;@Part2GND&quot;</span>].Value = Convert.ToDecimal(mo2o(dr[<span class="string">&quot;步骤一最大值&quot;</span>],<span class="literal">true</span>));</span><br><span class="line">command.ExecuteNonQuery();</span><br><span class="line"><span class="built_in">int</span> result = command.Parameters[<span class="string">&quot;@Resultflag&quot;</span>].Value.zInt32();</span><br><span class="line"><span class="built_in">string</span> ResultMessage = command.Parameters[<span class="string">&quot;@ResultMessage&quot;</span>].Value.ToString();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitCommand</span>(<span class="params"><span class="keyword">ref</span> SqlCommand command</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    command.CommandType = CommandType.StoredProcedure;</span><br><span class="line">    command.Parameters.Add(<span class="string">&quot;@Part2GNDInfo&quot;</span>, SqlDbType.VarChar, <span class="number">3000</span>);</span><br><span class="line">    SqlParameter Part2GND = <span class="keyword">new</span> SqlParameter(<span class="string">&quot;@Part2GND&quot;</span>, SqlDbType.Decimal);</span><br><span class="line">    Part2GND.Precision = <span class="number">3</span>;</span><br><span class="line">    Part2GND.Scale = <span class="number">2</span>;</span><br><span class="line">    command.Parameters.Add(Part2GND);</span><br><span class="line">    command.Parameters.Add(<span class="string">&quot;@Resultflag&quot;</span>, SqlDbType.Int, <span class="number">1</span>);</span><br><span class="line">    command.Parameters[<span class="string">&quot;@Resultflag&quot;</span>].Direction = ParameterDirection.Output;</span><br><span class="line">    command.Parameters.Add(<span class="string">&quot;@ResultMessage&quot;</span>, SqlDbType.VarChar, <span class="number">4000</span>);</span><br><span class="line">    command.Parameters[<span class="string">&quot;@ResultMessage&quot;</span>].Direction = ParameterDirection.Output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title>220025西安比亚迪调试记录</title>
    <url>/220025%E8%A5%BF%E5%AE%89%E6%AF%94%E4%BA%9A%E8%BF%AA%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cab54abaa5758fa88617df8f1857a61dc3dde1cd1691ed465a72e93f54d6d90e">bc757a3e1e5515a6e8052921d028e7da2881d6371720cc02fc67bb4a01bee24fa4b2f847118dab6bf95789267cb2b58a82e67b22f0f4badbff789a641bb0847a39a2228541f253bbffda7781afdc741bd061fc848a225d04be616209ad4d827af1bd686c8e902bc718b4022ca5b991a8efb31c3efac63d814c33d731326b3f529418e19aa7349c976415f58f17f6caf5b0b7f462d2699acbbd0be87d80053281d179abe9a8e74ed3c0d5fb732e07fc5ecf1e0a18f0c803458904ce594cf1a8389cf16d22f9ffd026920c5ea939e6e0a56e7cd42f62f160c654de9c1da9325355344ce0e5deee00c6b379bdde3b3b5c69c966ba4cf1fce623dca30ea0e75956dd7d6e8c49dd8ac34e92fa2b58042cbebf891b673d7a7a01462357c890cbf826f6bb574d8e3f9238574d652dbd1fc932285a1684cc0cd43927fee585714e222936d8b152a3b67ea38dad25a94cb29e72fcb9d997b724ec425b3f737b4d990853aa93509602fa5b74a70a87b3f7127c8b7e4e0a2450cc48a2044700e38cb1fe877178e3f8a632ef13030ea51e384e6bad3b3de23b4e61e960f246a6030e7596a7b0370dc3c995312cbfddab8c9959ff16b08f5bf7b27509cf26f6320b0f14d0a33306e9c0ed980653e292b085605b908d72dc4f649d910ddac01f9db91a736f6be2e7d17adc9474e54d28fd591a3769ea350577abb399800e546944761edd919562f665389277d4c9d443694c9147a5f05e4f6c2b071f01f25734d2d948283128ab0264e1a229fed95abf31c01e573cf673528f0f8e25866d90861a2414de1efa9f5f48543178e38eefb60d90ddbbd7fc68379b0f0e2d5ad282d34293250006a0a317a7be80919977a1dc879b1987d1631f11a5262accfbc6c1a5da7a2dde5e5d4f4e8a692304f01bf9036e3b972fb009332fb3d7e4ed5f0567ba81b56fad35e3d5781a3db4ca23b41e359c95b11e9a00227d2a70f6acae9eb48725f080092b2bf5f166747b29768ea1ae419af669269bb371e4126c2edadaa856f95983040e44cdb8eb025d11c408cd681fc4fea932e283038dd82e631e6ac22e795901af37af883787758d1bd2077409c1306ac12c5f77d07bc81a397302c25422f549ab6441c803e3ab97f9bae48e1cd599dd7bf9f0ba435771bf671ed54ec29fff85dfd732c3af3ac2c3d36d78538ddb10c693ebc7734dc0fe62c48d01fcd0efaf53a6de6e2b1adca941c8bb95f811597d6bbb654222cf9fd34f543c6486e57ffa8e8c2b7bb3e71ac5f68778e2779e1f779b43de43423e581308d333ba6f5a0673758cb8693679cd5d92c97be59cf14b89a5fe96b8d4fad75fba97ec823a753f82357a8747d6a39aba4d0df26fc4072c5ffba1023cfa54cc2de22f7df707e0b0ac4c7afff062a3edc4b5071f56f2865fa8637a66240260d70b35a451415ead9af342e9a8e2674985216abb16bb8595f0cae60c17b88f7d427ebeec1212cdf6ae0ecb6cb39f4b5c3c4b1f295296451950f42fff927ae1425275a6cd72fea2e9dedbb9ec346195f1bc570959b2986d1b76658482c7d70ad87d2bcbbde98e86c468aa9581f7d663739e0583b3d03f85e9a08bec8f80b85d1c664f444a73449c8a804079856221db0c51414990f5beaeb4268bfaea35f78d7892488d801b17120fbab0bb02c4cd3c21f7b09c583134259e29598d30d9e3bd0dd26d5b5c156c98c89819d40bdfa666c4a543c993ad3911b5657487e020a5d3ba2f0406730cd5c87cc2f3897515d3fe09707b7004044a2c5ec33c934c4dd1b5720f0088f034b3cda53b65e51effadb4048930d69e31e9e05e0a69aaa595efa505998fe738c8ae9c1b22d3b6cb0ed69f876c101ad1acf495608d5b75110b5db7d9a2fbd76e1f68a3b42cc4dd04976e386df7a13d2db8124453ea03343c1228e8343ad3a1585bb0dacf02db354472b80bafbfbd269a1830e000dcd6a78aafe6e9a84749f714ae4a95626a8fe3510db9519ea8c7c022743c2f21167545566864d2298031065a0afb965ba61a8ce18e90e4f2294bd3e3989ebdfbcba2c08f568ff669aef1a19756001ebec77c32e762c52db7ebe7203a72637c2732d444b6b176ade044012b7b7ccfb17264ab6ad753258f6feaf4ac68f9313ff605e1526780495c89e30b7e2c2bc6f3560b0e541714e78dcfb39441de1e2bd939b8755e85025b85c6a28cb79a0b83f177407c51ee541a2869373ef89784fc9bac36bc7a6a4460e6f60efca2f6747a7bebe4506fe37244357c04fe06cd23cd2e0427e72d9840e03012b9d6c4f3f495389c562b62ba03a836982acebf73caf776d8b4c68617cde87a55b2905eec6a726dc4762e962f88b51aff8c74294bab75ea6d19c112d03e6b3ba815bc2187cdd445f66e639da72f5acf2049d49535c87c4f847d8175e58a238ab2f003e51dbd0180e7cd85729ab20effbb75c4c45ab89e17cded74495b10e06aa9e20487417ba50d7f4ca8bcb334634bca195c8bec4dd6e66f70900785173d3a715b7607f26c1ac2824c5005eede950e93cf9ce41755a43e61c908dce1b70bf2cf22ffbdcc39eb1a9f4121e7794aacc0ce8014e78aeba200812e2ca6b98f6d5adf9cc83608a02bdcca969321e952d6c85521eee0fc3a33d4777203e619be5834672231777ede539b689e323180b328d97f0f683acbeb8060a0cb7cbd3af7980b07dcac4b99088236d69c823104ddc4aeef1069d4e0ab2592b19dbe2e2e5d4d14d9bc46051075ff804266d2a6b09542044c701d9cbcfc3f1a2b3659fa5693982f8823ffb4b21b6cae94c22516f49a6e2d878fc21595008971c6d848d581d496b27323ab5b128589a98785086d8069625dccb3114a5ee936205f41f0571cf612689f143c8bde57a3019900d446cfc9a27489b2b39b272b459b48cddfb6507c027faaa14980caee5fac78eee9c5f74f4bf9fab1d8426b17bcb98ba734270195f157078a9130056fa2522a44ad1ec0694e593479250c23490ce5c0e19070847b612d606cd72d3562ea783d2e48bfdd5185ae70c13ab987ef600aebc70688e32a228f086880c5b09af11a93cdba379b31674e7cb9471cb2cc3f1a687b21bb483373ba73794b4c9e614f7224d8835c49105e7b5e164bf62cccf0ca7a0fb6097a03c94789254f4d0e57f77dcbe6206e4b99f9c3290f0b5e9786fc3a83a666070fd0e272d339e99865a40c1ae273d50ae8460b74129b4cdb5b4f1213763cce0d57f71adbc1dbb5ce9c6c5dc3b1334992edcdf31f8b13a222f0492eb73a24febf037561e438b074fd68fb4c34d20b04b450af8af69da3862121c91884acea0320870dda5dbd9121c5f07517c334f788c5223735f60822e44828e3ad38d40445ccf834cc1eba4c5ceb53c52c386525aa10bd03d5f127db54b88dc158861a6bcc3cffdb3a694ffa809b04c587322398cc9d868c2eba6cb58c2e5fee22d27c1617c35c848af187a60194ac6f4c8ec4cbc74f521c045bd7f8f7c2f7630f2c92aa44b7c38d320542909fe326df209097de5772a9c44f0bd5e2604bc56440ba526857d1b308d9a77efa4792dc36d0799b24752865c6213ae19e1bc12bc818fb177acdcf7dec00ea9ab565599be4676462d3748bb56ccefcfc005b3fdcd21d9cc7b56f292703798ef7ba4672a2ac7a9cba1829badca3c35f95b005a12f5512447b22e226112cd6af1f5f50036383fe9bed811d4675c38225832b73b0514f34135d660bdf73f0e09e92ffdb04425c72f3c16c53a465cb6b31dc0b0562809f74ab321c8ef81fd69706907b1c8172636725bbe92cf2de31bf9b19d441b5f011c61e6201c6f4dfd4a25c57d4a2b4e4f6599fbe004771b86dba3b744dc5e019cd23781f30da606d908705717fe31bca6407c789e553080844484bf9e9ebab429beac403d8815a34c79240136997860dd8992efcdc034e2f6bd76bec6b74be3915a35eb6984d10097c6c8cf846cf66a2944b1fd14ba9896b2d682e916e7d96684518e0eed7604b9164c4f0f9d926e3c886370e2961b7d914113286</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Enter password to read！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK程序解析</title>
    <url>/BBK%E7%A8%8B%E5%BA%8F%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="FreeFormsAlways"><a href="#FreeFormsAlways" class="headerlink" title="FreeFormsAlways"></a>FreeFormsAlways</h2><p>程序入口Main()</p>
<p>CheckAppHasStart()//判断程序是否已经打开</p>
<blockquote>
<p>Initialize()//</p>
<blockquote>
<p>BackupStart()//Log备份<br>Environment.GetCommandLineArgs()<br>System.Threading.Mutex(true, sysName, out IsNew)</p>
</blockquote>
</blockquote>
<p>GetStartFile()//获取启动程序文件名<br>SystemIni(OpenFile, ref Inform)//初始化程序并获取主界面</p>
<blockquote>
<p>ReadDataXml()读取xml文件</p>
<blockquote>
<p>Configs.ReadXml()读取配置文件<br>MyLoadXml(xDoc, GetFullPath(XmlFile))加载xml文件<br>UpdateObjectList()实例化对象列表中的对象<br>GreateProjectList()创建组合列表<br>CheckProjectList()检查<br>BeginExePro(“Always”)//执行Always线程<br>Run(Inform, true)//执行显示窗体</p>
</blockquote>
</blockquote>
<p>ExeProject()//执行组合</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT</title>
    <url>/MQTT.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，协议构建于TCP/IP协议上<br>MQTT协议有三种身份：发布者、代理、订阅者，发布者和订阅者都为客户端，代理为服务器，同时消息的发布者也可以是订阅者<br>MQTT数据包由：固定头（Fixed header）、可变头（Variable header）、消息体（payload）三部分构成</p>
]]></content>
  </entry>
  <entry>
    <title>Linux C</title>
    <url>/Linux-C.html</url>
    <content><![CDATA[<p><center></center><br>linux编译、调试c、c++<br><span id="more"></span></p>
<h2 id="安装g-gcc"><a href="#安装g-gcc" class="headerlink" title="安装g++/gcc"></a>安装g++/gcc</h2><h2 id="创建cpp文件"><a href="#创建cpp文件" class="headerlink" title="创建cpp文件"></a>创建cpp文件</h2><h2 id="编译cpp文件生成可执行文件"><a href="#编译cpp文件生成可执行文件" class="headerlink" title="编译cpp文件生成可执行文件"></a>编译cpp文件生成可执行文件</h2><p><code>g++ *.cpp -o outfile</code></p>
<p>编译*.cpp文件生成可执行文件outfile</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>1、没有任何选项：gcc  helloworld.c<br>结果会在与helloworld.c相同的目录下产生一个a.out的可执行文件。<br>2、-o选项，指定输出文件名：gcc -o helloworld helloworld.c<br>-o意思是Output即需要指定输出的可执行文件的名称。这里的名称为helloworld。<br>3、-c选项，只编译，不汇编连接：gcc -c helloworld.c<br> -c意思就是Compile，产生一个叫helloworld.o的目标文件<br>4、-S选项，产生汇编源文件：gcc -s helloworld.c<br>-S意思就是assemble，产生一个叫helloworld.s的汇编源文件<br>5、-E选项，预处理C源文件：gcc -E helloworld.c<br>-E意思就是prEprocess。输出不是送到一个文件而是标准输出。当然可以对它进行重定向：<br>gcc -E helloworld.c &gt; helloworld.txt<br>二、优化选项<br>7、-O选项，基本优化：gcc -O helloworld.c<br>-O意思就是Optimize，产生一个经过优化的叫作a.out的可执行文件。也可以同时使用-o选项，以指定输出文件名。如：<br>gcc -O -o test helloworld.c<br>即会产生一个叫test的经过优化的可执行文件。<br>8、-O2选项，最大优化：gcc -O2 helloworld.c<br>产生一个经过最大优化的叫作a.out的可执行文件。<br>三、调试选项<br>9、-g选项，产生供gdb调试用的可执行文件：gcc -g helloworld.c<br>产生一个叫作a.out的可执行文件，大小明显比只用-o选项编译汇编连接后的文件大。<br>10、-pg选项，产生供gprof剖析用的可执行文件：gcc -pg helloworld.c<br>产生一个叫作a.out的执行文件，大小明显比用-g选项后产生的文件还大。</p>
<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p><code>./outfile</code></p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>1.编译：gcc -o xxx xxx.c<br>2.生成可调试文件：gcc -o xxx -g xxx.c<br>3.调试程序：gdb xxx<br>4.执行程序：<br>start 从程序第一步开始执行<br>run 直接运行程序到结束或者断点处<br>5.设置断点：break line(行数）或函数名或者条件表达式<br>break 6 在第6行设置断点<br>break Swap 在Swap函数入口设置断点<br>break 6 if i == 10 在第6行设置断点，要求i == 10<br>6.删除断点：<br>clear 删除所有断点<br>clear 行号 : 删除这行的断点<br>clear 函数名 : 删除该函数的断点<br>7.info 查看断点<br>8.c 继续执行到下一个断点<br>9.print +变量 打印变量值<br>10.n 下一步<br>11.q 退出调试</p>
<h2 id="gcc与g"><a href="#gcc与g" class="headerlink" title="gcc与g++"></a>gcc与g++</h2><p>gcc 和 g++ 的区别无非就是调用的编译器不同, 并且传递给链接器的参数不同.</p>
<p>g++ 会把 .c 文件当做是 C++ 语言 (在 .c 文件前后分别加上 -xc++ 和 -xnone, 强行变成 C++), 从而调用 cc1plus 进行编译.</p>
<p>g++ 遇到 .cpp 文件也会当做是 C++, 调用 cc1plus 进行编译.</p>
<p>g++ 还会默认告诉链接器, 让它链接上 C++ 标准库.</p>
<p>gcc 会把 .c 文件当做是 C 语言. 从而调用 cc1 进行编译.</p>
<p>gcc 遇到 .cpp 文件, 会处理成 C++ 语言. 调用 cc1plus 进行编译.</p>
<p>gcc 默认不会链接上 C++ 标准库.</p>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WebServices创建配置与调用</title>
    <url>/WebServices%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E7%94%A8.html</url>
    <content><![CDATA[<center></center>

<p>ASP.Net C# 创建WebService接口并发布<br><span id="more"></span></p>
<h2 id="启用Windows-IIS功能"><a href="#启用Windows-IIS功能" class="headerlink" title="启用Windows IIS功能"></a>启用Windows IIS功能</h2><p>操作：控制面板-程序和功能-启用或关闭windows功能<br>安装Internet Information Services及可承载的Web核心</p>
<p><img src="WebServices创建配置与调用/启用IIS.jpg" alt="启用Windows IIS功能"></p>
<h2 id="Webservice接口创建"><a href="#Webservice接口创建" class="headerlink" title="Webservice接口创建"></a>Webservice接口创建</h2><p>新建项目</p>
<p><img src="WebServices创建配置与调用/新建项目.jpg" alt="新建项目"></p>
<p>新建文件</p>
<p><img src="WebServices创建配置与调用/新建文件.jpg" alt="新建文件"></p>
<p>创建文件后默认HelloWord接口</p>
<h2 id="Webservice发布"><a href="#Webservice发布" class="headerlink" title="Webservice发布"></a>Webservice发布</h2><h3 id="Webservice接口发布到文件夹"><a href="#Webservice接口发布到文件夹" class="headerlink" title="Webservice接口发布到文件夹"></a>Webservice接口发布到文件夹</h3><p>项目右键发布选择发布到文件夹，配置好路径后点击发布即可</p>
<h2 id="IIS部署到默认网站"><a href="#IIS部署到默认网站" class="headerlink" title="IIS部署到默认网站"></a>IIS部署到默认网站</h2><h3 id="添加虚拟目录"><a href="#添加虚拟目录" class="headerlink" title="添加虚拟目录"></a>添加虚拟目录</h3><p><img src="WebServices创建配置与调用/添加虚拟目录.jpg" alt="添加虚拟目录"></p>
<h3 id="转换为应用程序"><a href="#转换为应用程序" class="headerlink" title="转换为应用程序"></a>转换为应用程序</h3><p><img src="WebServices创建配置与调用/转换为应用程序.jpg" alt="转换为应用程序"></p>
<h3 id="添加默认文档"><a href="#添加默认文档" class="headerlink" title="添加默认文档"></a>添加默认文档</h3><p><img src="WebServices创建配置与调用/默认文档.jpg" alt="默认文档"></p>
<p>默认文档名为项目中创建Webservice的类名.asmx</p>
<p><img src="WebServices创建配置与调用/添加默认文档.jpg" alt="添加默认文档"></p>
<h2 id="IIS部署自定义网站"><a href="#IIS部署自定义网站" class="headerlink" title="IIS部署自定义网站"></a>IIS部署自定义网站</h2><p>右键网站，添加网站<br><img src="WebServices创建配置与调用/添加网站.jpg" alt="添加网站"></p>
<h3 id="避坑操作"><a href="#避坑操作" class="headerlink" title="避坑操作"></a>避坑操作</h3><p><img src="WebServices创建配置与调用/启用32位应用程序.jpg" alt="启用32位应用程序"></p>
<p><img src="WebServices创建配置与调用/浏览目录.jpg" alt="浏览目录"></p>
<p><img src="WebServices创建配置与调用/启用浏览目录.jpg" alt="启用浏览目录"></p>
<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>点击IIS中的浏览*：80(http)或访问<a href="http://localhost/别名/默认文档名">http://localhost/别名/默认文档名</a></p>
<p><img src="WebServices创建配置与调用/接口测试.jpg" alt="接口测试"></p>
]]></content>
      <tags>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title>查缺补漏-CSharp</title>
    <url>/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-CSharp.html</url>
    <content><![CDATA[<p><center></center><br>记录搬砖过程中遇到的疑问<br><span id="more"></span></p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>子类构造函数始终默认调用父类无参构造函数</p>
<p>若父类没有无参构造函数时，子类应显式调用父类有参构造函数，否则编译不过</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;Hello World!&quot;);</span></span><br><span class="line">            TestFunc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestFunc</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Child c = <span class="keyword">new</span> Child(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">BassTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//public BassTest()</span></span><br><span class="line">        <span class="comment">//&#123;Console.WriteLine(&quot;BassNoneParam&quot;);&#125; </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BassTest</span>(<span class="params"><span class="built_in">string</span> s</span>) : <span class="title">this</span>(<span class="params">s,<span class="string">&quot;333&quot;</span></span>)</span></span><br><span class="line">        &#123;Console.WriteLine(<span class="string">&quot;BassOneParam&quot;</span> + s);&#125; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BassTest</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> t</span>)</span></span><br><span class="line">        &#123;Console.WriteLine(<span class="string">&quot;BassTwoParam&quot;</span> + s + t);&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Child</span> : <span class="title">BassTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//public Child()</span></span><br><span class="line">        <span class="comment">//&#123;Console.WriteLine(&quot;ChildNoneParam&quot;);&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Child</span>(<span class="params"><span class="built_in">string</span> s</span>) : <span class="title">this</span>(<span class="params">s,<span class="string">&quot;111&quot;</span></span>)</span></span><br><span class="line">        &#123;Console.WriteLine(<span class="string">&quot;ChildOneParam&quot;</span> + s);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Child</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> t</span>):<span class="title">base</span>(<span class="params">s</span>)</span></span><br><span class="line">        &#123;Console.WriteLine(<span class="string">&quot;ChildTwoParam&quot;</span> + s + t);&#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>示例中：this()调用子类中对应参数的构造函数<br>base()调用父类中对应参数的构造函数<br><code>Child c = new Child(&quot;22&quot;);</code>输出为：</p>
<p>BassTwoParam22333<br>BassOneParam22<br>ChildTwoParam22111<br>ChildOneParam22</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>构造函数</tag>
      </tags>
  </entry>
  <entry>
    <title>AES加密</title>
    <url>/AES%E5%8A%A0%E5%AF%86.html</url>
    <content><![CDATA[<p><center></center><br>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法<br><span id="more"></span></p>
<h2 id="AES加密过程"><a href="#AES加密过程" class="headerlink" title="AES加密过程"></a>AES加密过程</h2><p>AES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。（Rijndael加密法因支持更大的区块，其矩阵行数可视情况增加）加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：</p>
<p>AddRoundKey—矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。<br>SubBytes—通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。<br>ShiftRows—将矩阵中的每个横列进行循环式移位。<br>MixColumns—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。</p>
<p>C#代码实现</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 默认密钥-密钥的长度必须是32</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> PublicKey = <span class="string">&quot;1234567890adbcde&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 默认向量</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> Iv = <span class="string">&quot;1234567890hjlkew&quot;</span>;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> AES加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span>需要加密的字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>32位密钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加密后的字符串<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Encrypt</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Byte[] keyArray = Encoding.UTF8.GetBytes(key);</span><br><span class="line">    Byte[] toEncryptArray = Encoding.UTF8.GetBytes(str);</span><br><span class="line">    <span class="keyword">var</span> rijndael = <span class="keyword">new</span> System.Security.Cryptography.RijndaelManaged();</span><br><span class="line">    rijndael.Key = keyArray;</span><br><span class="line">    rijndael.BlockSize = <span class="number">128</span>;</span><br><span class="line">    rijndael.Mode = System.Security.Cryptography.CipherMode.CBC;<span class="comment">//</span></span><br><span class="line">    rijndael.Padding = System.Security.Cryptography.PaddingMode.Zeros;<span class="comment">//</span></span><br><span class="line">    rijndael.IV = Encoding.UTF8.GetBytes(Iv);</span><br><span class="line">    System.Security.Cryptography.ICryptoTransform cTransform = rijndael.CreateEncryptor();</span><br><span class="line">    Byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, <span class="number">0</span>, toEncryptArray.Length);</span><br><span class="line">    <span class="keyword">return</span> Convert.ToBase64String(resultArray, <span class="number">0</span>, resultArray.Length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> AES解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span>需要解密的字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>32位密钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>解密后的字符串<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Decrypt</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Byte[] keyArray = System.Text.Encoding.UTF8.GetBytes(key);</span><br><span class="line">    Byte[] toEncryptArray = Convert.FromBase64String(str);</span><br><span class="line">    <span class="keyword">var</span> rijndael = <span class="keyword">new</span> System.Security.Cryptography.RijndaelManaged();</span><br><span class="line">    rijndael.Key = keyArray;</span><br><span class="line">    rijndael.Mode = System.Security.Cryptography.CipherMode.CBC;</span><br><span class="line">    rijndael.Padding = System.Security.Cryptography.PaddingMode.Zeros;</span><br><span class="line">    rijndael.IV = System.Text.Encoding.UTF8.GetBytes(Iv);</span><br><span class="line">    System.Security.Cryptography.ICryptoTransform cTransform = rijndael.CreateDecryptor();</span><br><span class="line">    Byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, <span class="number">0</span>, toEncryptArray.Length);</span><br><span class="line">    <span class="keyword">return</span> System.Text.Encoding.UTF8.GetString(resultArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSharp</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL数据库安装配置</title>
    <url>/PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p><center></center><br>Postgre数据库安装与配置<br><span id="more"></span></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>目前用的数据库版本为: postgresql-9.5.3-1-windows.exe<br>驱动安装包为: Setup_Npgsql-2.2.3.0-r2-net40.exe<br>安装包获取: 自己想办法</p>
<p>网盘路径:/BBK_File_Server/汽车测试事业部/17-转存（每月1日定期清理）/Justin/程序安装包</p>
<h3 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h3><p>安装中需设置数据库密码,检测线密码设置为:123,其他自己看着办</p>
<p><img src="PostgreSQL数据库安装配置/SetupPassword.jpg" alt="Setup"></p>
<p>安装最后界面取消勾选后点击完成即可</p>
<p><img src="PostgreSQL数据库安装配置/SetupDone.jpg" alt="Setup"></p>
<h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><p>双击安装包一切默认即可</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><p>打开安装后的数据库软件:PostgreSQL 9.5 (x86)\pgAdmin III</p>
<p><img src="PostgreSQL数据库安装配置/NewDatabase.jpg" alt="Setup"></p>
<p>点击新建数据库,名称填LocalDB,其他默认点击确定</p>
<p><img src="PostgreSQL数据库安装配置/NewDatabase1.jpg" alt="Setup"></p>
<h3 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h3><p><img src="PostgreSQL数据库安装配置/Restor.jpg" alt="Setup"><br><img src="PostgreSQL数据库安装配置/Restor-SelectFile.jpg" alt="Setup"><br><img src="PostgreSQL数据库安装配置/RestorDone.jpg" alt="Setup"><br><img src="PostgreSQL数据库安装配置/Return0.jpg" alt="Setup"></p>
<h2 id="检测线联网配置"><a href="#检测线联网配置" class="headerlink" title="检测线联网配置"></a>检测线联网配置</h2><a href="/BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E8%81%94%E7%BD%91.html" title="BBK检测线联网">PostgreSQL配置</a>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>常州理想协议整理</title>
    <url>/%E5%B8%B8%E5%B7%9E%E7%90%86%E6%83%B3%E5%8D%8F%E8%AE%AE%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="27fc457f93dba563922bf78dad92062bb7559fa879d246e712dda7301d348bf6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Enter password to read！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>轮眉软件调试-棋盘格</title>
    <url>/%E8%BD%AE%E7%9C%89%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95-%E6%A3%8B%E7%9B%98%E6%A0%BC.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="坐标系说明"><a href="#坐标系说明" class="headerlink" title="坐标系说明"></a>坐标系说明</h2><p>工位后方是Z轴正方向,右侧为X正方向,上侧为Y正方向</p>
<h2 id="标定界面"><a href="#标定界面" class="headerlink" title="标定界面"></a>标定界面</h2><p><img src="轮眉软件调试-棋盘格/CAL01.PNG" alt="CAL"><br><img src="轮眉软件调试-棋盘格/CAL02.PNG" alt="CAL"><br><img src="轮眉软件调试-棋盘格/CAL03.PNG" alt="CAL"></p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>PixelSize: 传感器像素尺寸<br>说明: 比如相机Sensor Size 为5.7mm <em>4.3mm, 分辨率为2592</em> 1944px, 则<br>PixelSizeH = 5.7 / 2592<br>PixelSizeV = 4.3 / 1944</p>
<p>左上角:</p>
<blockquote>
<p>Point3DX:<br>Point3DY: 棋盘格左上角第一个黑块的右下角这一点到地面的高度<br>Point3DZ: 棋盘格到标定架中心的距离</p>
</blockquote>
<p>右边:</p>
<blockquote>
<p>ChessboardRow: 棋盘格行数<br>ChessboardColumn: 棋盘格列数<br>ChessboardLength: 棋盘格边长<br>ChessboardDistance: 棋盘格到相机的距离 + 110(外壳镜面到相机传感器的距离)</p>
</blockquote>
<p>相机坐标:</p>
<blockquote>
<p>Camera_X:<br>Camera_Y: 相机玻璃面到标定架中心线的距离<br>Camera_Z: 相机玻璃面中心到地的距离</p>
</blockquote>
<h3 id="标定结果"><a href="#标定结果" class="headerlink" title="标定结果"></a>标定结果</h3><p>内参标定完成后焦距f应接近相机镜头实际焦距大小;<br>fx,fy两数接近</p>
<p>可以检查棋盘格识别点,表示识别到每个点的像素坐标值</p>
<h2 id="测试界面"><a href="#测试界面" class="headerlink" title="测试界面"></a>测试界面</h2><p>与四个孔的标定架不同点:</p>
<blockquote>
<p>轮眉距离: 轮眉到车中轴线的距离</p>
</blockquote>
<p>测试点识别同样是识别ROI中最下面的白点</p>
<p><img src="轮眉软件调试-棋盘格/TEST01.PNG" alt="CAL"><br><img src="轮眉软件调试-棋盘格/TEST02.PNG" alt="CAL"><br><img src="轮眉软件调试-棋盘格/TEST03.PNG" alt="CAL"></p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>Hex文件</title>
    <url>/Hex%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>Intel Hex文件是遵循Intel Hex文件格式的ASCII文本文件。<br>文件的每一行中都包含了一个由16进制数据组成hex记录。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标识符</th>
<th style="text-align:center">数据长度(1Byte)</th>
<th style="text-align:center">偏移地址(2Byte)</th>
<th style="text-align:center">数据类型(1Byte)</th>
<th style="text-align:center">数据(nByte)</th>
<th style="text-align:center">校验码(1Byte)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:</td>
<td style="text-align:center">02</td>
<td style="text-align:center">0000</td>
<td style="text-align:center">04</td>
<td style="text-align:center">0800</td>
<td style="text-align:center">F2</td>
</tr>
</tbody>
</table>
</div>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Intel Hex标识符以’:’开头</p>
<blockquote>
<p>数据类型</p>
<blockquote>
<p>00—数据记录<br>(8bit/ 16bit/ 32bit)<br>:020000040800F2//（: 02 0000 04 0800 F2）基地址为0x08000000<br>:104800009004002055940008599200085B9200081B//(: 10 4800 00 09004002055940008599200085B920008 1B)数据存放地址为0x08000000+0x4800,数据长度为0x10,数据内容为：09004002055940008599200085B920008</p>
<p>01—文件结束记录<br>(8 bit/ 16 bit/ 32 bit)</p>
<p>02—扩展段地址记录<br>(16 bit/32 bit)<br>16位的扩展段地址记录用于SBA（segment Base Address）的4-19bit，也被当作USBA(Upper Segment Base Address)，其SBA的0-3bit为0,即该记录定义了数据存放的基地址（USBA &lt;&lt; 4）。<br>:020000040800F2//（: 02 0000 02  0800 F2）USBA为0800，即基地址为0x0800 &lt;&lt; 4,即等于0x8000。</p>
<p>03—开始段地址记录<br>(16 bit/ 32 bit)</p>
<p>04—扩展线性地址记录<br>(32 bit)<br>32位的扩展线性地址记录用在LBA(Linear Base Address)的16-31bit，也被当作ULBA(Upper Linear Base Address)，其LBA的0-15bit都是0，即该记录定义了数据存放的基地址（ULBA &lt;&lt; 16）<br>:020000040800F2//（: 02 0000 04  0800 F2）ULBA为0800，即基地址为0x0800 &lt;&lt; 16,即等于0x08000000。</p>
<p>05—开始线性地址记录<br>(32 bit)<br>:0400000508009465F6//(: 04 0000 05 08009465 F6)程序从0x08009465开始执行</p>
</blockquote>
</blockquote>
<p>校验和的计算是通过将记录当中所有十六进制编码数字对的值相加，以256为模进行补足</p>
<p>检验和 = 0x100 - 累加和</p>
<h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h3 id="数据记录”00”"><a href="#数据记录”00”" class="headerlink" title="数据记录”00”"></a>数据记录”00”</h3><p>Intel HEX文件由任意数量以回车换行符结束的数据记录组成数据记录外观如下:<br>    :10246200464C5549442050524F46494C4500464C33<br>其中:10 是这个记录当中数据字节的数量.即0x10 ；<br>     2462 是数据将被下载到存储器当中的地址.即0x2462 ；</p>
<p>00 是记录类型( 数 据 记录).即0x00 ；<br>464C…464C是 数据.分别代表0x46,0x4C… ；<br>33 是这个记录的校 验和即0x33；计算方法如下：256D-(10H+24H+62H+00H+46H+4CH+55H+49H+44H+20H+50H+52H+4FH+46H+49H+4CH+45H+00H+46H+4CH)/100H=33H；</p>
<h3 id="文件结束-EOF-”01”"><a href="#文件结束-EOF-”01”" class="headerlink" title="文件结束(EOF)”01”"></a>文件结束(EOF)”01”</h3><p>Intel HEX文件必须以文件结束(EOF) 记录结束这个记录的记录类的值必须是01.EOF 记录 外 观总是如下:<br>   :00000001FF<br>其中:00 是记录当中数据字节的数量.<br>   0000 是数据被下载到存储器当中的地址. 在文件结束记录当中地址是没有意义，被忽略的.0000h 是典型的地址；<br>   01 是记录类型 01( 文件结束记录)<br>   FF 是这个记录的校验和, 计算方法如下: 256D-（00H+00H+00H+01H）=FFH；</p>
<h3 id="扩展线性地址记录-HEX386-”04”"><a href="#扩展线性地址记录-HEX386-”04”" class="headerlink" title="扩展线性地址记录(HEX386) ”04”"></a>扩展线性地址记录(HEX386) ”04”</h3><p>由于每行标识数据地址的只有2Byte，所以最大只能到64K，为了可以保存高地址的数据，就有了Extended Linear AddressRecord。如果这行的数据类型是0x04，那么，这行的数据就是随后数据的基地址。</p>
<p>扩展线性地址记录也叫作32位地址记录或HEX386记录.这些记录含数据的高16位扩展线性地址记录总是有两个数据字节，外观如下：<br>    :02000004FFFFFC</p>
<p>其中:02 是这个记录当中 数 据字 节 的 数量.<br>0000 是地址域, 对于 扩 展 线 性地址 记录 , 这个 域 总是0000.<br>04 是记录类型 04( 扩 展 线 性地址 记录)<br>FFFF 是地址的高16 位.<br>FC 是这个记录的校 验 和, 计算如下: 256D-（02H+00H+00H+04H+FFH+FFH）/100H=FFH；</p>
<p>当一 个扩展 线 性地址记录被读 取, 存 储于数据域的扩展线性地址被保存，它被应于</p>
<p>从 Intel HEX 文件 读取 来 的 随 后的 记录 . 线 性地址保持有效, 到 它 被另外一 个扩址记录 所改 变。</p>
<p>通 过 把 记录当 中的地址域 与 被移位的 来 自 扩 展 线 性地址 记录 的地址 数 据相加</p>
<p> 获 得 数 据 记录 的 绝对 存 储器地址。</p>
<p>以下的例子演示了这个过 程:</p>
<p>:0200000480007A    //数据记录的绝对存储器地址高16位为0x8000<br>:100000001D000A00000000000000000000000000C9<br>:100010000000000085F170706F0104005D00BD00FC<br>第一行，是Extended Linear Address Record，里面的数据，也就是基地址是0x8000，第二行是DataRecord，里面的地址值是0x0000。那么数据1D000A00000000000000000000000000（共16个字节）要写入FLASH中的地址为 (0x8000&lt;&lt; 16)| 0x0000，也就是写入FLASH的0x80000000这个地址；第三行的数据写入地址为0x80000010.当一个HEX文件的数据超过64k的时候，文件中就会出现多个Extended Linear Address Record。</p>
<h3 id="扩展段地址记录-HEX86-“02“"><a href="#扩展段地址记录-HEX86-“02“" class="headerlink" title="扩展段地址记录(HEX86)“02“"></a>扩展段地址记录(HEX86)“02“</h3><p>扩展段地址记录也叫HEX86 记录 , 它包括4-19 位数据地址段. 扩展段地址记总是有两</p>
<p>个数 据字节 , 外观如下:<br>:020000021200EA<br>其中:02 是记录当中 数 据字 节 的 数量；<br>0000 是地址域. 对于 扩 展段地址 记录 , 这个 域 总是0000；<br>02 是记录类型 02( 扩 展段地址 记录)；<br>1200 是地址段；<br>EA 是这个记录的校 验 和；</p>
<p>当一 个扩 展段地址 记录 被 读 取, 存 储 于 数 据域的 扩 展段地址被保存, 它 被 应 用于 从 Intel HEX 文件 读 取 来的 随 后的 记录 . 段地址保持有效, 直到 它 被另外一 个扩 展地址 记录 所改 变。</p>
<p>通 过 把 记录当 中的地址域 与 被移位的 来 自 扩 展段地址 记录 的地址 数 据相加 获 得 数 据 记录 的 绝对 存 储器地址。<br>    以下的例子演示了这个过 程..<br>来自 数 据 记录地址域的地址 2462 + 1200 &lt;&lt; 4 =  00014462</p>
]]></content>
      <tags>
        <tag>Hex</tag>
      </tags>
  </entry>
  <entry>
    <title>轮眉软件调试</title>
    <url>/%E8%BD%AE%E7%9C%89%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95.html</url>
    <content><![CDATA[<center></center>

<p>BBK轮眉软件调试—-标定板为四个孔的版本<br>棋盘格: <a href="/%E8%BD%AE%E7%9C%89%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95-%E6%A3%8B%E7%9B%98%E6%A0%BC.html" title="轮眉软件调试-棋盘格">轮眉软件调试-棋盘格</a></p>
<p>本文未说明的地方自己琢磨吧<br><span id="more"></span></p>
<h2 id="相机配置"><a href="#相机配置" class="headerlink" title="相机配置"></a>相机配置</h2><a href="/%E8%BD%AE%E7%9C%89%E7%9B%B8%E6%9C%BA%E9%85%8D%E7%BD%AE.html" title="轮眉相机配置">轮眉相机配置</a>
<h2 id="软件菜单"><a href="#软件菜单" class="headerlink" title="软件菜单"></a>软件菜单</h2><h3 id="标定"><a href="#标定" class="headerlink" title="标定"></a>标定</h3><p><img src="轮眉软件调试/标定菜单.PNG" alt="CAL"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="轮眉软件调试/配置菜单.PNG" alt="Config"></p>
<h2 id="标定界面"><a href="#标定界面" class="headerlink" title="标定界面"></a>标定界面</h2><p><img src="轮眉软件调试/标定界面1.PNG" alt="CAL"><br><img src="轮眉软件调试/标定界面2.PNG" alt="CAL"></p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>左上角为四个相机</p>
<p>图像算法选择:</p>
<p><img src="轮眉软件调试/标定界面3.PNG" alt="CAL"></p>
<p>Camera: 相机参数</p>
<blockquote>
<p>曝光时间<br>增益<br>数字移位n(像素值*2^n)(有滤镜的情况下标定时可配置为1)</p>
</blockquote>
<p>标定板:</p>
<blockquote>
<p>Board_CenterX:<br>Board_CenterY: 标定板后边沿(黑孔处)到标定架中心的距离<br>Board_CenterZ: 四个识别点组成矩形中心到地的高度<br>Board_ColumnSpace: 四个识别点列宽<br>Board_RowSpace: 四个标定点行高</p>
</blockquote>
<p>算法参数:</p>
<blockquote>
<p>Threshold: 二值化阈值<br>AreaMin: 识别点时的最小像素值<br>AreaMax: 识别点时的最大像素值<br>ImageType: 图形格式</p>
</blockquote>
<p>相机坐标:</p>
<blockquote>
<p>Camera_X:<br>Camera_Y: 相机玻璃面到标定架中心线的距离<br>Camera_Z: 相机玻璃面中心到地的距离</p>
</blockquote>
<h3 id="标定注意事项"><a href="#标定注意事项" class="headerlink" title="标定注意事项"></a>标定注意事项</h3><p>标定界面通过调节曝光增益等参数使得读取的标定板图像黑白分明,能清晰看到四个标定点,然后点击识别及内外参标定.</p>
<p>焦距f应接近镜头实际焦距,内参标定后大概3500左右,xy相差不大</p>
<h2 id="配置界面"><a href="#配置界面" class="headerlink" title="配置界面"></a>配置界面</h2><p><img src="轮眉软件调试/配置界面3.PNG" alt="Config"><br><img src="轮眉软件调试/配置界面2.PNG" alt="Config"><br><img src="轮眉软件调试/配置界面1.PNG" alt="Config"></p>
<p>左上角为参数配置选择</p>
<p>左下角为四个相机</p>
<p>轮眉距离: 标定板后方黑点到轮眉相机前玻璃面的距离</p>
<p>Camera: 相机参数</p>
<blockquote>
<p>曝光时间<br>增益<br>数字移位n(像素值*2^n)(一般配置为0)</p>
</blockquote>
<p>轮眉参数:</p>
<blockquote>
<p>ImageType:<br>Offset: 轮眉高度 = 计算值 + Offset</p>
</blockquote>
<p>算法参数:</p>
<blockquote>
<p>AreaMin: 识别时最小像素范围<br>AutoROIWide:<br>Threshold: 二值化阈值</p>
</blockquote>
<h3 id="车型配置"><a href="#车型配置" class="headerlink" title="车型配置"></a>车型配置</h3><p>新建一个参数配置,上车后开启激光,调节曝光等参数使读取到的图像黑白分明,能明确识别到激光在轮眉处的断点,调整ROI大小将其框住.</p>
<p>软件中轮眉识别方法: 在ROI中从下往上根据设定参数识别第一个亮点.</p>
<h2 id="设备图片"><a href="#设备图片" class="headerlink" title="设备图片"></a>设备图片</h2><p><img src="轮眉软件调试/工位整体.JPG" alt="Devices"><br><img src="轮眉软件调试/右前.JPG" alt="Devices"><br><img src="轮眉软件调试/标定板.JPG" alt="Devices"></p>
<h2 id="实车测试"><a href="#实车测试" class="headerlink" title="实车测试"></a>实车测试</h2><p><img src="轮眉软件调试/test.PNG" alt="Test"><br><img src="轮眉软件调试/test1.PNG" alt="Test"></p>
<h2 id="棋盘格"><a href="#棋盘格" class="headerlink" title="棋盘格"></a>棋盘格</h2>]]></content>
      <categories>
        <category>手册</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>轮眉</tag>
      </tags>
  </entry>
  <entry>
    <title>轮眉相机配置</title>
    <url>/%E8%BD%AE%E7%9C%89%E7%9B%B8%E6%9C%BA%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p><center></center><br>BBK轮眉相机配置</p>
<p>本文未说明的地方自己琢磨吧<br><span id="more"></span></p>
<h2 id="Basler驱动安装"><a href="#Basler驱动安装" class="headerlink" title="Basler驱动安装"></a>Basler驱动安装</h2><p>根据相机版本安装对应相机驱动</p>
<h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><p>配置巨帧等,如图:</p>
<p><img src="轮眉相机配置/IP-edit.PNG" alt="NetWorkConfig"></p>
<p><img src="轮眉相机配置/IP-Jumbo.PNG" alt="NetWorkConfig"></p>
<p><img src="轮眉相机配置/IP-packet.PNG" alt="NetWorkConfig"></p>
<h2 id="相机IP配置"><a href="#相机IP配置" class="headerlink" title="相机IP配置"></a>相机IP配置</h2><h3 id="识别相机"><a href="#识别相机" class="headerlink" title="识别相机"></a>识别相机</h3><p>打开控制面板IP配置<br><img src="轮眉相机配置/IP.PNG" alt="IPConfig"></p>
<p>打开Pylon IPConfig软件<br><img src="轮眉相机配置/PylonIPConfig.PNG" alt="Pylon IPConfig"></p>
<p>根据IP与Serial Number的对应对网卡进行标注</p>
<h3 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h3><p>给相机分配静态IP</p>
<p>分配规则:</p>
<blockquote>
<p>1.网卡与相机在同一网段</p>
<p>2.不同相机分配不同网段</p>
</blockquote>
<p>例如:</p>
<p><img src="轮眉相机配置/IP-detail.PNG" alt="IPConfig"></p>
<h2 id="相机检查"><a href="#相机检查" class="headerlink" title="相机检查"></a>相机检查</h2><p>打开Pylon View软件检查各相机打开及图像读取是否正常</p>
<p><img src="轮眉相机配置/Pylon.PNG" alt="PylonView"><br><img src="轮眉相机配置/Pylon-Features.PNG" alt="PylonView"></p>
]]></content>
      <categories>
        <category>手册</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>轮眉</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp 获取当前运行函数名</title>
    <url>/CSharp-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E5%87%BD%E6%95%B0%E5%90%8D.html</url>
    <content><![CDATA[<p>Generated by AI<br><span id="more"></span></p>
<p>在 C# 中，可以通过 <code>System.Reflection</code> 命名空间和 <code>System.Diagnostics</code> 命名空间提供的工具来获取当前运行的函数名。以下是几种常见方法：</p>
<hr>
<h3 id="方法-1：使用-MethodBase-GetCurrentMethod-（推荐）"><a href="#方法-1：使用-MethodBase-GetCurrentMethod-（推荐）" class="headerlink" title="方法 1：使用 MethodBase.GetCurrentMethod()（推荐）"></a><strong>方法 1：使用 <code>MethodBase.GetCurrentMethod()</code>（推荐）</strong></h3><p>通过反射直接获取当前执行的方法名：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取当前方法名</span></span><br><span class="line">        <span class="built_in">string</span> methodName = MethodBase.GetCurrentMethod().Name;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;当前方法名: <span class="subst">&#123;methodName&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当前方法名: MyMethod</span><br></pre></td></tr></table></figure>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><strong>简单直接</strong>：无需复杂堆栈操作。</li>
<li><strong>性能优化</strong>：避免堆栈遍历，效率较高。</li>
<li><strong>注意</strong>：如果方法被内联优化（如 Release 模式），可能无法准确获取方法名，需禁用内联（添加 <code>[MethodImpl(MethodImplOptions.NoInlining)]</code>）。</li>
</ul>
<hr>
<h3 id="方法-2：使用-StackTrace-和-StackFrame"><a href="#方法-2：使用-StackTrace-和-StackFrame" class="headerlink" title="方法 2：使用 StackTrace 和 StackFrame"></a><strong>方法 2：使用 <code>StackTrace</code> 和 <code>StackFrame</code></strong></h3><p>通过分析调用堆栈获取当前方法名：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取当前方法名</span></span><br><span class="line">        StackTrace stackTrace = <span class="keyword">new</span> StackTrace();</span><br><span class="line">        StackFrame stackFrame = stackTrace.GetFrame(<span class="number">0</span>); <span class="comment">// 0 表示当前方法</span></span><br><span class="line">        <span class="built_in">string</span> methodName = stackFrame.GetMethod().Name;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;当前方法名: <span class="subst">&#123;methodName&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当前方法名: MyMethod</span><br></pre></td></tr></table></figure>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul>
<li><strong>灵活性</strong>：可获取调用链中任意层级的方法名（通过调整 <code>GetFrame(n)</code> 的索引 <code>n</code>）。</li>
<li><strong>潜在问题</strong>：在 Release 模式下可能因编译器优化（如方法内联或尾调用优化）导致堆栈信息不准确。</li>
<li><strong>性能开销</strong>：遍历堆栈的开销较大，频繁调用需谨慎。</li>
</ul>
<hr>
<h3 id="方法-3：获取调用者的方法名"><a href="#方法-3：获取调用者的方法名" class="headerlink" title="方法 3：获取调用者的方法名"></a><strong>方法 3：获取调用者的方法名</strong></h3><p>若需获取调用当前方法的上层方法名：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MethodB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取调用者方法名（MethodA）</span></span><br><span class="line">        StackTrace stackTrace = <span class="keyword">new</span> StackTrace();</span><br><span class="line">        StackFrame stackFrame = stackTrace.GetFrame(<span class="number">1</span>); <span class="comment">// 1 表示上层调用</span></span><br><span class="line">        <span class="built_in">string</span> callerName = stackFrame.GetMethod().Name;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;调用者方法名: <span class="subst">&#123;callerName&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">调用者方法名: MethodA</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li><strong>索引值</strong>：<code>GetFrame(0)</code> 是当前方法，<code>GetFrame(1)</code> 是调用者，依此类推。</li>
<li><strong>编译器优化</strong>：可能导致堆栈层级变化，需实际测试验证。</li>
</ul>
<hr>
<h3 id="方法-4：使用-nameof-表达式（C-6-）"><a href="#方法-4：使用-nameof-表达式（C-6-）" class="headerlink" title="方法 4：使用 nameof 表达式（C# 6+）"></a><strong>方法 4：使用 <code>nameof</code> 表达式（C# 6+）</strong></h3><p>如果只需要当前方法的静态名称（非动态获取），可以使用 <code>nameof</code>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> methodName = <span class="keyword">nameof</span>(MyMethod);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;方法名: <span class="subst">&#123;methodName&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法名: MyMethod</span><br></pre></td></tr></table></figure>
<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul>
<li><strong>编译时确定</strong>：名称在编译时解析，无法动态获取运行时调用的方法名。</li>
<li><strong>类型安全</strong>：避免拼写错误，适合硬编码方法名的场景。</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>场景</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MethodBase.GetCurrentMethod()</code></td>
<td>直接获取当前方法名</td>
<td>简单高效</td>
<td>可能受编译器优化影响</td>
</tr>
<tr>
<td><code>StackTrace</code>/<code>StackFrame</code></td>
<td>分析调用堆栈，灵活获取层级信息</td>
<td>支持多层调用链分析</td>
<td>性能开销大，优化环境下不可靠</td>
</tr>
<tr>
<td><code>nameof</code></td>
<td>编译时获取静态方法名</td>
<td>类型安全，无运行时开销</td>
<td>无法动态获取运行时方法名</td>
</tr>
</tbody>
</table>
</div>
<p>根据具体需求选择合适的方法！</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>SAE-J1939</title>
    <url>/SAE-J1939.html</url>
    <content><![CDATA[<p><center></center><br>J1939主要需要了解ID组成,根据所需数据查找SPN,PGN然后组成ID;<br>了解帧格式<br>了解单,多帧数据请求<br><span id="more"></span></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>J1939标准用于卡车、公共汽车和移动液压等重型车辆</p>
<p>J1939标准定义的大部分报文均旨在广播,使用CAN 2.0B协议中定义的29位标识符</p>
<h2 id="协议结构"><a href="#协议结构" class="headerlink" title="协议结构"></a>协议结构</h2><h3 id="J1939物理层（基于J1939-11-15）"><a href="#J1939物理层（基于J1939-11-15）" class="headerlink" title="J1939物理层（基于J1939-11/15）"></a>J1939物理层（基于J1939-11/15）</h3><p>速率:250kbit/s<br>差动电压方式传输,隐性电压均为2.5,显性电压1.5,3.5<br>终端电阻:120欧<br>最大传输线长40m<br>同一网络最多ECU个数为30</p>
<h3 id="J1939数据链路层（基于J1939-21）"><a href="#J1939数据链路层（基于J1939-21）" class="headerlink" title="J1939数据链路层（基于J1939-21）"></a>J1939数据链路层（基于J1939-21）</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">优先级/P</th>
<th style="text-align:center">扩展数据页/EDP</th>
<th style="text-align:center">数据页/DP</th>
<th style="text-align:center">PDU格式/PF</th>
<th style="text-align:center">特定PDU/PS</th>
<th style="text-align:center">源地址/SA</th>
<th style="text-align:center">DATA</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>3bit|1bit|1bit|8bit|8bit|8bit|0~64bit</p>
<p>P：Priority，优先级，调整该值可改变报文在总线上的仲裁优先级<br>These three bits are used to optimize message latency for transmission onto the bus only. They should be globally<br>masked off by the receiver (ignored). The priority of any message can be set from highest, 0 (0002), to lowest, 7 (1112).<br>The default for all control oriented messages is 3 (0112). The default for all other informational, proprietary, request, and<br>ACK messages is 6 (1102). This permits the priority to be raised or lowered in the future as new PGNs are assigned and<br>bus traffic changes. A recommended priority is assigned to each PGN when it is added to the application layer document.<br>However, the priority field should be reprogrammable to allow for network tuning by the OEM should the need arise</p>
<p>EDP及DP：扩展数据页及数据页，当前均为0<br>The Extended Data Page bit is used in conjunction with the Data Page bit to determine the structure of the CAN identifier<br>of the CAN data frame. All J1939 messages should set the Extended Data Page bit to ZERO on transmit. See Table 3,<br>Definition of Extended Data Page and Data Page Use, to find the defined uses of the EDP and DP fields. Future<br>definitions might possibly be expanding the PDU Format field, defining new PDU formats, or increasing the address<br>space</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Extended Data Page bit 25 CAN ID bit 25</th>
<th style="text-align:center">Data Page bit 24 CAN ID bit 24</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>0| 0| SAE J1939 page 0 PGNs<br>0| 1| SAE J1939 page 1 PGNs<br>1| 0| SAE J1939 reserved<br>1| 1| ISO 15765-3 defined</p>
<p>PF：PDU format，确定PDU格式，如PF值区间为0~239（0x00~0xEF），则表明是PDU1格式，如区间为240~255（0xF0~0xFF），则表明是PDU2格式。该场是PGN的组成部分<br>PS：PDU Specific，如为PUD1格式，则该场表示帧的目标地址，如为PDU2格式，则表示组扩展GE（用于扩展PGN的个数）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">PDU Format Field</th>
<th style="text-align:center">PDU Specific Field</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">PDU1 Format</td>
<td style="text-align:center">0-239</td>
<td style="text-align:center">Destination Address</td>
</tr>
</tbody>
</table>
</div>
<p>PDU2 Format |240-255| Group Extension</p>
<p>SA：Source Address，源地址<br>The Source Address field is 8 bits long. There shall only be one device on the network with a given source address.<br>Therefore, the source address field assures that the CAN identifier is unique, as required by CAN. Address management<br>and allocation is detailed in SAE J1939-81. Procedures are defined in SAE J1939-81 to prevent duplication of source<br>addresses. Reference SAE J1939 Appendix B, Tables B2 through B9, for source address assignments</p>
<p>在ID场中，Priority值根据需要调整，EDP和DP一般均为0，PF和PS决定了报文的PGN，SA体现了报文的发送节点。</p>
<h4 id="请求PGN"><a href="#请求PGN" class="headerlink" title="请求PGN"></a>请求PGN</h4><p>PGN55904(EA00)专门用于数据请求</p>
<blockquote>
<p>定义:用于从一个或多个网络设备请求参数组<br>速率:用户定义,推荐每秒不多于2~3次<br>数据长度:3字节<br>数据页:0<br>PDU格式:234(EA)<br>PDU特定域:目标地址<br>缺省优先级:6<br>参数组编号:59904(EA00)<br>参数定义:字节1,2,3位被请求参数组编号</p>
</blockquote>
<p>例如:请求发动机转速<br>Send:18EA00FF 04 F0 00<br>recv:0CF00400 00 00 00 00 00 00 00 00</p>
<h4 id="多帧传输"><a href="#多帧传输" class="headerlink" title="多帧传输"></a>多帧传输</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">缩写</th>
<th style="text-align:center">英文</th>
<th style="text-align:center">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>TP|Transport Protocol|传输协议<br>CM|Connection Management|连接管理<br>RTS|Request to Send|请求发送<br>CTS|Clear to Send|允许发送<br>DT|Data Transmission|数据传输<br>BAM|Broadcast Announce Message|广播报文</p>
<p>TP.CM<br>|数据|Byte0|Byte1|Byte2|Byte3|Byte4|Byte5|Byte6|Byte7|<br>|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|<br>TP.CM|控制字|报文字节数||全部数据包数|最大数据包数|能够发送的数据包数|要发送的下一个数据包数|包编号<br>TP.CM.RTS|16|整个报文的字节数||全部数据包数|最大数据包(默认FF)|PGN||<br>TP.CM.CTS|17|能够发送的包数(不超过RTS[4])|要发送下一数据包编号|FF|FF|PGN||<br>TP.CM.Abort|255|放弃连接原因|FF|FF|FF|PGN||<br>TP.CM.EndofMsgAsk|19|整个报文字节数||全部数据包数|FF|PGN||</p>
<h5 id="请求多帧示例"><a href="#请求多帧示例" class="headerlink" title="请求多帧示例"></a>请求多帧示例</h5><p>T:18EA0081 EC FE 00<br>R:18EC8100 10 12 00 03 FF EC FE 00<br>T:18EC0081 11 03 01 FF FF EC FE 00<br>R:18EB8100 01 XX XX XX XX XX XX XX<br>R:18EB8100 02 XX XX XX XX XX XX XX<br>R:18EB8100 03 XX XX XX XX FF FF FF<br>T:18EC0081 13 12 00 03 FF EC FE 00</p>
<h3 id="J1939网络层（基于J1939-31）"><a href="#J1939网络层（基于J1939-31）" class="headerlink" title="J1939网络层（基于J1939-31）"></a>J1939网络层（基于J1939-31）</h3><h3 id="J1939应用层（基于J1939-71）"><a href="#J1939应用层（基于J1939-71）" class="headerlink" title="J1939应用层（基于J1939-71）"></a>J1939应用层（基于J1939-71）</h3><p>This particular SAE Recommended Practice, SAE J1939-71, describes an Application Layer for<br>vehicle use.<br>定义SPN与PGN</p>
<h3 id="J1939网络管理（基于J1939-81）"><a href="#J1939网络管理（基于J1939-81）" class="headerlink" title="J1939网络管理（基于J1939-81）"></a>J1939网络管理（基于J1939-81）</h3><h3 id="J1939诊断（基于J1939-13-73）"><a href="#J1939诊断（基于J1939-13-73）" class="headerlink" title="J1939诊断（基于J1939-13/73）"></a>J1939诊断（基于J1939-13/73）</h3><p>DM1 Diagnostic Message 1, Active Diagnostic Trouble Codes<br>DM2 Diagnostic Message 2, Previously Active Diagnostic Trouble Codes<br>DM3 Diagnostic Message 3, Diagnostic Data Clear/Reset For Previously Active DTCs<br>DM4 Diagnostic Message 4, Freeze Frame Parameters<br>DM5 Diagnostic Message 5, Diagnostic Readiness<br>DM6 Diagnostic Message 6, Continuously Monitored Systems Test Results<br>DM7 Diagnostic Message 7, Command Non-Continuously Monitored Test<br>DM8 Diagnostic Message 8, Test Results For Non-Continuously Monitored Systems<br>DM9 Diagnostic Message 9, Oxygen Sensor Test Results<br>DM10 Diagnostic Message 10, Non-Continuously Monitored Systems Test IDs Support<br>DM11 Diagnostic Message 11, Diagnostic Data Clear/Reset For Active DTCs<br>DM12 Diagnostic Message 12, Emissions Related Active DTCs<br>DTC Diagnostic Trouble Code<br>FTP Federal Test Procedure<br>MIL Malfunction Indicator Lamp<br>NA Not applicable<br>PID Parameter Identifier (SAE J1587 or SAE J1979)<br>OBD II On Board Diagnostics II</p>
]]></content>
      <tags>
        <tag>J1939</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer权限配置</title>
    <url>/SQLServer%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>GRANT:赋予权限<br>REVOKE:收回已经授予的权限<br>DENY:禁掉某个权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--赋予Jack用户对表student的SELECT,UPDATE,DELETE权限</span></span><br><span class="line">​<span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> student <span class="keyword">TO</span> Jack</span><br><span class="line"></span><br><span class="line"><span class="comment">--收回Jack SELECT 权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">FROM</span> Jack</span><br><span class="line"></span><br><span class="line"><span class="comment">--拒绝Jack 的SELECT 权限</span></span><br><span class="line">DENY <span class="keyword">SELECT</span> <span class="keyword">TO</span> Jack</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> login test <span class="keyword">with</span> password<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>,default_database<span class="operator">=</span>JIAOGUAN  <span class="comment">--此登录账户默认拥有数据库JIAOGUAN的权限</span></span><br><span class="line"></span><br><span class="line">use JIAOGUAN</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> test <span class="keyword">for</span> login test <span class="keyword">with</span> default_schema<span class="operator">=</span>dbo <span class="comment">--dbo为DataBaseOwner的简写，每个数据库都有一个dbo用户</span></span><br><span class="line"><span class="keyword">exec</span> sp_addrolemember <span class="string">&#x27;db_owner&#x27;</span>, <span class="string">&#x27;test&#x27;</span>   <span class="comment">--将test加入 db_owner角色</span></span><br><span class="line"></span><br><span class="line">use JIAOGUAN</span><br><span class="line">deny <span class="keyword">insert</span> <span class="keyword">on</span> Student <span class="keyword">to</span> test <span class="comment">--拒绝test用户对Student表执行insert</span></span><br><span class="line"></span><br><span class="line">use JIAOGUAN</span><br><span class="line">deny <span class="keyword">select</span> <span class="keyword">on</span> Student(gender,birth) <span class="keyword">to</span> test <span class="comment">--拒绝test用户访问Student表的gender和birth字段</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>河北长安中车联网</title>
    <url>/%E6%B2%B3%E5%8C%97%E9%95%BF%E5%AE%89%E4%B8%AD%E8%BD%A6%E8%81%94%E7%BD%91.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="通过VIN获取车型信息"><a href="#通过VIN获取车型信息" class="headerlink" title="通过VIN获取车型信息"></a>通过VIN获取车型信息</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">GetVehInfo_MES</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> _return = <span class="literal">false</span>;</span><br><span class="line">    DataTable dt = DbOperation.GetVehInfo_MES(<span class="keyword">this</span>.tB_vin.Text);<span class="comment">//通过VIN获取车型信息</span></span><br><span class="line">    <span class="keyword">if</span> (dt != <span class="literal">null</span> &amp;&amp; dt.Rows.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VehInfo.SetVehInfo_MES(dt);<span class="comment">//设置车型参数信息</span></span><br><span class="line">        _return = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTable <span class="title">GetVehInfo_MES</span>(<span class="params"><span class="built_in">string</span> vin</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataTable dt = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">string</span> sql = TransferQueryDoc.GetQueryDoc_Login(<span class="string">&quot;L10101&quot;</span>, JsonHelper.JsonSerializerByArrayData&lt;<span class="built_in">string</span>&gt;(<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        vin</span><br><span class="line">    &#125;.ToArray()));</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    strSql.Append(&quot;SELECT * FROM T_CAR_BRIEF_PARAMETER_V WHERE VIN_CODE=&#x27;&quot;);</span></span><br><span class="line"><span class="comment">    strSql.Append(strInfo[0]);</span></span><br><span class="line"><span class="comment">    strSql.Append(&quot;&#x27;&quot;);</span></span><br><span class="line"><span class="comment">    break;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(sql))</span><br><span class="line">    &#123;</span><br><span class="line">        dt = DbOperation.Query(sql, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过MODEL_ID可以获取VSN</p>
<h2 id="侧滑软件测试流程"><a href="#侧滑软件测试流程" class="headerlink" title="侧滑软件测试流程"></a>侧滑软件测试流程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>等待车型 数据库查询当前工位是否有车型信息</span><br><span class="line"><span class="keyword">SELECT</span> INSP_ITEM,TASKID,VIN <span class="keyword">FROM</span> &quot;);</span><br><span class="line">strSql.Append(&quot;CVIC_INSP_TASK_TMP <span class="keyword">WHERE</span> CUR_WP<span class="operator">=</span>&quot;);</span><br><span class="line">strSql.Append(strInfo[0]);</span><br><span class="line">strSql.Append(&quot;  <span class="keyword">AND</span> CHECK_STATE<span class="operator">=</span><span class="string">&#x27;G0&#x27;</span> <span class="keyword">AND</span> LINE_ID<span class="operator">=</span><span class="string">&#x27;&quot;);</span></span><br><span class="line"><span class="string">strSql.Append(strInfo[1]);</span></span><br><span class="line"><span class="string">strSql.Append(&quot;&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> PRIORITY <span class="keyword">DESC</span>,BG_TIME <span class="keyword">ASC</span></span><br><span class="line"><span class="number">2</span>获取车型信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;);</span><br><span class="line">strSql.Append(&quot;CVIC_INSP_TASK_TMP <span class="keyword">WHERE</span> TASKID<span class="operator">=</span><span class="string">&#x27;&quot;);</span></span><br><span class="line"><span class="string">strSql.Append(strInfo[0]);</span></span><br><span class="line"><span class="string">strSql.Append(&quot;&#x27;</span> <span class="keyword">AND</span>  CHECK_STATE<span class="operator">=</span><span class="string">&#x27;G0&#x27;</span> <span class="keyword">AND</span> VIN<span class="operator">=</span><span class="string">&#x27;&quot;);</span></span><br><span class="line"><span class="string">strSql.Append(strInfo[1]);</span></span><br><span class="line"><span class="string">strSql.Append(&quot;&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> PRIORITY <span class="keyword">DESC</span>,BG_TIME <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>获取标准</span><br><span class="line"><span class="keyword">SELECT</span> SVL,SVH <span class="keyword">FROM</span> CVIC_INSP_STD_TMP <span class="keyword">WHERE</span> TASKID<span class="operator">=</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>初始化设备等待车辆</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>保存数据</span><br><span class="line">strSql.Append(&quot;INSERT INTO CVIC_SS_RESULT_TMP(TASKID,VEH_NO,CHECK_DATA,JUDGE,BG_TIME,INSP_SEQ,ED_TIME)VALUES(&quot;);</span><br><span class="line">protected bool SaveResult()</span><br><span class="line">&#123;</span><br><span class="line">    List<span class="operator">&lt;</span>string<span class="operator">&gt;</span> data <span class="operator">=</span> <span class="keyword">new</span> List<span class="operator">&lt;</span>string<span class="operator">&gt;</span>();</span><br><span class="line">    string tmp <span class="operator">=</span> &quot;&quot;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">6</span>; i<span class="operator">+</span><span class="operator">+</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        switch (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            tmp <span class="operator">=</span> VehInfo.TASKID;</span><br><span class="line">            break;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            tmp <span class="operator">=</span> VehInfo.VIN;</span><br><span class="line">            break;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            tmp <span class="operator">=</span> string.Format(&quot;&#123;0:F1&#125;&quot;, VehInfo.DATA[<span class="number">0</span>]);</span><br><span class="line">            break;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            tmp <span class="operator">=</span> string.Format(&quot;&#123;0:N0&#125;&quot;, VehInfo.JUDGE[<span class="number">0</span>]);</span><br><span class="line">            break;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            tmp <span class="operator">=</span> VehInfo.BGTIME;</span><br><span class="line">            break;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            tmp <span class="operator">=</span> VehInfo.CheckSeq.ToString();</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        data.Insert(i, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DbOperation.SaveResult(data);</span><br><span class="line">&#125;</span><br><span class="line">foreach (string s <span class="keyword">in</span> strInfo)</span><br><span class="line">&#123;</span><br><span class="line">strSql.Append(&quot;&#x27;&quot; <span class="operator">+</span> s <span class="operator">+</span> &quot;&#x27;&quot;);</span><br><span class="line">strSql.Append(&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">strSql.Append(&quot;CONVERT(VARCHAR(24), GETDATE(), 120)&quot;);</span><br><span class="line">strSql.Append(&quot;)&quot;);</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Process currentproc = Process.GetCurrentProcess();</span><br><span class="line">Process[] processcollection = Process.GetProcessesByName(currentproc.ProcessName);</span><br><span class="line"><span class="keyword">if</span> (processcollection.Length &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;应用程序已经在运行中。。&quot;</span>);</span><br><span class="line">    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">    Environment.Exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK-相机内参标定</title>
    <url>/BBK-%E7%9B%B8%E6%9C%BA%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A.html</url>
    <content><![CDATA[<p>介绍BBK软件中采用的简易内参标定, 用于计算相机焦距, 本文主要用于老版本HUD和轮眉软件.<br>新版本相机内参在公司出厂前就会标定好, 不需要现场标定, 并且标定方式也与本文不同<br><span id="more"></span></p>
<h2 id="BBK使用的内参标定方法一"><a href="#BBK使用的内参标定方法一" class="headerlink" title="BBK使用的内参标定方法一"></a>BBK使用的内参标定方法一</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>小孔成像图自行脑补</p>
<script type="math/tex; mode=display">D_{\text{物距}} / f_{\text{焦距}} = L_{\text{物体尺寸}} / p_{\text{图像尺寸}}$$$$(D-f)/f = L/p</script><p>其中, $D$为感光芯片到物体的距离, $f$为相机焦距, $L$为物体实际尺寸, $p$为物体在图像中的像素尺寸<br>由于无法准确测量像距所以近似认为,$D= D_{\text{物距}} + f(近似认为像距=焦距)$<br>推导出焦距计算公式为:</p>
<script type="math/tex; mode=display">(D-f)/f = D/f-1 = L/p</script><script type="math/tex; mode=display">D/f = L/p + 1 = (L+p)/p</script><script type="math/tex; mode=display">f/D = p/(L+p)$$$$f = D*p / (L+p)</script><h4 id="误差说明"><a href="#误差说明" class="headerlink" title="误差说明"></a>误差说明</h4><ol>
<li>首先公式中唯一需要测量的D即标靶到相机感光芯片的距离要求测量准确</li>
<li>其次由于近似认为物体成像在一倍焦距上, 所以$D-f$会根据焦距大小不同存在几毫米到到十几毫米的误差, 被测图像越远误差越小</li>
</ol>
<p>示例: $D = 2400$, $p = 1983 <em> 0.00167$, $L = 280$<br>$f = 2400 </em> 1983 <em> 0.00167 / (280 + 1983 </em> 0.00167) = 2400 <em> 3.3116 / (280 + 3.3116) = 28.0533518571$<br>测量误差和像距误差均体现在D上, 假设<strong>误差为10mm</strong>, 会导致$f = 2410 </em> 3.3116 / (280 + 3.3116) = 28.17024$, <strong>焦距误差为0.116888</strong></p>
<p>焦距误差对测量值的影响如下:<br>体现在投影距离上:</p>
<blockquote>
<p>单目:</p>
<blockquote>
<p>测量值: $Distance = 1082 / (2495 <em> 0.00167 / 28.0533518571) = 7284.92471$<br>实际值: $Distance = 1082 / (2495 </em> 0.00167 / 28.17024) = 7315.25928$<br>焦距误差导致的<strong>投影距离误差约为: 30mm</strong></p>
</blockquote>
<p>双目:</p>
<blockquote>
<p>测量值: $Distance = 28.0533518571 / 0.00167 <em> 65 / (1584 - 1169) = 28.0533518571 / 0.00167 </em> 65 / 150 = 7279.31$<br>实际值: $Distance = 28.17024 / 0.00167 <em> 65 / 150 = 7309.643$<br>焦距误差导致的<em>*投影距离误差约为: 30mm</em></em></p>
</blockquote>
</blockquote>
<p>体现在角度上:</p>
<blockquote>
<p>测量值: $Lda = atan(132 <em> 0.00167 / 28.0533518571) = 0.45°$<br>实际值: $Lda = atan(132 </em> 0.00167 / 28.17024) = 0.448°$<br>焦距误差导致的<strong>角度误差约为:0.002°</strong></p>
</blockquote>
<h3 id="BBK软件实现"><a href="#BBK软件实现" class="headerlink" title="BBK软件实现"></a>BBK软件实现</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Camera.IntrinsicsCalibriton(_calibrationAgorithm.DotLeftTop,</span><br><span class="line">    _calibrationAgorithm.DotRightTop,</span><br><span class="line">    _calibrationAgorithm.DotLeftBottom,</span><br><span class="line">    _calibrationAgorithm.DotRightBottom,</span><br><span class="line">    _calibrationAgorithm.DotHorLength,</span><br><span class="line">        _calibrationAgorithm.DotVerLength,</span><br><span class="line">    _calibrationAgorithm.DotDistance);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IntrinsicsCalibriton</span>(<span class="params">PointF LeftTop, PointF RightTop, PointF LeftBottom, PointF RightBottom, <span class="built_in">double</span> LengthHor, <span class="built_in">double</span> LengthVer, <span class="built_in">double</span> Distance</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 计算四点组成矩形的四条边长(单位像素)</span></span><br><span class="line">    <span class="built_in">double</span> L1 = Math.Sqrt((RightTop.X - LeftTop.X) * (RightTop.X - LeftTop.X) + (RightTop.Y - LeftTop.Y) * (RightTop.Y - LeftTop.Y));</span><br><span class="line">    <span class="built_in">double</span> L2 = Math.Sqrt((LeftBottom.X - LeftTop.X) * (LeftBottom.X - LeftTop.X) + (LeftBottom.Y - LeftTop.Y) * (LeftBottom.Y - LeftTop.Y));</span><br><span class="line">    <span class="built_in">double</span> L3 = Math.Sqrt((RightBottom.X - LeftBottom.X) * (RightBottom.X - LeftBottom.X) + (RightBottom.Y - LeftBottom.Y) * (RightBottom.Y - LeftBottom.Y));</span><br><span class="line">    <span class="built_in">double</span> L4 = Math.Sqrt((RightBottom.X - RightTop.X) * (RightBottom.X - RightTop.X) + (RightBottom.Y - RightTop.Y) * (RightBottom.Y - RightTop.Y));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> diffPixelX = (L1 + L3) / <span class="number">2</span>;<span class="comment">// 图像平均横向长度(像素)</span></span><br><span class="line">    <span class="built_in">double</span> diffPixelY = (L2 + L4) / <span class="number">2</span>;<span class="comment">// 图像平均竖向长度(像素)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((diffPixelX == <span class="number">0</span>) || (diffPixelY == <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="string">&quot;boardParam.RightTop , boardParam.LeftTop , boardParam.RightBottom , boardParam.LeftBottom&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">double</span> fx = (Distance * diffPixelX * PixelSize) / (LengthHor + diffPixelX * PixelSize);</span><br><span class="line">    <span class="built_in">double</span> fy = (Distance * diffPixelY * PixelSize) / (LengthVer + diffPixelY * PixelSize);</span><br><span class="line">    <span class="comment">// 相机焦距为XY方向的平均焦距(单位毫米)</span></span><br><span class="line">    Intrinsics_f = fx / <span class="number">2</span> + fy / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 相机内参(单位像素)</span></span><br><span class="line">    Intrinsics_Fx = (fx / PixelSize).Round(<span class="number">4</span>);</span><br><span class="line">    Intrinsics_Fy = (fy / PixelSize).Round(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 相机内参(单位像素)</span></span><br><span class="line">    Intrinsics_Cx = PixelWidth / <span class="number">2</span>;</span><br><span class="line">    Intrinsics_Cy = PixelHeight / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK-相机外参标定</title>
    <url>/BBK-%E7%9B%B8%E6%9C%BA%E5%A4%96%E5%8F%82%E6%A0%87%E5%AE%9A.html</url>
    <content><![CDATA[<p>主要利用Opencv中的Cv2.SolvePnP计算旋转平移矩阵来计算轮眉高度<br><span id="more"></span></p>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;Point2f&gt; ImagePointlist = <span class="keyword">new</span> List&lt;Point2f&gt;();</span><br><span class="line">ImagePointlist.Add(<span class="keyword">new</span> Point2f(_calibrationAgorithm.DotLeftTop.X, _calibrationAgorithm.DotLeftTop.Y));</span><br><span class="line">ImagePointlist.Add(<span class="keyword">new</span> Point2f(_calibrationAgorithm.DotRightTop.X, _calibrationAgorithm.DotRightTop.Y));</span><br><span class="line">ImagePointlist.Add(<span class="keyword">new</span> Point2f(_calibrationAgorithm.DotLeftBottom.X, _calibrationAgorithm.DotLeftBottom.Y));</span><br><span class="line">ImagePointlist.Add(<span class="keyword">new</span> Point2f(_calibrationAgorithm.DotRightBottom.X, _calibrationAgorithm.DotRightBottom.Y));</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span> LengthHor = (<span class="built_in">float</span>)(_calibrationAgorithm.DotHorLength);</span><br><span class="line"><span class="built_in">float</span> LengthVer = (<span class="built_in">float</span>)(_calibrationAgorithm.DotVerLength);</span><br><span class="line">List&lt;Point3f&gt; WorldPointlist = <span class="keyword">new</span> List&lt;Point3f&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_calibrationAgorithm.CoordinateType == ImageAgorithmDot.xCoordinateType.Theory)</span><br><span class="line">&#123;</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f(LengthHor, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f(<span class="number">0</span>, LengthVer * <span class="number">-1</span>, <span class="number">0</span>));</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f(LengthHor , LengthVer * <span class="number">-1</span> , <span class="number">0</span>));</span><br><span class="line">    Camera.ExtrinsicsCalibriton(WorldPointlist, ImagePointlist);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_calibrationAgorithm.CoordinateType == ImageAgorithmDot.xCoordinateType.Actual)</span><br><span class="line">&#123;</span><br><span class="line">    Camera.Point3DX = _calibrationAgorithm.W_DotLeftTop.X;</span><br><span class="line">    Camera.Point3DY = _calibrationAgorithm.W_DotLeftTop.Y;</span><br><span class="line">    Camera.Point3DZ = Math.Abs(_calibrationAgorithm.W_DotLeftTop.Z);</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f((<span class="built_in">float</span>)(_calibrationAgorithm.W_DotRightTop.X + _calibrationAgorithm.W_DotLeftTop.X), (<span class="built_in">float</span>)(_calibrationAgorithm.W_DotRightTop.Y + _calibrationAgorithm.W_DotLeftTop.Y), (<span class="built_in">float</span>)(_calibrationAgorithm.W_DotRightTop.Z + Math.Abs(_calibrationAgorithm.W_DotLeftTop.Z))));</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f((<span class="built_in">float</span>)(_calibrationAgorithm.W_DotLeftBottom.X + _calibrationAgorithm.W_DotLeftTop.X), (<span class="built_in">float</span>)(_calibrationAgorithm.W_DotLeftBottom.Y + _calibrationAgorithm.W_DotLeftTop.Y), (<span class="built_in">float</span>)(_calibrationAgorithm.W_DotLeftBottom.Z + Math.Abs(_calibrationAgorithm.W_DotLeftTop.Z))));</span><br><span class="line">    WorldPointlist.Add(<span class="keyword">new</span> Point3f((<span class="built_in">float</span>)(_calibrationAgorithm.W_DotRightBottom.X + _calibrationAgorithm.W_DotLeftTop.X), (<span class="built_in">float</span>)(_calibrationAgorithm.W_DotRightBottom.Y + _calibrationAgorithm.W_DotLeftTop.Y), (<span class="built_in">float</span>)(_calibrationAgorithm.W_DotRightBottom.Z + Math.Abs(_calibrationAgorithm.W_DotLeftTop.Z))));</span><br><span class="line"></span><br><span class="line">    Camera.ExtrinsicsCalibriton(WorldPointlist, ImagePointlist,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExtrinsicsCalibriton</span>(<span class="params">List&lt;Point3f&gt; WorldPoint, List&lt;Point2f&gt; ImagePoint, <span class="built_in">bool</span> bActual = <span class="literal">false</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span>[] Tvecs = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">double</span>[] Rvecs = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">double</span>[] tvecs = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">double</span>[] rvecs = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">double</span>[,] camera_matrix = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span>[] dist_coeffs = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    camera_matrix[<span class="number">0</span>, <span class="number">0</span>] = Intrinsics_Fx;</span><br><span class="line">    camera_matrix[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    camera_matrix[<span class="number">0</span>, <span class="number">2</span>] = Intrinsics_Cx;</span><br><span class="line">    camera_matrix[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    camera_matrix[<span class="number">1</span>, <span class="number">1</span>] = Intrinsics_Fy;</span><br><span class="line">    camera_matrix[<span class="number">1</span>, <span class="number">2</span>] = Intrinsics_Cy;</span><br><span class="line">    camera_matrix[<span class="number">2</span>, <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    camera_matrix[<span class="number">2</span>, <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    camera_matrix[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dist_coeffs[0] = Distortion_K1;</span></span><br><span class="line">    <span class="comment">//dist_coeffs[1] = Distortion_K2;</span></span><br><span class="line">    <span class="comment">//dist_coeffs[2] = Distortion_P1;</span></span><br><span class="line">    <span class="comment">//dist_coeffs[3] = Distortion_P2;</span></span><br><span class="line">    <span class="comment">//dist_coeffs[4] = Distortion_K3;</span></span><br><span class="line"></span><br><span class="line">    Cv2.SolvePnP(WorldPoint, ImagePoint, camera_matrix, dist_coeffs.ToList(), <span class="keyword">ref</span> Rvecs, <span class="keyword">ref</span> Tvecs);</span><br><span class="line"></span><br><span class="line">    Extrinsics_Rx = Rvecs[<span class="number">0</span>];</span><br><span class="line">    Extrinsics_Ry = Rvecs[<span class="number">1</span>];</span><br><span class="line">    Extrinsics_Rz = Rvecs[<span class="number">2</span>];</span><br><span class="line">    Extrinsics_Tx = Tvecs[<span class="number">0</span>];</span><br><span class="line">    Extrinsics_Ty = Tvecs[<span class="number">1</span>];</span><br><span class="line">    Extrinsics_Tz = Tvecs[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span>[,] rotM = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line">    Cv2.Rodrigues(Rvecs, <span class="keyword">out</span> rotM);  <span class="comment">//将旋转向量变换成旋转矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不参与计算</span></span><br><span class="line">    <span class="built_in">double</span> theta_x = Math.Atan2(rotM[<span class="number">2</span>, <span class="number">1</span>], rotM[<span class="number">2</span>, <span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">double</span> theta_y = Math.Atan2(-rotM[<span class="number">2</span>, <span class="number">0</span>], Math.Sqrt(rotM[<span class="number">0</span>, <span class="number">0</span>] * rotM[<span class="number">0</span>, <span class="number">0</span>] + rotM[<span class="number">1</span>, <span class="number">0</span>] * rotM[<span class="number">1</span>, <span class="number">0</span>]));</span><br><span class="line">    <span class="built_in">double</span> theta_z = Math.Atan2(rotM[<span class="number">1</span>, <span class="number">0</span>], rotM[<span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//和上面一样</span></span><br><span class="line">    <span class="comment">//theta_x = Math.Atan2(rotM[2, 1], rotM[2, 2]);</span></span><br><span class="line">    <span class="comment">//theta_y = Math.Atan2(-rotM[2, 0], Math.Sqrt(rotM[2, 1] * rotM[2, 1] + rotM[2, 2] * rotM[2, 2]));</span></span><br><span class="line">    <span class="comment">//theta_z = Math.Atan2(rotM[1, 0], rotM[0, 0]);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将弧度转化为角度</span></span><br><span class="line">    Extrinsics_Rx_Angle = theta_x * (<span class="number">180</span> / Math.PI);</span><br><span class="line">    <span class="keyword">if</span> (Extrinsics_Rx_Angle &gt; <span class="number">90</span>)</span><br><span class="line">        Extrinsics_Rx_Angle = <span class="number">180</span> - Extrinsics_Rx_Angle;</span><br><span class="line">    <span class="keyword">if</span> (Extrinsics_Rx_Angle &lt; <span class="number">-90</span>)</span><br><span class="line">        Extrinsics_Rx_Angle = <span class="number">-180</span> - Extrinsics_Rx_Angle;</span><br><span class="line">    Extrinsics_Ry_Angle = theta_y * (<span class="number">180</span> / Math.PI);</span><br><span class="line">    Extrinsics_Rz_Angle = theta_z * (<span class="number">180</span> / Math.PI);</span><br><span class="line"></span><br><span class="line">    Matrix matrix = (<span class="keyword">new</span> Matrix(Tvecs) * Matrix.transpose(<span class="keyword">new</span> Matrix(rotM)));</span><br><span class="line">    matrix = <span class="keyword">new</span> Matrix(<span class="keyword">new</span> <span class="built_in">double</span>[] &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;) - matrix;</span><br><span class="line"></span><br><span class="line">    Extrinsics_Tx_mm = matrix[<span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">    Extrinsics_Ty_mm = matrix[<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    Extrinsics_Tz_mm = matrix[<span class="number">0</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (bActual)</span><br><span class="line">    &#123;</span><br><span class="line">        Extrinsics_Tx_mm = Extrinsics_Tx_mm + Point3DX;</span><br><span class="line">        Extrinsics_Ty_mm = Extrinsics_Ty_mm + Point3DY;</span><br><span class="line">        Extrinsics_Tz_mm = Extrinsics_Tz_mm + Point3DZ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK查询软件新增查询链接</title>
    <url>/BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5.html</url>
    <content><![CDATA[<p>BBK查询软件新增或修改数据库链接字符串<br>可手动更改链接字符串或根据以下步骤自动生成<br><span id="more"></span></p>
<h2 id="新增本地链接Local"><a href="#新增本地链接Local" class="headerlink" title="新增本地链接Local"></a>新增本地链接Local</h2><ol>
<li>登录管理员后勾选编辑模式</li>
<li>双击要更改的名称或点击添加连接<br> <img src="BBK查询软件新增查询链接\选择链接.png" alt="选择链接"></li>
<li>点击<strong>创建链接字符串</strong>选择相应的数据源, 本地PostgreSql选择如下<br> <img src="BBK查询软件新增查询链接\选择数据源.png" alt="选择数据源"></li>
<li>配置连接属性如下, 其中Host可配置被访问数据库的ip<br><img src="BBK查询软件新增查询链接\连接属性.png" alt="连接属性"></li>
<li>单击确定即可</li>
</ol>
<h2 id="新增服务器链接Server"><a href="#新增服务器链接Server" class="headerlink" title="新增服务器链接Server"></a>新增服务器链接Server</h2><ol>
<li>登录管理员后勾选编辑模式</li>
<li>双击要更改的名称或点击添加连接后点击<strong>创建链接字符串</strong>选择相应的数据源, 服务器SQLServer选择如下<br> <img src="BBK查询软件新增查询链接\选择数据源Server.png" alt="选择数据源"></li>
<li>配置链接属性如下, 其中Server name可配置被访问数据库的ip<br> <img src="BBK查询软件新增查询链接\连接属性Server.png" alt="连接属性"></li>
<li>单击确定即可</li>
</ol>
]]></content>
      <categories>
        <category>BBK</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 修改历史提交的Commit信息</title>
    <url>/Git-%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E7%9A%84Commit%E4%BF%A1%E6%81%AF.html</url>
    <content><![CDATA[<p>在提交远程仓库前先精简本地主分支的commit, 然后再提交, 保证远程仓库commit的整洁<br>每次提交最好只包含一个功能性更改, 方便后续回溯</p>
<p>在 Git 中修改历史提交需要谨慎操作，因为这会影响仓库的提交历史。以下是几种常见的修改历史提交的方法，以及它们的适用场景和注意事项：</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="1-修改最近一次提交（尚未推送）"><a href="#1-修改最近一次提交（尚未推送）" class="headerlink" title="1. 修改最近一次提交（尚未推送）"></a>1. <strong>修改最近一次提交</strong>（尚未推送）</h3><ul>
<li><strong>场景</strong>：修改最后一次提交的提交信息或文件内容。</li>
<li><p><strong>命令</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<ul>
<li>修改提交信息：直接运行后会进入编辑器修改信息。</li>
<li>添加文件到提交：先 <code>git add &lt;file&gt;</code>，再运行 <code>git commit --amend --no-edit</code>（保留原提交信息）。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-修改更早的提交（交互式变基）"><a href="#2-修改更早的提交（交互式变基）" class="headerlink" title="2. 修改更早的提交（交互式变基）"></a>2. <strong>修改更早的提交</strong>（交互式变基）</h3><ul>
<li><strong>场景</strong>：修改某个历史提交（如提交信息、文件内容）或合并多个提交。</li>
<li><p><strong>步骤</strong>：</p>
<ol>
<li><p>启动交互式变基：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~n  <span class="comment"># 例如 HEAD~3 表示最近 3 次提交</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在编辑器中找到要修改的提交行，将 <code>pick</code> 改为 <code>edit</code>，保存退出。</p>
</li>
<li>Git 会停在目标提交处，此时可以：<ul>
<li>修改文件内容：<code>git add &lt;file&gt;</code>。</li>
<li>修改提交信息：<code>git commit --amend</code>。</li>
</ul>
</li>
<li><p>继续变基：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果中途出错，可以用 <code>git rebase --abort</code> 终止变基。</p>
</li>
</ol>
</li>
</ul>
<hr>
<h3 id="3-删除历史中的某个提交"><a href="#3-删除历史中的某个提交" class="headerlink" title="3. 删除历史中的某个提交"></a>3. <strong>删除历史中的某个提交</strong></h3><ul>
<li><strong>场景</strong>：完全删除某个错误的提交。</li>
<li><p><strong>步骤</strong>：</p>
<ol>
<li><p>运行交互式变基：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~n</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除对应提交的行（或将其标记为 <code>drop</code>）。</p>
</li>
<li>保存退出，Git 会自动跳过该提交。</li>
</ol>
</li>
</ul>
<hr>
<h3 id="4-合并多个提交"><a href="#4-合并多个提交" class="headerlink" title="4. 合并多个提交"></a>4. <strong>合并多个提交</strong></h3><ul>
<li><strong>场景</strong>：将多个小提交合并为一个逻辑完整的提交。</li>
<li><p><strong>步骤</strong>：</p>
<ol>
<li><p>运行交互式变基：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~n</span><br></pre></td></tr></table></figure>
</li>
<li><p>将需要合并的提交行的 <code>pick</code> 改为 <code>squash</code>（合并并保留提交信息）或 <code>fixup</code>（合并但丢弃提交信息）。</p>
</li>
<li>保存后 Git 会提示编辑合并后的提交信息。</li>
</ol>
</li>
</ul>
<hr>
<h3 id="5-强制推送修改后的历史"><a href="#5-强制推送修改后的历史" class="headerlink" title="5. 强制推送修改后的历史"></a>5. <strong>强制推送修改后的历史</strong></h3><p>如果修改的是已推送到远程仓库的历史，需强制推送：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --force</span><br><span class="line"><span class="comment"># 更安全的选项（避免覆盖他人提交）</span></span><br><span class="line">git push --force-with-lease</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：强制推送会覆盖远程历史，需确保团队其他成员已同步你的修改。</p>
<hr>
<h3 id="6-彻底删除敏感信息"><a href="#6-彻底删除敏感信息" class="headerlink" title="6. 彻底删除敏感信息"></a>6. <strong>彻底删除敏感信息</strong></h3><p>如果提交中误添加了敏感信息（如密码），需使用 <code>git filter-repo</code> 工具：</p>
<ol>
<li><p>安装 <code>git-filter-repo</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install git-filter-repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除包含敏感信息的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-repo --path-sensitive-file --invert-paths</span><br></pre></td></tr></table></figure>
</li>
<li><p>强制推送清理后的仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --force --all</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h3><ol>
<li><strong>仅限本地未推送的提交</strong>：修改已推送的历史会影响他人，需与团队协商。</li>
<li><strong>备份分支</strong>：操作前备份当前分支（<code>git branch backup</code>）。</li>
<li><strong>慎用 <code>--force</code></strong>：强制推送可能导致他人代码丢失。</li>
</ol>
<hr>
<h3 id="示例：修改某次旧提交的信息"><a href="#示例：修改某次旧提交的信息" class="headerlink" title="示例：修改某次旧提交的信息"></a>示例：修改某次旧提交的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 启动交互式变基（假设修改倒数第3次提交）</span></span><br><span class="line">git rebase -i HEAD~3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将目标提交行的 &quot;pick&quot; 改为 &quot;edit&quot;，保存退出</span></span><br><span class="line"><span class="comment"># 3. 修改提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;New commit message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 继续变基</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 强制推送（如果已推送过）</span></span><br><span class="line">git push --force-with-lease</span><br></pre></td></tr></table></figure>
<p>如果需要更复杂的操作（如拆分提交），可结合 <code>git reset</code> 逐步重构历史。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中修改KaTeX界定符</title>
    <url>/Hexo%E4%B8%AD%E4%BF%AE%E6%94%B9KaTeX%E7%95%8C%E5%AE%9A%E7%AC%A6.html</url>
    <content><![CDATA[<p>在 Hexo 中修改 KaTeX 的界定符（定界符）<br><span id="more"></span></p>
<p>主要涉及 <strong>两个位置</strong>：<strong>主题模板文件</strong>和 <strong>KaTeX 初始化脚本</strong>。<br>以下是详细操作步骤：</p>
<hr>
<h3 id="1-修改位置：主题的-footer-模板文件"><a href="#1-修改位置：主题的-footer-模板文件" class="headerlink" title="1. 修改位置：主题的 footer 模板文件"></a><strong>1. 修改位置：主题的 <code>footer</code> 模板文件</strong></h3><p>KaTeX 的界定符配置在初始化脚本中，通常位于 Next 主题的 <code>footer</code> 模板文件中。<br>文件路径：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes/next/layout/_partials/footer.njk</span><br><span class="line">或</span><br><span class="line">themes/next/layout/_partials/footer.swig</span><br></pre></td></tr></table></figure>
<h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a><strong>操作步骤：</strong></h4><ol>
<li>打开对应的 <code>footer</code> 文件（根据你的主题模板引擎，可能是 <code>.njk</code> 或 <code>.swig</code>）。</li>
<li><p>找到引入 <code>auto-render.min.js</code> 的脚本，修改 <code>delimiters</code> 参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">renderMathInElement</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">delimiters</span>: [</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改这里的 left 和 right 值</span></span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">left</span>: <span class="string">&#x27;$$&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;$$&#x27;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,   <span class="comment">// 块级公式</span></span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">left</span>: <span class="string">&#x27;$&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;$&#x27;</span>, <span class="attr">display</span>: <span class="literal">false</span>&#125;     <span class="comment">// 行内公式</span></span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">throwOnError</span>: <span class="literal">false</span>  <span class="comment">// 忽略公式错误</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将 <code>left</code> 和 <code>right</code> 的值改为你想要的界定符。例如：</p>
<ul>
<li><p><strong>改用 <code>\(...\)</code> 和 <code>\[...\]</code></strong>（LaTeX 标准风格）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">delimiters</span>: [</span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;\\[&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;\\]&#x27;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,  <span class="comment">// 块级公式</span></span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;\\(&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;\\)&#x27;</span>, <span class="attr">display</span>: <span class="literal">false</span>&#125;   <span class="comment">// 行内公式</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>改用自定义符号</strong>（如 <code>@...@</code>）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">delimiters</span>: [</span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;@@&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;@@&#x27;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,  <span class="comment">// 块级公式</span></span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;@&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;@&#x27;</span>, <span class="attr">display</span>: <span class="literal">false</span>&#125;     <span class="comment">// 行内公式</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="2-同步修改-Markdown-中的公式写法"><a href="#2-同步修改-Markdown-中的公式写法" class="headerlink" title="2. 同步修改 Markdown 中的公式写法"></a><strong>2. 同步修改 Markdown 中的公式写法</strong></h3><p>修改界定符后，需在文章的 Markdown 中使用新的定界符。例如：</p>
<ul>
<li><strong>原写法</strong>：<script type="math/tex">E = mc^2</script> 和 $$$\sum_{i=1}^n i$$$</li>
<li><p><strong>修改后</strong>（使用 <code>\(...\)</code> 和 <code>\[...\]</code>）：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">行内公式：<span class="keyword">\\</span>(E = mc<span class="built_in">^</span>2<span class="keyword">\\</span>)</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line"><span class="keyword">\\</span>[</span><br><span class="line"><span class="keyword">\sum</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>n i</span><br><span class="line"><span class="keyword">\\</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="3-处理转义问题"><a href="#3-处理转义问题" class="headerlink" title="3. 处理转义问题"></a><strong>3. 处理转义问题</strong></h3><p>如果界定符包含特殊字符（如 <code>\</code> 或 <code>@</code>），需确保 Markdown 渲染器不会转义它们：</p>
<h4 id="1-在-Hexo-的-config-yml-中配置"><a href="#1-在-Hexo-的-config-yml-中配置" class="headerlink" title="(1) 在 Hexo 的 _config.yml 中配置"></a>(1) 在 Hexo 的 <code>_config.yml</code> 中配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span>      <span class="comment"># 允许 HTML 标签</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span>   <span class="comment"># 关闭自动换行转换</span></span><br><span class="line">  <span class="attr">linkify:</span> <span class="literal">false</span>  <span class="comment"># 关闭自动链接识别（避免 @ 被误识别）</span></span><br></pre></td></tr></table></figure>
<h4 id="2-转义反斜杠（仅限-和-场景）"><a href="#2-转义反斜杠（仅限-和-场景）" class="headerlink" title="(2) 转义反斜杠（仅限 \( 和 \[ 场景）"></a>(2) 转义反斜杠（仅限 <code>\(</code> 和 <code>\[</code> 场景）</h4><p>在 Markdown 中，如果使用 <code>\(...\)</code> 或 <code>\[...\]</code>，需在公式中写双反斜杠：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\\</span>[</span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>a<span class="built_in">^</span>b f(x) dx</span><br><span class="line"><span class="keyword">\\</span>]</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4-测试修改结果"><a href="#4-测试修改结果" class="headerlink" title="4. 测试修改结果"></a><strong>4. 测试修改结果</strong></h3><ol>
<li><p>清理缓存并生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动本地服务器预览：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查公式是否按新界定符渲染，打开浏览器控制台（F12）：</p>
<ul>
<li>确保无 JS 报错。</li>
<li>检查公式是否被正确包裹（如 <code>&lt;span class=&quot;katex&quot;&gt;</code>）。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a><strong>5. 常见问题</strong></h3><h4 id="问题1：修改后公式未渲染"><a href="#问题1：修改后公式未渲染" class="headerlink" title="问题1：修改后公式未渲染"></a><strong>问题1：修改后公式未渲染</strong></h4><ul>
<li><strong>原因</strong>：界定符修改未同步到所有位置（如文章中的公式未改用新符号）。</li>
<li><strong>解决</strong>：全局搜索旧界定符（如 <code>$</code>），替换为新的。</li>
</ul>
<h4 id="问题2：-被转义为"><a href="#问题2：-被转义为" class="headerlink" title="问题2：\ 被转义为 \\"></a><strong>问题2：<code>\</code> 被转义为 <code>\\</code></strong></h4><ul>
<li><strong>原因</strong>：Markdown 渲染器自动转义了反斜杠。</li>
<li><p><strong>解决</strong>：在 Hexo 配置中关闭转义：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typographer:</span> <span class="literal">false</span>  <span class="comment"># 关闭智能符号转换</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="问题3：与代码高亮冲突"><a href="#问题3：与代码高亮冲突" class="headerlink" title="问题3：与代码高亮冲突"></a><strong>问题3：与代码高亮冲突</strong></h4><ul>
<li><strong>现象</strong>：<code>@</code> 或 <code>\</code> 被代码语法高亮干扰。</li>
<li><strong>解决</strong>：避免使用与代码语法冲突的界定符（如 <code>` </code> 或 <code>*</code>）。</li>
</ul>
<hr>
<h3 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a><strong>示例配置</strong></h3><h4 id="目标界定符"><a href="#目标界定符" class="headerlink" title="目标界定符"></a>目标界定符</h4><ul>
<li>行内公式：<code>\\(...\\)</code></li>
<li>块级公式：<code>\\[...\\]</code></li>
</ul>
<h4 id="修改后的-footer-模板脚本"><a href="#修改后的-footer-模板脚本" class="headerlink" title="修改后的 footer 模板脚本"></a>修改后的 <code>footer</code> 模板脚本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">onload</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">    document.addEventListener(&#x27;DOMContentLoaded&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      renderMathInElement(document.body, &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">        delimiters: [</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#123;left: &#x27;\\[&#x27;, right: &#x27;\\]&#x27;, display: true&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#123;left: &#x27;\\(&#x27;, right: &#x27;\\)&#x27;, display: false&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">        ],</span></span></span><br><span class="line"><span class="string"><span class="tag">        throwOnError: false</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#125;);</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;);</span></span></span><br><span class="line"><span class="string"><span class="tag">  &quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="对应的-Markdown-公式写法"><a href="#对应的-Markdown-公式写法" class="headerlink" title="对应的 Markdown 公式写法"></a>对应的 Markdown 公式写法</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">行内公式：<span class="keyword">\\</span>( <span class="keyword">\sqrt</span>&#123;2&#125; <span class="keyword">\approx</span> 1.414 <span class="keyword">\\</span>)</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line"><span class="keyword">\\</span>[</span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;-<span class="keyword">\infty</span>&#125;<span class="built_in">^</span><span class="keyword">\infty</span> e<span class="built_in">^</span>&#123;-x<span class="built_in">^</span>2&#125; dx = <span class="keyword">\sqrt</span>&#123;<span class="keyword">\pi</span>&#125;</span><br><span class="line"><span class="keyword">\\</span>]</span><br></pre></td></tr></table></figure>
<hr>
<p>通过以上步骤，即可自定义 KaTeX 的界定符，解决与其他语法（如 Markdown 表格、代码块）的冲突问题。</p>
]]></content>
      <categories>
        <category>KaTeX</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>KaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp读写Ini文件</title>
    <url>/CSharp%E8%AF%BB%E5%86%99Ini%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<p>自用<br><span id="more"></span></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniFile</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">System.Runtime.InteropServices.DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">long</span> <span class="title">WritePrivateProfileString</span>(<span class="params"><span class="built_in">byte</span>[] section, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] val, <span class="built_in">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">System.Runtime.InteropServices.DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">GetPrivateProfileString</span>(<span class="params"><span class="built_in">byte</span>[] section, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] def, System.Text.StringBuilder retVal, <span class="built_in">int</span> size, <span class="built_in">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">System.Runtime.InteropServices.DllImport(<span class="string">&quot;kernel32&quot;</span>, EntryPoint = <span class="string">&quot;GetPrivateProfileString&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">GetPrivateProfileString2</span>(<span class="params"><span class="built_in">byte</span>[] section, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] def, <span class="built_in">byte</span>[] retVal, <span class="built_in">int</span> size, <span class="built_in">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> sPath = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniFile</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.sPath = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// section=配置节，key=键名，value=键值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        WritePrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="keyword">value</span>), sPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span>, <span class="built_in">string</span> sPath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        WritePrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="keyword">value</span>), sPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// section=配置节，key=键名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReadIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> sPath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Text.StringBuilder temp = <span class="keyword">new</span> System.Text.StringBuilder(<span class="number">255</span>);</span><br><span class="line">        GetPrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="string">&quot;&quot;</span>), temp, <span class="number">255</span>, sPath);</span><br><span class="line">        <span class="comment">//return temp.ToString();</span></span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(Encoding.Default.GetBytes(temp.ToString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReadIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Text.StringBuilder temp = <span class="keyword">new</span> System.Text.StringBuilder(<span class="number">255</span>);</span><br><span class="line">        GetPrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="string">&quot;&quot;</span>), temp, <span class="number">255</span>, sPath);</span><br><span class="line">        <span class="comment">//return temp.ToString();</span></span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(Encoding.Default.GetBytes(temp.ToString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreatIni</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            FileStream FS = <span class="keyword">new</span> FileStream(path, FileMode.CreateNew);</span><br><span class="line">            FS.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">byte</span>[] <span class="title">GetBytes</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> encodingName = <span class="string">&quot;utf-8&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> ? <span class="literal">null</span> : Encoding.GetEncoding(encodingName).GetBytes(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ReadSections</span>(<span class="params"><span class="built_in">string</span> iniFilename</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Byte[] buf = <span class="keyword">new</span> Byte[<span class="number">65536</span>];</span><br><span class="line">        <span class="built_in">uint</span> len = GetPrivateProfileString2(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, buf, buf.Length, iniFilename);</span><br><span class="line">        <span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            <span class="keyword">if</span> (buf[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(Encoding.UTF8.GetString(buf, j, i - j));</span><br><span class="line">                j = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ReadKeys</span>(<span class="params"><span class="built_in">string</span> SectionName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Byte[] buf = <span class="keyword">new</span> Byte[<span class="number">65536</span>];</span><br><span class="line">        <span class="built_in">uint</span> len = GetPrivateProfileString2(GetBytes(SectionName), <span class="literal">null</span>, <span class="literal">null</span>, buf, buf.Length, sPath);</span><br><span class="line">        <span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            <span class="keyword">if</span> (buf[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(Encoding.UTF8.GetString(buf, j, i - j));</span><br><span class="line">                j = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; <span class="title">ReadKeyValues</span>(<span class="params"><span class="built_in">string</span> SectionName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; keyValues = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; keys = ReadKeys(SectionName);</span><br><span class="line">        keys.ForEach((key) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            keyValues.Add(key, ReadIni(SectionName, key));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> keyValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Ini</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加KaTeX插件-问题处理</title>
    <url>/Hexo%E6%B7%BB%E5%8A%A0KaTeX%E6%8F%92%E4%BB%B6-%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html</url>
    <content><![CDATA[<p>如果按照 Hexo添加KaTeX插件 仍未生效，可能是某些环节配置错误或冲突导致<br><span id="more"></span></p>
<hr>
<h3 id="1-检查关键依赖安装"><a href="#1-检查关键依赖安装" class="headerlink" title="1. 检查关键依赖安装"></a><strong>1. 检查关键依赖安装</strong></h3><p>确保以下依赖已正确安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保渲染器和插件存在</span></span><br><span class="line">npm list hexo-renderer-markdown-it</span><br><span class="line">npm list @traptitech/markdown-it-katex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果未安装，重新执行：</span></span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it @traptitech/markdown-it-katex --save</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2-确认-Hexo-全局配置"><a href="#2-确认-Hexo-全局配置" class="headerlink" title="2. 确认 Hexo 全局配置"></a><strong>2. 确认 Hexo 全局配置</strong></h3><p>在 Hexo 根目录的 <code>_config.yml</code> 中，检查 <code>markdown-it</code> 的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span>  <span class="comment"># 必须开启，否则公式中的 HTML 标签会被转义</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;@traptitech/markdown-it-katex&quot;</span>  <span class="comment"># 确保插件名称正确</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-检查-Next-主题配置"><a href="#3-检查-Next-主题配置" class="headerlink" title="3. 检查 Next 主题配置"></a><strong>3. 检查 Next 主题配置</strong></h3><p>在 <code>themes/next/_config.yml</code> 中，确保以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭 MathJax 和默认的数学公式渲染</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 启用 KaTeX</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 如果 vendor_css 设为 true，需手动添加 CSS（不建议新手开启）</span></span><br><span class="line">    <span class="attr">vendor_css:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4-验证资源加载路径"><a href="#4-验证资源加载路径" class="headerlink" title="4. 验证资源加载路径"></a><strong>4. 验证资源加载路径</strong></h3><h4 id="1-检查-CSS-和-JS-是否引入"><a href="#1-检查-CSS-和-JS-是否引入" class="headerlink" title="(1) 检查 CSS 和 JS 是否引入"></a>(1) 检查 CSS 和 JS 是否引入</h4><ul>
<li><p><strong>CSS 位置</strong>：<br>打开生成的网页，按 <code>F12</code> 进入开发者工具 → <code>Network</code> 标签 → 刷新页面，检查是否有 <code>katex.min.css</code> 的请求。若未加载，说明主题模板未正确插入 CSS。</p>
</li>
<li><p><strong>JS 位置</strong>：<br>同样检查 <code>katex.min.js</code> 和 <code>auto-render.min.js</code> 是否加载。如果未加载，检查主题模板文件的修改是否正确。</p>
</li>
</ul>
<h4 id="2-修复资源路径"><a href="#2-修复资源路径" class="headerlink" title="(2) 修复资源路径"></a>(2) 修复资源路径</h4><ul>
<li><p>如果使用的是旧版 Next 主题，模板文件路径可能是 <code>.swig</code> 或 <code>.njk</code>，确保修改了正确的文件：</p>
<ul>
<li><strong>CSS</strong>：<code>themes/next/layout/_partials/head/head.njk</code>（或 <code>.swig</code>）</li>
<li><strong>JS</strong>：<code>themes/next/layout/_partials/footer.njk</code>（或 <code>.swig</code>）</li>
</ul>
</li>
<li><p>手动指定最新版本 CDN（避免缓存问题）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-XjKyOOzGykjIg/xn6ACkxIRv6gm2t6/E2lbLU5ZqH7sBE4k1pL5qfhMcJcH4dZnF&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCkM5qKq6gYVvokzNvAQu3fT8KX4l&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">onload</span>=<span class="string">&quot;renderMathInElement(document.body, &#123; delimiters: [&#123;left: &#x27;$$&#x27;, right: &#x27;$$&#x27;, display: true&#125;, &#123;left: &#x27;$&#x27;, right: &#x27;$&#x27;, display: false&#125;] &#125;);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="5-检查文章-Front-matter"><a href="#5-检查文章-Front-matter" class="headerlink" title="5. 检查文章 Front-matter"></a><strong>5. 检查文章 Front-matter</strong></h3><p>在需要渲染公式的文章头部，确保已添加 <code>katex: true</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">测试文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-01-01</span></span><br><span class="line"><span class="attr">katex:</span> <span class="literal">true</span>  <span class="comment"># 必须开启</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-处理特殊符号转义"><a href="#6-处理特殊符号转义" class="headerlink" title="6. 处理特殊符号转义"></a><strong>6. 处理特殊符号转义</strong></h3><p>如果公式中的 <code>_</code> 或 <code>*</code> 被错误转义，需调整渲染器配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo 根目录的 _config.yml</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7-清理缓存并重新生成"><a href="#7-清理缓存并重新生成" class="headerlink" title="7. 清理缓存并重新生成"></a><strong>7. 清理缓存并重新生成</strong></h3><p>Hexo 的缓存可能导致修改未生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --debug</span><br></pre></td></tr></table></figure>
<p>生成后，检查 <code>public</code> 目录下对应文章的 HTML 文件：</p>
<ul>
<li>搜索 <code>katex.min.css</code> 和 <code>katex.min.js</code>，确认资源已插入。</li>
<li>检查公式是否被包裹在 <code>&lt;span class=&quot;katex&quot;&gt;...&lt;/span&gt;</code> 中。</li>
</ul>
<hr>
<h3 id="8-常见问题排查"><a href="#8-常见问题排查" class="headerlink" title="8. 常见问题排查"></a><strong>8. 常见问题排查</strong></h3><h4 id="1-公式被渲染为纯文本"><a href="#1-公式被渲染为纯文本" class="headerlink" title="(1) 公式被渲染为纯文本"></a>(1) 公式被渲染为纯文本</h4><ul>
<li><strong>原因</strong>：KaTeX 资源未加载或初始化失败。</li>
<li><strong>解决</strong>：按 <code>F12</code> 打开控制台，查看是否有 <code>ReferenceError</code> 或资源加载错误。如果发现 <code>renderMathInElement is not defined</code>，说明 <code>auto-render.min.js</code> 未正确加载。</li>
</ul>
<h4 id="2-公式显示错乱"><a href="#2-公式显示错乱" class="headerlink" title="(2) 公式显示错乱"></a>(2) 公式显示错乱</h4><ul>
<li><strong>原因</strong>：$$<code>或</code>$$$ 定界符被其他插件干扰。</li>
<li><p><strong>解决</strong>：在 <code>markdown-it</code> 配置中强制指定定界符：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo 的 _config.yml</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;@traptitech/markdown-it-katex&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">delimiters:</span> </span><br><span class="line">          <span class="attr">left:</span> <span class="string">&#x27;$&#x27;</span><span class="string">,</span> <span class="attr">right:</span> <span class="string">&#x27;$&#x27;</span><span class="string">,</span> <span class="attr">display:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">left:</span> <span class="string">&#x27;$$&#x27;</span><span class="string">,</span> <span class="attr">right:</span> <span class="string">&#x27;$$&#x27;</span><span class="string">,</span> <span class="attr">display:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-与代码高亮冲突"><a href="#3-与代码高亮冲突" class="headerlink" title="(3) 与代码高亮冲突"></a>(3) 与代码高亮冲突</h4><ul>
<li><strong>原因</strong>：某些代码块语法与 KaTeX 冲突。</li>
<li><strong>解决</strong>：在公式前后添加空行，避免与其他内容粘连。</li>
</ul>
<hr>
<h3 id="9-终极测试"><a href="#9-终极测试" class="headerlink" title="9. 终极测试"></a><strong>9. 终极测试</strong></h3><p>创建一个最简单的测试文章，内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: KaTeX 测试</span><br><span class="line">date: 2023-01-01</span><br><span class="line"><span class="section">katex: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">行内公式：$E = mc^2$</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line">$$ \sum<span class="emphasis">_&#123;i=1&#125;^n i = \frac&#123;n(n+1)&#125;&#123;2&#125; $$</span></span><br></pre></td></tr></table></figure>
<p>如果仍不生效，可能是主题兼容性问题。尝试：</p>
<ol>
<li>更新 Next 主题到最新版。</li>
<li>换用其他 KaTeX 集成方案（如 <a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a>）。</li>
</ol>
<hr>
<p>按以上步骤逐一排查，可解决 99% 的 KaTeX 未生效问题。如果问题依旧，请提供以下信息：</p>
<ol>
<li>浏览器控制台截图（Network 和 Console 标签）。</li>
<li>测试文章的生成后的 HTML 片段。</li>
<li>Hexo 和 Next 主题的版本号。</li>
</ol>
]]></content>
      <categories>
        <category>KaTeX</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>KaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加KaTeX插件</title>
    <url>/Hexo%E6%B7%BB%E5%8A%A0KaTeX%E6%8F%92%E4%BB%B6.html</url>
    <content><![CDATA[<p>在 Hexo 的 Next 主题中集成 KaTeX 数学公式渲染<br><span id="more"></span></p>
<hr>
<h3 id="1-更换-Markdown-渲染器"><a href="#1-更换-Markdown-渲染器" class="headerlink" title="1. 更换 Markdown 渲染器"></a>1. <strong>更换 Markdown 渲染器</strong></h3><p>Hexo 默认的渲染器可能不支持 KaTeX，需更换为兼容的渲染器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save  <span class="comment"># 卸载默认渲染器</span></span><br><span class="line">npm i hexo-renderer-markdown-it --save  <span class="comment"># 安装 markdown-it 渲染器</span></span><br><span class="line">npm install @traptitech/markdown-it-katex --save  <span class="comment"># 安装 KaTeX 插件</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2-配置-markdown-it"><a href="#2-配置-markdown-it" class="headerlink" title="2. 配置 markdown-it"></a>2. <strong>配置 <code>markdown-it</code></strong></h3><p>在 Hexo 根目录的 <code>_config.yml</code> 中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;@traptitech/markdown-it-katex&quot;</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-修改-Next-主题配置"><a href="#3-修改-Next-主题配置" class="headerlink" title="3. 修改 Next 主题配置"></a>3. <strong>修改 Next 主题配置</strong></h3><p>在 Next 主题的配置文件 (<code>themes/next/_config.yml</code>) 中：</p>
<ul>
<li><p><strong>关闭 MathJax</strong>（避免冲突）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启用 KaTeX</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copy_tex:</span> <span class="literal">true</span>  <span class="comment"># 允许复制公式代码</span></span><br><span class="line">  <span class="attr">vendor_css:</span> <span class="literal">false</span>  <span class="comment"># 如果手动加载 CSS 可设为 true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="4-引入-KaTeX-资源"><a href="#4-引入-KaTeX-资源" class="headerlink" title="4. 引入 KaTeX 资源"></a>4. <strong>引入 KaTeX 资源</strong></h3><p>在主题布局文件中添加 KaTeX 的 CSS 和 JS：</p>
<ul>
<li><p>编辑 <code>themes/next/layout/_partials/head/head.swig</code>，在 <code>&lt;head&gt;</code> 内添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.katex.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css&quot;</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>themes/next/layout/_partials/footer.njk</code>（或类似文件），在末尾添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.katex.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">onload</span>=<span class="string">&quot;renderMathInElement(document.body, &#123; delimiters: [&#123;left: &#x27;$$&#x27;, right: &#x27;$$&#x27;, display: true&#125;, &#123;left: &#x27;$&#x27;, right: &#x27;$&#x27;, display: false&#125;] &#125;);&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="5-文章启用-KaTeX"><a href="#5-文章启用-KaTeX" class="headerlink" title="5. 文章启用 KaTeX"></a>5. <strong>文章启用 KaTeX</strong></h3><p>在文章的 Front-matter 中添加 <code>katex: true</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试文章</span><br><span class="line">date: 2023-01-01</span><br><span class="line"><span class="section">katex: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">行内公式：$E = mc^2$</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line">$$ \sum<span class="emphasis">_&#123;i=1&#125;^n i = \frac&#123;n(n+1)&#125;&#123;2&#125; $$</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-处理特殊符号转义"><a href="#6-处理特殊符号转义" class="headerlink" title="6. 处理特殊符号转义"></a>6. <strong>处理特殊符号转义</strong></h3><p>若公式中的 <code>_</code> 被转义，需调整渲染器配置。在 Hexo 的 <code>_config.yml</code> 中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span>  <span class="comment"># 允许 HTML 标签</span></span><br><span class="line">  <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7-测试与清理缓存"><a href="#7-测试与清理缓存" class="headerlink" title="7. 测试与清理缓存"></a>7. <strong>测试与清理缓存</strong></h3><p>生成并预览效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --debug &amp;&amp; hexo server</span><br></pre></td></tr></table></figure>
<p>访问 <code>http://localhost:4000</code> 查看公式是否正确渲染。</p>
<hr>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul>
<li><strong>公式未渲染</strong>：检查控制台是否有资源加载错误，确认 CDN 链接有效。</li>
<li><strong>符号错位</strong>：确保没有多余的转义字符，使用 <code>\\</code> 代替 <code>\</code>。</li>
<li><strong>主题版本差异</strong>：不同 Next 版本配置项可能不同，参考官方文档调整。</li>
</ul>
<p>完成以上步骤后，即可在 Hexo 博客中使用 KaTeX 渲染数学公式。</p>
]]></content>
      <categories>
        <category>KaTeX</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>KaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Katex Test</title>
    <url>/Katex-Test.html</url>
    <content><![CDATA[<span id="more"></span>
<p>行内公式：$(E = mc^2)$</p>
<p>块级公式：</p>
<script type="math/tex; mode=display">\sum_{i=1}^n i = \frac{n(n+1)}{2}</script><script type="math/tex; mode=display">
K = \begin{bmatrix}
f_x & 0 & c_x \\
0 & f_y & c_y \\
0 & 0 & 1
\end{bmatrix}</script>]]></content>
      <categories>
        <category>KaTeX</category>
      </categories>
      <tags>
        <tag>KaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidain Dataview使用</title>
    <url>/Obsidain-Dataview%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1>]]></content>
  </entry>
  <entry>
    <title>Opencv内参标定</title>
    <url>/Opencv%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A.html</url>
    <content><![CDATA[<p>相机内参标定（Camera Intrinsic Calibration）的目的是确定相机的内部参数，包括焦距、主点坐标和畸变系数等。这些参数描述了相机如何将三维世界中的点投影到二维图像平面上。以下是相机内参标定的原理和步骤。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="1-相机模型"><a href="#1-相机模型" class="headerlink" title="1. 相机模型"></a>1. 相机模型</h3><p>相机的成像过程可以用针孔相机模型描述。相机内参包括以下参数：</p>
<ol>
<li><strong>焦距</strong>$(f_x, f_y)$：相机在 $x$ 和 $y$ 方向上的焦距（以像素为单位）。</li>
<li><strong>主点</strong>（$c_x, c_y$）：图像平面的主点坐标（通常是图像中心）。</li>
<li><strong>畸变系数</strong>：描述镜头畸变的参数，包括径向畸变和切向畸变。</li>
</ol>
<p>相机内参矩阵 $K$ 可以表示为：</p>
<script type="math/tex; mode=display">
K = \begin{bmatrix}
f_x & 0 & c_x \\
0 & f_y & c_y \\
0 & 0 & 1
\end{bmatrix}</script><hr>
<h3 id="2-畸变模型"><a href="#2-畸变模型" class="headerlink" title="2. 畸变模型"></a>2. 畸变模型</h3><p>镜头畸变主要包括：</p>
<ol>
<li><p><strong>径向畸变</strong>：由镜头形状引起，通常用多项式模型描述：</p>
<script type="math/tex; mode=display">
x_{\text{corrected}} = x (1 + k_1 r^2 + k_2 r^4 + k_3 r^6)</script><script type="math/tex; mode=display">
y_{\text{corrected}} = y (1 + k_1 r^2 + k_2 r^4 + k_3 r^6)</script><p>其中 $r^2 = x^2 + y^2$，$k_1, k_2, k_3$ 是径向畸变系数。</p>
</li>
<li><p><strong>切向畸变</strong>：由镜头安装误差引起，通常用以下模型描述：</p>
<script type="math/tex; mode=display">
x_{\text{corrected}} = x + [2 p_1 xy + p_2 (r^2 + 2 x^2)]</script><script type="math/tex; mode=display">
y_{\text{corrected}} = y + [p_1 (r^2 + 2 y^2) + 2 p_2 xy]</script><p>其中 $p_1, p_2$ 是切向畸变系数。</p>
</li>
</ol>
<hr>
<h3 id="3-标定原理"><a href="#3-标定原理" class="headerlink" title="3. 标定原理"></a>3. 标定原理</h3><p>相机内参标定通常使用已知几何形状的标定板（如棋盘格或圆点阵列）。标定过程包括以下步骤：</p>
<ol>
<li><strong>采集图像</strong>：从不同角度拍摄标定板的图像。</li>
<li><strong>检测特征点</strong>：在图像中检测标定板的特征点（如棋盘格的角点）。</li>
<li><strong>建立对应关系</strong>：将图像中的特征点与标定板的已知 3D 坐标对应起来。</li>
<li><strong>优化求解</strong>：通过最小化重投影误差，求解相机内参和畸变系数。</li>
</ol>
<hr>
<h3 id="4-重投影误差"><a href="#4-重投影误差" class="headerlink" title="4. 重投影误差"></a>4. 重投影误差</h3><p>重投影误差是标定的关键指标，表示标定板的 3D 点投影到图像平面后与实际检测到的 2D 点之间的距离。标定的目标是最小化重投影误差：</p>
<script type="math/tex; mode=display">
\text{误差} = \sum_{i=1}^{n} \| \mathbf{p}_i - \hat{\mathbf{p}}_i \|^2</script><p>其中：</p>
<ul>
<li>$\mathbf{p}_i$ 是实际检测到的 2D 点。</li>
<li>$\hat{\mathbf{p}}_i$ 是通过相机模型投影得到的 2D 点。</li>
</ul>
<hr>
<h3 id="5-标定步骤"><a href="#5-标定步骤" class="headerlink" title="5. 标定步骤"></a>5. 标定步骤</h3><p>以下是相机内参标定的具体步骤：</p>
<ol>
<li><strong>准备标定板</strong>：使用棋盘格或圆点阵列作为标定板。</li>
<li><strong>采集图像</strong>：从不同角度拍摄标定板的图像（通常需要 10-20 张）。</li>
<li><strong>检测特征点</strong>：使用 OpenCV 或其他工具检测标定板的特征点。</li>
<li><strong>建立 3D-2D 对应关系</strong>：将标定板的 3D 坐标与图像中的 2D 点对应起来。</li>
<li><strong>调用标定函数</strong>：使用 OpenCV 的 <code>calibrateCamera</code> 函数求解相机内参和畸变系数。</li>
<li><strong>评估标定结果</strong>：检查重投影误差，确保标定精度。</li>
</ol>
<hr>
<h3 id="6-示例代码（OpenCV）"><a href="#6-示例代码（OpenCV）" class="headerlink" title="6. 示例代码（OpenCV）"></a>6. 示例代码（OpenCV）</h3><p>以下是使用 OpenCV 进行相机内参标定的示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备标定板的 3D 坐标</span></span><br><span class="line">square_size = <span class="number">1.0</span>  <span class="comment"># 棋盘格方块的尺寸（单位：任意）</span></span><br><span class="line">pattern_size = (<span class="number">9</span>, <span class="number">6</span>)  <span class="comment"># 棋盘格内角点数量</span></span><br><span class="line">objp = np.zeros((pattern_size[<span class="number">0</span>] * pattern_size[<span class="number">1</span>], <span class="number">3</span>), np.float32)</span><br><span class="line">objp[:, :<span class="number">2</span>] = np.mgrid[<span class="number">0</span>:pattern_size[<span class="number">0</span>], <span class="number">0</span>:pattern_size[<span class="number">1</span>]].T.reshape(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">objp *= square_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 存储 3D 点和 2D 点</span></span><br><span class="line">objpoints = []  <span class="comment"># 3D 点</span></span><br><span class="line">imgpoints = []  <span class="comment"># 2D 点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 读取标定图像</span></span><br><span class="line">images = [<span class="string">&quot;calib1.jpg&quot;</span>, <span class="string">&quot;calib2.jpg&quot;</span>, <span class="string">&quot;calib3.jpg&quot;</span>]  <span class="comment"># 标定图像路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> images:</span><br><span class="line">    img = cv2.imread(fname)</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测棋盘格角点</span></span><br><span class="line">    ret, corners = cv2.findChessboardCorners(gray, pattern_size, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        objpoints.append(objp)</span><br><span class="line">        imgpoints.append(corners)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 可视化角点</span></span><br><span class="line">        cv2.drawChessboardCorners(img, pattern_size, corners, ret)</span><br><span class="line">        cv2.imshow(<span class="string">&quot;Corners&quot;</span>, img)</span><br><span class="line">        cv2.waitKey(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 标定相机</span></span><br><span class="line">ret, K, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-<span class="number">1</span>], <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;相机内参矩阵 K:\n&quot;</span>, K)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;畸变系数 dist:\n&quot;</span>, dist)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;重投影误差:&quot;</span>, ret)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7-输出结果"><a href="#7-输出结果" class="headerlink" title="7. 输出结果"></a>7. 输出结果</h3><ul>
<li><strong>相机内参矩阵 $K$</strong>：包含焦距和主点坐标。</li>
<li><strong>畸变系数 $dist$</strong>：包含径向和切向畸变系数。</li>
<li><strong>重投影误差</strong>：表示标定的精度，误差越小越好。</li>
</ul>
<hr>
<h3 id="8-注意事项"><a href="#8-注意事项" class="headerlink" title="8. 注意事项"></a>8. 注意事项</h3><ul>
<li><strong>标定板的质量</strong>：标定板的角点检测必须准确。</li>
<li><strong>图像数量</strong>：通常需要 10-20 张图像以确保标定精度。</li>
<li><strong>图像角度</strong>：标定图像应覆盖不同的角度和位置，以提高标定鲁棒性。</li>
</ul>
<p>通过上述方法，可以完成相机内参标定，并获得相机的内部参数和畸变系数。</p>
]]></content>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>ini文件序列化与反序列化</title>
    <url>/ini%E6%96%87%E4%BB%B6%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html</url>
    <content><![CDATA[<p>以下是利用 C# 实现 <strong>INI 文件序列化与反序列化</strong> 的完整解决方案，结合反射和自定义特性，实现对象与 INI 文件的双向转换</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><ol>
<li><strong>定义特性</strong>：标记类和字段对应的 INI 文件区域（Section）和键（Key）。</li>
<li><strong>核心序列化类</strong>：通过反射解析特性，动态读写 INI 文件。</li>
<li><strong>支持类型转换</strong>：自动处理基本类型、日期、枚举等常见数据类型。</li>
</ol>
<hr>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h4 id="1-定义特性类"><a href="#1-定义特性类" class="headerlink" title="1. 定义特性类"></a>1. 定义特性类</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记类对应的 INI 文件区域（Section）</span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniSectionAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SectionName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniSectionAttribute</span>(<span class="params"><span class="built_in">string</span> sectionName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SectionName = sectionName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记字段/属性对应的 INI 键（Key）</span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniKeyAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> KeyName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniKeyAttribute</span>(<span class="params"><span class="built_in">string</span> keyName = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        KeyName = keyName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-序列化工具类"><a href="#2-序列化工具类" class="headerlink" title="2. 序列化工具类"></a>2. 序列化工具类</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IniSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 序列化对象到 INI 文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Serialize</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj, <span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> type = <span class="keyword">typeof</span>(T);</span><br><span class="line">        <span class="keyword">var</span> sectionAttr = type.GetCustomAttribute&lt;IniSectionAttribute&gt;();</span><br><span class="line">        <span class="built_in">string</span> section = sectionAttr?.SectionName ?? type.Name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> type.GetFields(BindingFlags.Public | BindingFlags.Instance))</span><br><span class="line">        &#123;</span><br><span class="line">            ProcessMember(sb, section, field, field.GetValue(obj));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> type.GetProperties(BindingFlags.Public | BindingFlags.Instance))</span><br><span class="line">        &#123;</span><br><span class="line">            ProcessMember(sb, section, prop, prop.GetValue(obj));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File.WriteAllText(filePath, sb.ToString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化 INI 文件到对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> filePath</span>) <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> T();</span><br><span class="line">        <span class="keyword">var</span> type = <span class="keyword">typeof</span>(T);</span><br><span class="line">        <span class="keyword">var</span> sectionAttr = type.GetCustomAttribute&lt;IniSectionAttribute&gt;();</span><br><span class="line">        <span class="built_in">string</span> section = sectionAttr?.SectionName ?? type.Name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> lines = File.ReadAllLines(filePath);</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> line <span class="keyword">in</span> lines)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.StartsWith(<span class="string">&quot;[&quot;</span>) &amp;&amp; line.EndsWith(<span class="string">&quot;]&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 处理多 Section（此处示例仅处理单个 Section）</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (line.Contains(<span class="string">&quot;=&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> parts = line.Split(<span class="keyword">new</span>[] &#123; <span class="string">&#x27;=&#x27;</span> &#125;, <span class="number">2</span>);</span><br><span class="line">                data[parts[<span class="number">0</span>].Trim()] = parts[<span class="number">1</span>].Trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> type.GetFields(BindingFlags.Public | BindingFlags.Instance))</span><br><span class="line">        &#123;</span><br><span class="line">            SetMemberValue(obj, field, data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> type.GetProperties(BindingFlags.Public | BindingFlags.Instance))</span><br><span class="line">        &#123;</span><br><span class="line">            SetMemberValue(obj, prop, data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessMember</span>(<span class="params">StringBuilder sb, <span class="built_in">string</span> section, MemberInfo member, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> keyAttr = member.GetCustomAttribute&lt;IniKeyAttribute&gt;();</span><br><span class="line">        <span class="built_in">string</span> keyName = keyAttr?.KeyName ?? member.Name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;<span class="subst">&#123;keyName&#125;</span>=<span class="subst">&#123;ConvertToString(<span class="keyword">value</span>)&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetMemberValue</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj, MemberInfo member, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> keyAttr = member.GetCustomAttribute&lt;IniKeyAttribute&gt;();</span><br><span class="line">        <span class="built_in">string</span> keyName = keyAttr?.KeyName ?? member.Name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data.TryGetValue(keyName, <span class="keyword">out</span> <span class="built_in">string</span> strValue))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">object</span> <span class="keyword">value</span> = ConvertFromString(strValue, GetMemberType(member));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (member <span class="keyword">is</span> FieldInfo field)</span><br><span class="line">                field.SetValue(obj, <span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (member <span class="keyword">is</span> PropertyInfo prop &amp;&amp; prop.CanWrite)</span><br><span class="line">                prop.SetValue(obj, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Type <span class="title">GetMemberType</span>(<span class="params">MemberInfo member</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> member.MemberType <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            MemberTypes.Field =&gt; ((FieldInfo)member).FieldType,</span><br><span class="line">            MemberTypes.Property =&gt; ((PropertyInfo)member).PropertyType,</span><br><span class="line">            _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ConvertToString</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span> <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            DateTime dt =&gt; dt.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>),</span><br><span class="line">            Enum e =&gt; e.ToString(),</span><br><span class="line">            _ =&gt; <span class="keyword">value</span>.ToString()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">ConvertFromString</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span>, Type targetType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (targetType == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (targetType.IsEnum)</span><br><span class="line">            <span class="keyword">return</span> Enum.Parse(targetType, <span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Convert.ChangeType(<span class="keyword">value</span>, targetType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="1-定义数据类"><a href="#1-定义数据类" class="headerlink" title="1. 定义数据类"></a>1. 定义数据类</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">IniSection(<span class="string">&quot;UserSettings&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;username&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;age&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;last_login&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime LastLogin;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;theme&quot;</span>)</span>]  <span class="comment">// 使用默认键名 &quot;theme&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> InterfaceTheme = <span class="string">&quot;default&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-序列化对象到-INI"><a href="#2-序列化对象到-INI" class="headerlink" title="2. 序列化对象到 INI"></a>2. 序列化对象到 INI</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> UserConfig</span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    Age = <span class="number">30</span>,</span><br><span class="line">    LastLogin = DateTime.Now,</span><br><span class="line">    InterfaceTheme = <span class="string">&quot;dark&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">IniSerializer.Serialize(config, <span class="string">&quot;user_config.ini&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>生成文件内容 (<code>user_config.ini</code>)：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=Alice</span><br><span class="line"><span class="attr">age</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">last_login</span>=<span class="number">2023</span>-<span class="number">10</span>-<span class="number">05</span> <span class="number">14</span>:<span class="number">30</span>:<span class="number">00</span></span><br><span class="line"><span class="attr">theme</span>=dark</span><br></pre></td></tr></table></figure>
<h4 id="3-反序列化-INI-到对象"><a href="#3-反序列化-INI-到对象" class="headerlink" title="3. 反序列化 INI 到对象"></a>3. 反序列化 INI 到对象</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loadedConfig = IniSerializer.Deserialize&lt;UserConfig&gt;(<span class="string">&quot;user_config.ini&quot;</span>);</span><br><span class="line">Console.WriteLine(loadedConfig.Name);        <span class="comment">// 输出: Alice</span></span><br><span class="line">Console.WriteLine(loadedConfig.Age);         <span class="comment">// 输出: 30</span></span><br><span class="line">Console.WriteLine(loadedConfig.LastLogin);   <span class="comment">// 输出: 2023/10/5 14:30:00</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="高级功能扩展"><a href="#高级功能扩展" class="headerlink" title="高级功能扩展"></a>高级功能扩展</h3><h4 id="1-支持多-Section"><a href="#1-支持多-Section" class="headerlink" title="1. 支持多 Section"></a>1. 支持多 Section</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniSection(<span class="string">&quot;User&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> UserConfig User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniSection(<span class="string">&quot;System&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> SystemConfig System &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改序列化逻辑，递归处理嵌套对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessMember</span>(<span class="params">StringBuilder sb, <span class="built_in">string</span> parentSection, MemberInfo member, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> sectionAttr = member.DeclaringType.GetCustomAttribute&lt;IniSectionAttribute&gt;();</span><br><span class="line">    <span class="built_in">string</span> currentSection = sectionAttr?.SectionName ?? parentSection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">value</span>.GetType().IsClass &amp;&amp; <span class="keyword">value</span>.GetType() != <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> subMember <span class="keyword">in</span> <span class="keyword">value</span>.GetType().GetMembers())</span><br><span class="line">        &#123;</span><br><span class="line">            ProcessMember(sb, currentSection, subMember, subMember.GetValue(<span class="keyword">value</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 原有处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-自定义类型转换器"><a href="#2-自定义类型转换器" class="headerlink" title="2. 自定义类型转换器"></a>2. 自定义类型转换器</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IIniTypeConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">ConvertToString</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line">    <span class="function"><span class="built_in">object</span> <span class="title">ConvertFromString</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span>, Type targetType</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义转换器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IniConverters</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Dictionary&lt;Type, IIniTypeConverter&gt; Converters = <span class="keyword">new</span> Dictionary&lt;Type, IIniTypeConverter&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="keyword">typeof</span>(Version), <span class="keyword">new</span> VersionConverter() &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VersionConverter</span> : <span class="title">IIniTypeConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ConvertToString</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span> =&gt; ((Version)<span class="keyword">value</span>).ToString();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">ConvertFromString</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span>, Type targetType</span>)</span> =&gt; Version.Parse(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-处理注释（扩展特性）"><a href="#3-处理注释（扩展特性）" class="headerlink" title="3. 处理注释（扩展特性）"></a>3. 处理注释（扩展特性）</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class | AttributeTargets.Field | AttributeTargets.Property)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniCommentAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Comment &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniCommentAttribute</span>(<span class="params"><span class="built_in">string</span> comment</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Comment = comment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在序列化时添加注释</span></span><br><span class="line"><span class="keyword">if</span> (member.GetCustomAttribute&lt;IniCommentAttribute&gt;() <span class="keyword">is</span> &#123; &#125; commentAttr)</span><br><span class="line">&#123;</span><br><span class="line">    sb.AppendLine(<span class="string">$&quot;; <span class="subst">&#123;commentAttr.Comment&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a>关键注意事项</h3><ol>
<li><p><strong>性能优化</strong>：</p>
<ul>
<li>对频繁调用的类型缓存 <code>MemberInfo</code> 和特性信息</li>
<li>使用 <code>StringBuilder</code> 替代字符串拼接</li>
</ul>
</li>
<li><p><strong>错误处理</strong>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Convert.ChangeType(<span class="keyword">value</span>, targetType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IniSerializationException(<span class="string">$&quot;Type conversion failed: <span class="subst">&#123;<span class="keyword">value</span>&#125;</span> -&gt; <span class="subst">&#123;targetType.Name&#125;</span>&quot;</span>, ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编码处理</strong>：</p>
<ul>
<li>使用 <code>Encoding.UTF8</code> 读写文件：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">File.WriteAllText(filePath, sb.ToString(), Encoding.UTF8);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安全限制</strong>：</p>
<ul>
<li>处理私有成员需添加 <code>BindingFlags.NonPublic</code></li>
<li>对不可写属性跳过赋值</li>
</ul>
</li>
</ol>
<hr>
<h3 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h3><div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>手动读写</strong></td>
<td>完全控制逻辑</td>
<td>代码冗余，维护成本高</td>
</tr>
<tr>
<td><strong>反射+特性</strong></td>
<td>自动化，代码简洁</td>
<td>性能较低</td>
</tr>
<tr>
<td><strong>第三方库</strong></td>
<td>功能完善（如 <code>IniParser</code>）</td>
<td>需要引入外部依赖</td>
</tr>
<tr>
<td><strong>Source Generators</strong></td>
<td>零运行时开销，高性能</td>
<td>实现复杂度高</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>本方案通过反射和特性实现了 INI 文件与对象的双向转换，适用于配置管理、游戏存档等场景。对于高性能需求，建议结合缓存机制或使用预编译技术优化。</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>Ini</tag>
        <tag>特性</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署到Gitlab</title>
    <url>/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Gitlab.html</url>
    <content><![CDATA[<p>博客部署到Gitlab与部署到Github等生成静态页面不同, Gitlab中需要存储完整代码.<br><span id="more"></span></p>
<h2 id="完整步骤"><a href="#完整步骤" class="headerlink" title="完整步骤"></a>完整步骤</h2><p>以下是使用 <strong>Hexo</strong> 部署到 <strong>GitLab Pages</strong> 创建个人博客的完整指南，包含详细步骤和常见问题排查：</p>
<hr>
<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ol>
<li><p><strong>安装 Node.js 和 npm</strong><br>Hexo 基于 Node.js，需先安装 <a href="https://nodejs.org/">Node.js</a>（建议选择 LTS 版本）。</p>
</li>
<li><p><strong>安装 Git</strong><br>下载并安装 <a href="https://git-scm.com/">Git</a>，用于代码管理。</p>
</li>
<li><p><strong>注册 GitLab 账号</strong><br>访问 <a href="https://gitlab.com/">GitLab</a> 注册账号。</p>
</li>
</ol>
<hr>
<h3 id="二、安装-Hexo-并初始化博客"><a href="#二、安装-Hexo-并初始化博客" class="headerlink" title="二、安装 Hexo 并初始化博客"></a>二、安装 Hexo 并初始化博客</h3><ol>
<li><p><strong>全局安装 Hexo 命令行工具</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 Hexo 项目</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog  <span class="comment"># 创建名为 my-blog 的博客目录</span></span><br><span class="line"><span class="built_in">cd</span> my-blog         <span class="comment"># 进入项目目录</span></span><br><span class="line">npm install        <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>本地预览</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server        <span class="comment"># 启动本地服务器</span></span><br></pre></td></tr></table></figure>
<p>访问 <code>http://localhost:4000</code> 查看默认博客。</p>
</li>
</ol>
<hr>
<h3 id="三、关联-GitLab-仓库"><a href="#三、关联-GitLab-仓库" class="headerlink" title="三、关联 GitLab 仓库"></a>三、关联 GitLab 仓库</h3><ol>
<li><p><strong>在 GitLab 创建新项目</strong>  </p>
<ul>
<li>登录 GitLab → <strong>New project</strong> → <strong>Create blank project</strong>。  </li>
<li>填写项目名称（如 <code>my-blog</code>），可见性选择 <code>Public</code>。  </li>
<li><strong>重要</strong>：项目名称需与 Hexo 的 <code>_config.yml</code> 中配置的路径一致（默认无需修改）。  </li>
</ul>
</li>
<li><p><strong>本地关联 GitLab 仓库</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://gitlab.com/你的用户名/my-blog.git</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="四、配置-Hexo-部署到-GitLab"><a href="#四、配置-Hexo-部署到-GitLab" class="headerlink" title="四、配置 Hexo 部署到 GitLab"></a>四、配置 Hexo 部署到 GitLab</h3><ol>
<li><p><strong>安装 Hexo Git 部署插件</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改 Hexo 配置文件</strong><br>打开 <code>_config.yml</code>，找到 <code>deploy</code> 部分，修改为：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitlab.com/你的用户名/my-blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># GitLab 默认分支是 main，不是 master！</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试部署</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --deploy</span><br></pre></td></tr></table></figure>
<ul>
<li>此命令会将生成的静态文件（在 <code>public</code> 目录下）推送到 GitLab 的 <code>main</code> 分支。  </li>
<li>但为了自动化构建，建议使用 GitLab CI/CD（见下一步）。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="五、配置-GitLab-CI-CD-自动化部署"><a href="#五、配置-GitLab-CI-CD-自动化部署" class="headerlink" title="五、配置 GitLab CI/CD 自动化部署"></a>五、配置 GitLab CI/CD 自动化部署</h3><ol>
<li><p><strong>创建 <code>.gitlab-ci.yml</code> 文件</strong><br>在项目根目录新建文件，内容如下：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node:16</span>  <span class="comment"># 使用 Node.js 16 环境</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node_modules/</span>  <span class="comment"># 缓存依赖加速构建</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span>  <span class="comment"># 全局安装 Hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span>  <span class="comment"># 生成静态文件到 public 目录</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span>  <span class="comment"># GitLab Pages 默认从 public 目录部署</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span>  <span class="comment"># 仅 main 分支触发构建</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>推送代码到 GitLab</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;初始化 Hexo 博客&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看构建状态</strong>  </p>
<ul>
<li>进入 GitLab 项目 → <strong>CI/CD → Pipelines</strong>，查看流水线状态。  </li>
<li>构建成功后，进入 <strong>Settings → Pages</strong>，确认网站地址。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="六、访问博客"><a href="#六、访问博客" class="headerlink" title="六、访问博客"></a>六、访问博客</h3><ul>
<li><p><strong>默认地址</strong>：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://你的用户名.gitlab.io/my-blog</span><br></pre></td></tr></table></figure>
<ul>
<li>如果项目名称为 <code>my-blog</code>，访问路径需包含项目名。  </li>
<li>如果希望直接使用 <code>https://你的用户名.gitlab.io</code>，需将项目重命名为 <code>你的用户名.gitlab.io</code>（如 <code>john.gitlab.io</code>）。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="七、自定义域名（可选）"><a href="#七、自定义域名（可选）" class="headerlink" title="七、自定义域名（可选）"></a>七、自定义域名（可选）</h3><ol>
<li><p><strong>购买域名</strong><br>在域名服务商（如 GoDaddy、阿里云）购买域名（如 <code>example.com</code>）。</p>
</li>
<li><p><strong>配置 DNS 解析</strong>  </p>
<ul>
<li><p>添加 <code>CNAME</code> 记录：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">主机名：blog  </span><br><span class="line">类型：CNAME  </span><br><span class="line">值：你的用户名.gitlab.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>或添加 <code>A</code> 记录：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">主机名：@  </span><br><span class="line">类型：A  </span><br><span class="line">值：35.185.44.232（GitLab Pages 的 IP）</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>GitLab 配置自定义域名</strong>  </p>
<ul>
<li>进入项目 → <strong>Settings → Pages</strong> → <strong>New Domain</strong>。  </li>
<li>输入域名（如 <code>blog.example.com</code>），点击 <strong>Save</strong>。  </li>
<li><p>在 Hexo 的 <code>source</code> 目录下创建 <code>CNAME</code> 文件（无后缀），内容为域名：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blog.example.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>推送代码使配置生效：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add <span class="built_in">source</span>/CNAME</span><br><span class="line">git commit -m <span class="string">&quot;添加自定义域名&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="八、更新博客内容"><a href="#八、更新博客内容" class="headerlink" title="八、更新博客内容"></a>八、更新博客内容</h3><ol>
<li><p><strong>新建文章</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编辑文件 <code>source/_posts/我的第一篇文章.md</code>。</li>
</ul>
</li>
<li><p><strong>本地预览</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>部署到 GitLab</strong>  </p>
<ul>
<li><p><strong>方式一</strong>：手动生成并推送  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>方式二</strong>：触发 CI/CD 自动构建（推荐）  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;添加新文章&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="九、常见问题解决"><a href="#九、常见问题解决" class="headerlink" title="九、常见问题解决"></a>九、常见问题解决</h3><ol>
<li><p><strong>构建失败</strong>  </p>
<ul>
<li><strong>错误提示</strong>：<code>npm install</code> 失败。  <ul>
<li>检查 <code>.gitlab-ci.yml</code> 中的 Node.js 版本是否与本地一致。  </li>
</ul>
</li>
<li><strong>错误提示</strong>：<code>hexo generate</code> 报错。  <ul>
<li>确保 <code>_config.yml</code> 中语法正确（避免使用 Tab 缩进，需用空格）。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>页面 404</strong>  </p>
<ul>
<li><strong>原因</strong>：访问路径错误。  <ul>
<li>如果项目名为 <code>my-blog</code>，访问地址应为 <code>https://用户名.gitlab.io/my-blog</code>。  </li>
<li>若希望根路径访问，需将项目重命名为 <code>用户名.gitlab.io</code>。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>自定义域名不生效</strong>  </p>
<ul>
<li>检查 <code>CNAME</code> 文件是否提交到仓库。  </li>
<li>等待 DNS 解析生效（最长可能需要 48 小时）。</li>
</ul>
</li>
</ol>
<hr>
<p>按照以上步骤，你可以将 Hexo 博客无缝部署到 GitLab Pages，享受免费、稳定的静态网站托管服务！</p>
<h2 id="部署Github方式部署到Gitlab"><a href="#部署Github方式部署到Gitlab" class="headerlink" title="部署Github方式部署到Gitlab"></a>部署Github方式部署到Gitlab</h2><ol>
<li>在<code>_config.yml</code>中增加部署仓库链接</li>
<li><p>新建<code>.gitlab-ci.yml</code>文件用于触发流水线</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pages:</span></span><br><span class="line"><span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">.public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">./*</span> <span class="string">.public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mv</span> <span class="string">.public</span> <span class="string">public</span></span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">$CI_DEFAULT_BRANCH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>在执行完<code>hexo g</code>后先将<code>.gitlab-ci.yml</code>复制到<code>.deploy_git</code>中再执行<code>hexo d</code></p>
</li>
</ol>
<h2 id="官方方式"><a href="#官方方式" class="headerlink" title="官方方式"></a>官方方式</h2><ol>
<li>如果你更希望你的站点部署在 <code>&lt;你的 GitLab 用户名&gt;.gitlab.io</code> 的子目录中，你的 <code>repository</code> 需要直接命名为子目录的名字，这样你的站点可以通过 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io/&lt;repository 的名字&gt;</code> 访问。 你需要检查你的 Hexo 配置文件，将 url 的值修改为 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io/&lt;repository 的名字&gt;</code>、将 root 的值修改为 <code>/&lt;repository 的名字&gt;/</code></li>
<li>通过 Settings &gt; CI/CD &gt; Runners &gt; Enable shared runners for this project 启用共享运行程序。</li>
<li>将你的 Hexo 站点文件夹推送到 repository 中。 默认情况下 public 目录将不会（并且不应该）被推送到 repository 中，建议你检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。 整体文件夹结构应该与 示例储存库 大致相似。</li>
<li>使用 <code>node --version</code> 指令检查你电脑上的 Node.js 版本。 记下主要版本（例如，v16.y.z）</li>
<li><p>将 <code>.gitlab-ci.yml</code> 文件添加到您的版本库根目录（与 _config.yml &amp; package.json并列），内容如下（将16替换为您在上一步中注意到的 Node.js 主版本）</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node:16-alpine</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">$CI_DEFAULT_BRANCH</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>GitLab CI 应该会自动开始运行，构建成功以后你应该可以在 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io</code> 查看你的网站。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>利用反射给字段赋值</title>
    <url>/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E7%BB%99%E5%AD%97%E6%AE%B5%E8%B5%8B%E5%80%BC.html</url>
    <content><![CDATA[<p>在 C# 中通过反射给字段赋值是一种动态操作对象成员的常用方法，尤其适用于需要绕过编译时类型检查的场景。以下是完整的实现步骤和代码示例：</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="反射赋值的核心步骤"><a href="#反射赋值的核心步骤" class="headerlink" title="反射赋值的核心步骤"></a><strong>反射赋值的核心步骤</strong></h3><ol>
<li><strong>获取类型信息</strong>：通过 <code>Type</code> 类获取目标对象的类型元数据。</li>
<li><strong>获取字段信息</strong>：通过 <code>GetField</code> 或 <code>GetFields</code> 方法获取目标字段。</li>
<li><strong>设置字段值</strong>：使用 <code>FieldInfo.SetValue</code> 方法为字段赋值。</li>
<li><strong>处理类型转换</strong>：确保输入值与字段类型兼容（可能需要类型转换）。</li>
</ol>
<hr>
<h3 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a><strong>完整代码实现</strong></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> Age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Country = <span class="string">&quot;China&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReflectionDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象实例</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取类型信息</span></span><br><span class="line">        Type type = <span class="keyword">typeof</span>(Person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 设置公共字段</span></span><br><span class="line">        FieldInfo nameField = type.GetField(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">        nameField.SetValue(person, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Name: <span class="subst">&#123;person.Name&#125;</span>&quot;</span>); <span class="comment">// 输出: Alice</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 设置私有字段（需要 BindingFlags）</span></span><br><span class="line">        FieldInfo ageField = type.GetField(<span class="string">&quot;Age&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">        ageField.SetValue(person, <span class="number">30</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Age: <span class="subst">&#123;ageField.GetValue(person)&#125;</span>&quot;</span>); <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 设置静态字段</span></span><br><span class="line">        FieldInfo countryField = type.GetField(<span class="string">&quot;Country&quot;</span>, BindingFlags.Public | BindingFlags.Static);</span><br><span class="line">        countryField.SetValue(<span class="literal">null</span>, <span class="string">&quot;USA&quot;</span>); <span class="comment">// 静态字段实例参数传 null</span></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Country: <span class="subst">&#123;Person.Country&#125;</span>&quot;</span>); <span class="comment">// 输出: USA</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 动态类型转换示例</span></span><br><span class="line">        <span class="built_in">string</span> inputValue = <span class="string">&quot;42&quot;</span>;</span><br><span class="line">        FieldInfo dynamicField = type.GetField(<span class="string">&quot;Age&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">        dynamicField.SetValue(person, Convert.ChangeType(inputValue, <span class="keyword">typeof</span>(<span class="built_in">int</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a><strong>关键注意事项</strong></h3><ol>
<li><p><strong>字段可见性</strong>：</p>
<ul>
<li>公共字段直接使用 <code>GetField(&quot;Name&quot;)</code>。</li>
<li><p>私有字段需要指定 <code>BindingFlags</code>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">BindingFlags.NonPublic | BindingFlags.Instance</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>静态字段</strong>：</p>
<ul>
<li><p>设置静态字段时，<code>SetValue</code> 的第一个参数传 <code>null</code>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">countryField.SetValue(<span class="literal">null</span>, <span class="string">&quot;USA&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>类型转换</strong>：</p>
<ul>
<li><p>如果字段类型与输入值类型不匹配，需手动转换：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Convert.ChangeType(<span class="keyword">value</span>, targetType);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>性能优化</strong>：</p>
<ul>
<li><p>反射操作较慢，频繁调用时可缓存 <code>FieldInfo</code> 对象：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> FieldInfo _cachedAgeField = <span class="keyword">typeof</span>(Person).GetField(...);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>安全性</strong>：</p>
<ul>
<li>修改私有字段可能破坏封装性，需谨慎使用。</li>
<li>可通过 <code>fieldInfo.IsInitOnly</code> 检查字段是否为只读。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="高级用法：泛型扩展方法"><a href="#高级用法：泛型扩展方法" class="headerlink" title="高级用法：泛型扩展方法"></a><strong>高级用法：泛型扩展方法</strong></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ReflectionExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetFieldValue</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T obj, <span class="built_in">string</span> fieldName, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FieldInfo field = <span class="keyword">typeof</span>(T).GetField(</span><br><span class="line">            fieldName,</span><br><span class="line">            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            field.SetValue(obj, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$&quot;Field <span class="subst">&#123;fieldName&#125;</span> not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.SetFieldValue(<span class="string">&quot;Age&quot;</span>, <span class="number">25</span>); <span class="comment">// 直接通过扩展方法赋值</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h3><ol>
<li>动态配置加载（如将 JSON/XML 数据映射到对象）。</li>
<li>实现通用序列化/反序列化工具。</li>
<li>编写测试框架时动态修改对象状态。</li>
<li>依赖注入容器等底层框架开发。</li>
</ol>
<hr>
<h3 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a><strong>替代方案</strong></h3><ul>
<li><p><strong>表达式树（Expression Trees）</strong>：<br>通过编译后的表达式树操作字段，性能接近直接赋值：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = Expression.Parameter(<span class="keyword">typeof</span>(Person));</span><br><span class="line"><span class="keyword">var</span> field = Expression.Field(param, <span class="string">&quot;Name&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> setter = Expression.Lambda&lt;Action&lt;Person, <span class="built_in">string</span>&gt;&gt;(</span><br><span class="line">    Expression.Assign(field, Expression.Convert(paramValue, <span class="keyword">typeof</span>(<span class="built_in">string</span>))),</span><br><span class="line">    param, paramValue</span><br><span class="line">).Compile();</span><br><span class="line"></span><br><span class="line">setter(person, <span class="string">&quot;Bob&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>dynamic 关键字</strong>：<br>简单场景下快速访问公共字段（但无法访问私有成员）：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> dynPerson = person;</span><br><span class="line">dynPerson.Name = <span class="string">&quot;Charlie&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>通过反射赋值提供了极大的灵活性，但需权衡性能与代码可维护性。在需要高性能的场景，推荐使用预编译的表达式树或代码生成技术（如 Source Generators）。</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>特性</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>特性使用示例-1</title>
    <url>/%E7%89%B9%E6%80%A7%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1.html</url>
    <content><![CDATA[<p>实现ini文件的序列化与反序列化<br><span id="more"></span></p>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> KeyName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniAttribute</span>(<span class="params"><span class="built_in">string</span> keyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        KeyName = keyName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Result</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Ini(<span class="string">&quot;长(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> length;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Ini(<span class="string">&quot;宽(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> width;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Ini(<span class="string">&quot;高(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IniFile iniFile = <span class="keyword">new</span> IniFile(<span class="string">&quot;D:\\Test.ini&quot;</span>);</span><br><span class="line"><span class="comment">//读取ini文件键值对</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; resultDic = iniFile.ReadKeyValues(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">Result result = <span class="keyword">new</span> Result();</span><br><span class="line"><span class="comment">//获取所有字段</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> result.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取字段的特性</span></span><br><span class="line">    <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniAttribute;</span><br><span class="line">    <span class="keyword">if</span>(att != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//特性KeyName与ini中key匹配则给对应字段赋值</span></span><br><span class="line">        <span class="keyword">if</span>(resultDic.ContainsKey(att.KeyName))</span><br><span class="line">        &#123;</span><br><span class="line">            Type type = field.FieldType;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                field.SetValue(result, resultDic[att.KeyName]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                field.SetValue(result, Convert.ChangeType(resultDic[att.KeyName], type));</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取所有属性</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> result.GetType().GetProperties())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> att = prop.GetCustomAttributes(<span class="keyword">typeof</span>(IniAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniAttribute;</span><br><span class="line">    <span class="keyword">if</span>(att != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultDic.ContainsKey(att.KeyName))</span><br><span class="line">            prop.SetValue(result, resultDic[att.KeyName], <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>解析多个Session</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IniFile iniFile = <span class="keyword">new</span> IniFile(<span class="string">&quot;D:\\Test.ini&quot;</span>);</span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; iniResultDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;();</span><br><span class="line">TestResult testResult = <span class="keyword">new</span> TestResult();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取特性作为Session</span></span><br><span class="line">    <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">    <span class="keyword">if</span>(attClass != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//存储该Session下的Key Value</span></span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; resultDic = iniFile.ReadKeyValues(attClass.SessionName);</span><br><span class="line">        <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">            <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">            <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultDic.ContainsKey(att.KeyName))</span><br><span class="line">                &#123;</span><br><span class="line">                    Type type = field.FieldType;</span><br><span class="line">                    <span class="keyword">if</span> (type == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                        field.SetValue(obj, resultDic[att.KeyName]);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        field.SetValue(obj, Convert.ChangeType(resultDic[att.KeyName], type));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        iniResultDic.Add(attClass.SessionName, resultDic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestResult</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniSession(<span class="string">&quot;Result&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Result result = <span class="keyword">new</span> Result();</span><br><span class="line">    [<span class="meta">IniSession(<span class="string">&quot;Info&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Info info = <span class="keyword">new</span> Info();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Result</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;长(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> length;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;宽(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> width;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;高(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Info</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;ID&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ID;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;结果&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniKeyAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> KeyName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniKeyAttribute</span>(<span class="params"><span class="built_in">string</span> keyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        KeyName = keyName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniSessionAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SessionName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniSessionAttribute</span>(<span class="params"><span class="built_in">string</span> sessionName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SessionName = sessionName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IniFile iniFile = <span class="keyword">new</span> IniFile(path);</span><br><span class="line">    T testResult = (T)Activator.CreateInstance(<span class="keyword">typeof</span>(T));</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取特性作为Session</span></span><br><span class="line">        <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">        <span class="keyword">if</span> (attClass != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//存储该Session下的Key Value</span></span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; resultDic = iniFile.ReadKeyValues(attClass.SessionName);</span><br><span class="line">            <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">                <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">                <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resultDic.ContainsKey(att.KeyName))</span><br><span class="line">                    &#123;</span><br><span class="line">                        Type type = field.FieldType;</span><br><span class="line">                        <span class="keyword">if</span> (type == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                            field.SetValue(obj, resultDic[att.KeyName]);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            field.SetValue(obj, Convert.ChangeType(resultDic[att.KeyName], type));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> testResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IniFile iniFile = <span class="keyword">new</span> IniFile(<span class="string">&quot;D:\\Test1.ini&quot;</span>);</span><br><span class="line">Result result = <span class="keyword">new</span> Result();</span><br><span class="line">result.width = <span class="number">235</span>;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.AppendLine(<span class="string">&quot;[SessionName]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> result.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniAttribute;</span><br><span class="line">    <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">object</span> o = field.GetValue(result);</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, o.ToString())); &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">File.WriteAllText(<span class="string">&quot;D:\\Test1.ini&quot;</span>, sb.ToString());</span><br></pre></td></tr></table></figure>
<h3 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h3><p>序列化多个Session</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">TestResult testResult = <span class="keyword">new</span> TestResult();</span><br><span class="line">testResult.info.ID = <span class="number">235</span>;</span><br><span class="line">testResult.info.result = <span class="string">&quot;不合格&quot;</span>;</span><br><span class="line">testResult.result.length = <span class="number">0</span>;</span><br><span class="line">testResult.result.width = <span class="number">1</span>;</span><br><span class="line">testResult.result.height = <span class="string">&quot;&quot;</span>;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取特性作为Session</span></span><br><span class="line">    <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">    <span class="keyword">if</span> (fieldClass != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;[&#123;0&#125;]&quot;</span>, attClass.SessionName));</span><br><span class="line">        <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">            <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">            <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">                sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, field.GetValue(obj)));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">File.WriteAllText(<span class="string">&quot;D:\\Test1.ini&quot;</span>, sb.ToString());</span><br></pre></td></tr></table></figure>
<h3 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Serialize</span>&lt;<span class="title">T</span>&gt;(<span class="params">T testResult</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取特性作为Session</span></span><br><span class="line">        <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">        <span class="keyword">if</span> (fieldClass != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;[&#123;0&#125;]&quot;</span>, attClass.SessionName));</span><br><span class="line">            <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">                <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">                <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">                    sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, field.GetValue(obj)));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>特性</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>利用特性将数据映射到字段</title>
    <url>/%E5%88%A9%E7%94%A8%E7%89%B9%E6%80%A7%E5%B0%86%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84%E5%88%B0%E5%AD%97%E6%AE%B5.html</url>
    <content><![CDATA[<p>以下是利用 C# <strong>特性（Attributes）</strong> 将外部数据（如 JSON、数据库记录）动态映射到对象字段的完整实现方法，结合反射和自定义特性实现自动化映射</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li><strong>定义自定义特性</strong>：创建特性类标记字段与数据源的映射关系。</li>
<li><strong>标记目标字段</strong>：在类中使用自定义特性标注需要映射的字段。</li>
<li><strong>编写映射逻辑</strong>：通过反射解析特性并动态赋值。</li>
</ol>
<hr>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h4 id="1-定义映射特性"><a href="#1-定义映射特性" class="headerlink" title="1. 定义映射特性"></a>1. 定义映射特性</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义特性：标记字段对应的数据源键名</span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MapToAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Key &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapToAttribute</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-标记目标类字段"><a href="#2-标记目标类字段" class="headerlink" title="2. 标记目标类字段"></a>2. 标记目标类字段</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MapTo(<span class="string">&quot;user_name&quot;</span>)</span>]  <span class="comment">// 映射数据源中的 &quot;user_name&quot; 键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MapTo(<span class="string">&quot;age&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MapTo(<span class="string">&quot;registration_date&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime RegisterDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-数据映射工具类"><a href="#3-数据映射工具类" class="headerlink" title="3. 数据映射工具类"></a>3. 数据映射工具类</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DataMapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将字典数据映射到对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">MapToObject</span>&lt;<span class="title">T</span>&gt;(<span class="params">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; data</span>) <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        T obj = <span class="keyword">new</span> T();</span><br><span class="line">        Type type = <span class="keyword">typeof</span>(T);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> attribute = field.GetCustomAttribute&lt;MapToAttribute&gt;();</span><br><span class="line">            <span class="keyword">if</span> (attribute != <span class="literal">null</span> &amp;&amp; data.TryGetValue(attribute.Key, <span class="keyword">out</span> <span class="built_in">object</span> <span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 类型转换处理</span></span><br><span class="line">                <span class="built_in">object</span> convertedValue = Convert.ChangeType(<span class="keyword">value</span>, field.FieldType);</span><br><span class="line">                field.SetValue(obj, convertedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理属性（可选）</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> type.GetProperties(BindingFlags.Public | BindingFlags.Instance))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> attribute = prop.GetCustomAttribute&lt;MapToAttribute&gt;();</span><br><span class="line">            <span class="keyword">if</span> (attribute != <span class="literal">null</span> &amp;&amp; data.TryGetValue(attribute.Key, <span class="keyword">out</span> <span class="built_in">object</span> <span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                prop.SetValue(obj, Convert.ChangeType(<span class="keyword">value</span>, prop.PropertyType));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟从数据库/JSON获取的数据</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;Alice&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;age&quot;</span>, <span class="number">30</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;registration_date&quot;</span>, <span class="string">&quot;2023-10-01&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动映射数据到对象</span></span><br><span class="line">User user = DataMapper.MapToObject&lt;User&gt;(data);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(user.Name);           <span class="comment">// 输出: Alice</span></span><br><span class="line">Console.WriteLine(user.RegisterDate);   <span class="comment">// 输出: 2023/10/01</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="高级优化"><a href="#高级优化" class="headerlink" title="高级优化"></a>高级优化</h3><h4 id="1-支持嵌套对象"><a href="#1-支持嵌套对象" class="headerlink" title="1. 支持嵌套对象"></a>1. 支持嵌套对象</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MapTo(<span class="string">&quot;city&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MapTo(<span class="string">&quot;address_info&quot;</span>)</span>]  <span class="comment">// 假设数据源中 address_info 是嵌套字典</span></span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改映射逻辑，递归处理嵌套类型</span></span><br><span class="line"><span class="keyword">if</span> (field.FieldType.IsClass &amp;&amp; field.FieldType != <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">object</span> nestedObj = MapToObject(field.FieldType, data[attribute.Key] <span class="keyword">as</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;);</span><br><span class="line">    field.SetValue(obj, nestedObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-类型转换增强"><a href="#2-类型转换增强" class="headerlink" title="2. 类型转换增强"></a>2. 类型转换增强</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加自定义类型转换器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">SafeConvert</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, Type targetType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (targetType == <span class="keyword">typeof</span>(DateTime))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DateTime.Parse(<span class="keyword">value</span>.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Convert.ChangeType(<span class="keyword">value</span>, targetType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换代码中的 Convert.ChangeType 为 SafeConvert</span></span><br></pre></td></tr></table></figure>
<h4 id="3-缓存反射信息"><a href="#3-缓存反射信息" class="headerlink" title="3. 缓存反射信息"></a>3. 缓存反射信息</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 MemoryCache 缓存 FieldInfo 和特性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> MemoryCache _cache = <span class="keyword">new</span> MemoryCache(<span class="keyword">new</span> MemoryCacheOptions());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">MapToObjectOptimized</span>&lt;<span class="title">T</span>&gt;(<span class="params">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; data</span>) <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Type type = <span class="keyword">typeof</span>(T);</span><br><span class="line">    <span class="keyword">var</span> fields = _cache.GetOrCreate(type.FullName, entry =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> type.GetFields()</span><br><span class="line">            .Select(f =&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                Field = f,</span><br><span class="line">                Attribute = f.GetCustomAttribute&lt;MapToAttribute&gt;()</span><br><span class="line">            &#125;)</span><br><span class="line">            .Where(x =&gt; x.Attribute != <span class="literal">null</span>)</span><br><span class="line">            .ToList();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 使用缓存的 fields 进行赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a>关键注意事项</h3><ol>
<li><p><strong>性能优化</strong>：</p>
<ul>
<li>反射操作较慢，建议缓存 <code>FieldInfo</code> 和特性信息</li>
<li>对于高频调用场景，可使用表达式树或 Source Generators 预编译映射逻辑</li>
</ul>
</li>
<li><p><strong>错误处理</strong>：</p>
<ul>
<li>处理 <code>Convert.ChangeType</code> 的类型转换异常</li>
<li>检查数据源键是否存在</li>
</ul>
</li>
<li><p><strong>特性扩展</strong>：</p>
<ul>
<li>可增加更多属性控制映射行为（如是否必填、默认值）</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MapToAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Key &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Required &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> DefaultValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>兼容性</strong>：</p>
<ul>
<li>同时支持字段 (Field) 和属性 (Property)</li>
<li>处理私有字段需指定 <code>BindingFlags.NonPublic</code></li>
</ul>
</li>
</ol>
<hr>
<h3 id="替代方案对比"><a href="#替代方案对比" class="headerlink" title="替代方案对比"></a>替代方案对比</h3><div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>反射+特性</strong></td>
<td>灵活，无需预编译代码</td>
<td>性能较低</td>
</tr>
<tr>
<td><strong>表达式树</strong></td>
<td>性能接近原生代码</td>
<td>实现复杂度高</td>
</tr>
<tr>
<td><strong>Source Generators</strong></td>
<td>零运行时开销，高性能</td>
<td>需要学习 Roslyn API</td>
</tr>
<tr>
<td><strong>第三方库</strong></td>
<td>功能完善（如 AutoMapper）</td>
<td>引入外部依赖</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>通过自定义特性结合反射，可以实现灵活的数据到对象的映射逻辑，适用于配置文件解析、ORM 框架、API 响应反序列化等场景。对于性能敏感项目，建议使用缓存或编译时生成方案。</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>特性</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>图像坐标转换为世界坐标</title>
    <url>/%E5%9B%BE%E5%83%8F%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87.html</url>
    <content><![CDATA[<p>理解轮眉测试中如何通过识别图像点计算实际轮眉高度, 转换函数为:<code>CameraLib.CameraAgorithm</code>下的<code>public static PointF3D Pixel2World(PointF Pixel, CameraBase _camera, double Distance)</code><br>图像坐标转换为空间坐标的过程涉及相机的内参矩阵、外参矩阵（旋转矩阵和平移向量）以及可能的深度信息.</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="1-坐标系定义"><a href="#1-坐标系定义" class="headerlink" title="1. 坐标系定义"></a><strong>1. 坐标系定义</strong></h3><ol>
<li><strong>世界坐标系（World Coordinate System）</strong>：三维空间中的绝对坐标系，记为 $(X_w, Y_w, Z_w)$。</li>
<li><strong>相机坐标系（Camera Coordinate System）</strong>：以相机光心为原点，记为 $(X_c, Y_c, Z_c)$。</li>
<li><strong>图像坐标系（Image Coordinate System）</strong>：二维像素坐标系，记为 $(u, v)$。</li>
</ol>
<hr>
<h3 id="2-转换流程"><a href="#2-转换流程" class="headerlink" title="2. 转换流程"></a><strong>2. 转换流程</strong></h3><p>图像坐标到空间坐标的转换需要以下步骤：</p>
<ol>
<li><strong>从图像坐标系到相机坐标系</strong>（逆投影）：<ul>
<li>利用相机内参矩阵和深度信息，将像素坐标转换为相机坐标系下的三维坐标。</li>
</ul>
</li>
<li><strong>从相机坐标系到世界坐标系</strong>：<ul>
<li>利用相机的外参矩阵（旋转矩阵 $R$ 和平移向量 $T$），将相机坐标系下的坐标转换为世界坐标系。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="3-公式推导"><a href="#3-公式推导" class="headerlink" title="3. 公式推导"></a><strong>3. 公式推导</strong></h3><h4 id="（1）相机模型与投影公式"><a href="#（1）相机模型与投影公式" class="headerlink" title="（1）相机模型与投影公式"></a><strong>（1）相机模型与投影公式</strong></h4><p>相机的投影公式为：</p>
<script type="math/tex; mode=display">
Z_c \begin{bmatrix} u \\ v \\ 1 \end{bmatrix} =
K \begin{bmatrix} R & T \end{bmatrix} \begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix}</script><p>其中：</p>
<ul>
<li>$K$ 为内参矩阵：<script type="math/tex; mode=display">
K = \begin{bmatrix}
f_x & 0 & c_x \\
0 & f_y & c_y \\
0 & 0 & 1
\end{bmatrix}</script></li>
<li>$R$ 和 $T$ 为外参矩阵（旋转和平移）。</li>
</ul>
<hr>
<h4 id="（2）逆投影：图像坐标-→-相机坐标系"><a href="#（2）逆投影：图像坐标-→-相机坐标系" class="headerlink" title="（2）逆投影：图像坐标 → 相机坐标系"></a><strong>（2）逆投影：图像坐标 → 相机坐标系</strong></h4><p>假设已知深度 $Z_c$，图像坐标 $(u, v)$ 对应的相机坐标系坐标为：</p>
<script type="math/tex; mode=display">
\begin{cases}
X_c = \frac{(u - c_x) \cdot Z_c}{f_x} \\
Y_c = \frac{(v - c_y) \cdot Z_c}{f_y} \\
Z_c = \text{已知深度值}
\end{cases}</script><p><strong>矩阵形式</strong>：</p>
<script type="math/tex; mode=display">
\begin{bmatrix} X_c \\ Y_c \\ Z_c \end{bmatrix} =
K^{-1} \cdot Z_c \cdot \begin{bmatrix} u \\ v \\ 1 \end{bmatrix}</script><p>其中 $K^{-1}$ 为内参矩阵的逆：</p>
<script type="math/tex; mode=display">
K^{-1} = \begin{bmatrix}
\frac{1}{f_x} & 0 & -\frac{c_x}{f_x} \\
0 & \frac{1}{f_y} & -\frac{c_y}{f_y} \\
0 & 0 & 1
\end{bmatrix}</script><hr>
<h4 id="（3）相机坐标系-→-世界坐标系"><a href="#（3）相机坐标系-→-世界坐标系" class="headerlink" title="（3）相机坐标系 → 世界坐标系"></a><strong>（3）相机坐标系 → 世界坐标系</strong></h4><p>利用外参矩阵将相机坐标系坐标转换到世界坐标系：</p>
<script type="math/tex; mode=display">
\begin{bmatrix} X_w \\ Y_w \\ Z_w \\ 1 \end{bmatrix} =
\begin{bmatrix} R^T & -R^T T \\ 0 & 1 \end{bmatrix} \cdot
\begin{bmatrix} X_c \\ Y_c \\ Z_c \\ 1 \end{bmatrix}</script><p>其中 $R^T$ 是旋转矩阵的转置，$-R^T T$ 是平移向量的逆变换。</p>
<hr>
<h3 id="4-整合公式"><a href="#4-整合公式" class="headerlink" title="4. 整合公式"></a><strong>4. 整合公式</strong></h3><p>若已知深度 $Z_c$，完整的转换公式为：</p>
<script type="math/tex; mode=display">
\begin{bmatrix} X_w \\ Y_w \\ Z_w \end{bmatrix} =
R^T \left( K^{-1} \cdot Z_c \cdot \begin{bmatrix} u \\ v \\ 1 \end{bmatrix} - T \right)</script><hr>
<h3 id="5-特殊情况说明"><a href="#5-特殊情况说明" class="headerlink" title="5. 特殊情况说明"></a><strong>5. 特殊情况说明</strong></h3><ol>
<li><strong>深度未知（单目相机）</strong>：<ul>
<li>单张图像无法唯一确定三维坐标，需通过多视图几何（如立体匹配）或已知约束（如平面假设）求解。</li>
</ul>
</li>
<li><strong>平面场景假设</strong>：<ul>
<li>若物体位于已知平面 $Z_w = 0$，可通过单应性矩阵（Homography）直接转换。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h3><ul>
<li><strong>核心公式</strong>：<script type="math/tex; mode=display">
\begin{bmatrix} X_w \\ Y_w \\ Z_w \end{bmatrix} = R^T \left( K^{-1} \cdot Z_c \cdot \begin{bmatrix} u \\ v \\ 1 \end{bmatrix} - T \right)</script></li>
<li><strong>依赖参数</strong>：<ul>
<li>相机内参 $K$、外参 $R, T$、深度 $Z_c$。</li>
</ul>
</li>
<li><strong>适用场景</strong>：<ul>
<li>深度已知（如 RGB-D 相机）或多视图几何（双目视觉）。</li>
</ul>
</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PointF3D <span class="title">Pixel2World</span>(<span class="params">PointF Pixel, CameraBase _camera, <span class="built_in">double</span> Distance</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Mat Rvecs = <span class="keyword">new</span> Mat(<span class="number">3</span>, <span class="number">1</span>, MatType.CV_64FC1, <span class="keyword">new</span> <span class="built_in">double</span>[] &#123; _camera.Extrinsics_Rx, _camera.Extrinsics_Ry, _camera.Extrinsics_Rz &#125;);</span><br><span class="line">    Mat Tvecs = <span class="keyword">new</span> Mat(<span class="number">3</span>, <span class="number">1</span>, MatType.CV_64FC1, <span class="keyword">new</span> <span class="built_in">double</span>[] &#123;</span><br><span class="line">        _camera.Extrinsics_Tx,</span><br><span class="line">        _camera.Extrinsics_Ty,</span><br><span class="line">        _camera.Extrinsics_Tz &#125;);</span><br><span class="line">    Mat RotationMatrix = <span class="keyword">new</span> Mat(<span class="number">3</span>, <span class="number">3</span>, MatType.CV_64FC1);</span><br><span class="line">    Mat RotationMatrix_Invert = <span class="keyword">new</span> Mat(<span class="number">3</span>, <span class="number">3</span>, MatType.CV_64FC1);</span><br><span class="line">    Mat CameraMatrix = <span class="keyword">new</span> Mat(<span class="number">3</span>,<span class="number">3</span>,MatType.CV_64FC1,<span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>,<span class="number">3</span>]&#123; </span><br><span class="line">    &#123;_camera.Intrinsics_Fx,<span class="number">0</span>,_camera.Intrinsics_Cx&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,_camera.Intrinsics_Fy,_camera.Intrinsics_Cy&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;&#125;);</span><br><span class="line">    Mat CameraMatrix_Invert = <span class="keyword">new</span> Mat(<span class="number">3</span>,<span class="number">3</span>,MatType.CV_64FC1);</span><br><span class="line">    Mat ImagePoint = <span class="keyword">new</span> Mat(<span class="number">3</span>, <span class="number">1</span>, MatType.CV_64FC1, <span class="keyword">new</span> <span class="built_in">double</span>[] &#123; Pixel.X, Pixel.Y, <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line">    Cv2.Rodrigues(Rvecs, RotationMatrix);</span><br><span class="line">    Cv2.Invert(RotationMatrix, RotationMatrix_Invert, DecompTypes.SVD);</span><br><span class="line">    Cv2.Invert(CameraMatrix, CameraMatrix_Invert, DecompTypes.SVD);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算坐标(相机坐标系)</span></span><br><span class="line">    Mat wcPoint = RotationMatrix_Invert * (Distance * CameraMatrix_Invert * ImagePoint - Tvecs);</span><br><span class="line"></span><br><span class="line">    PointF3D worldPoint = <span class="keyword">new</span> PointF3D(</span><br><span class="line">        wcPoint.At&lt;<span class="built_in">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>)  + _camera.Point3DX, </span><br><span class="line">        wcPoint.At&lt;<span class="built_in">double</span>&gt;(<span class="number">1</span>, <span class="number">0</span>)  + _camera.Point3DY, </span><br><span class="line">        wcPoint.At&lt;<span class="built_in">double</span>&gt;(<span class="number">2</span>, <span class="number">0</span>) + _camera.Point3DZ);</span><br><span class="line">    <span class="keyword">return</span> worldPoint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows安装配置Docker</title>
    <url>/Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEDocker.html</url>
    <content><![CDATA[<p>windows安装docker, 示例部署gitlab<br><span id="more"></span></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>自行下载安装Docker Desktop</p>
<p>安装完成后命令行输入<code>docker -v</code>可查看Docker版本信息</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h3><ol>
<li><p>在配置中添加registry mirrors</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;registry-mirrors&quot;:</span> [</span><br><span class="line"> <span class="string">&quot;https://docker.1ms.run&quot;</span>,</span><br><span class="line"> <span class="string">&quot;https://docker.xuanyuan.me&quot;</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改docker/daemon.json文件设置registry mirrors</p>
</li>
</ol>
<h3 id="拉去镜像"><a href="#拉去镜像" class="headerlink" title="拉去镜像"></a>拉去镜像</h3><p>如: 拉取gitlab<code>docker pull gitlab/gitlab-ee:latest</code></p>
<h4 id="Gitlab配置"><a href="#Gitlab配置" class="headerlink" title="Gitlab配置"></a>Gitlab配置</h4><p>新建文件路径存储Gitlab信息如:</p>
<blockquote>
<p>gitlab</p>
<blockquote>
<p>config<br>data<br>logs<br>docker-compose.yml</p>
</blockquote>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span>  <span class="comment"># 使用 GitLab 企业版镜像，或将 &#x27;gitlab-ee&#x27; 改为 &#x27;gitlab-ce&#x27; 使用社区版</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;localhost&#x27;</span>  <span class="comment"># 配置 GitLab 的主机名，可以改为你自己的域名或 IP 地址</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        external_url &#x27;http://localhost&#x27;  # GitLab 的外部 URL，建议替换为你服务器的域名或 IP</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>    <span class="comment"># 映射 HTTP 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span>  <span class="comment"># 映射 HTTPS 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;22:22&#x27;</span>    <span class="comment"># 映射 SSH 端口，供 GitLab 使用</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/logs:/var/log/gitlab</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&#x27;json-file&#x27;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&#x27;2g&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="启动Gitlab"><a href="#启动Gitlab" class="headerlink" title="启动Gitlab"></a>启动Gitlab</h4><p>使用命令<code>docker-compose up -d</code>启动容器需要一定时间, 期间可以用<code>docker ps</code>查看状态, 从starting转为healthy则启动成功<br>访问<a href="http://localhost即可登录gitlab">http://localhost即可登录gitlab</a><br>默认用户为：root 密码在gitlab部署目录下gitlab下的gitlab/config/initial_root_password文件中</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-composer常用指令</title>
    <url>/Docker-composer%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取工程中所有服务依赖的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pull</span></span><br><span class="line"><span class="comment"># 拉取工程中 nginx 服务依赖的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pull</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前台启动</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"><span class="comment"># -f 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">-f</span> <span class="string">docker-compose.yml</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出日志，不同的服务输出使用不同的颜色来区分</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">logs</span></span><br><span class="line"><span class="comment"># 跟踪日志输出</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">logs</span> <span class="string">-f</span></span><br><span class="line"><span class="comment"># 关闭颜色</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">logs</span> <span class="string">--no-color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">ps</span></span><br><span class="line"><span class="comment"># 列出工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">ps</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在工程中指定服务的容器上执行 echo &quot;helloworld&quot;</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">run</span> <span class="string">nginx</span> <span class="string">echo</span> <span class="string">&quot;helloworld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">exec</span> <span class="string">nginx</span> <span class="string">bash</span></span><br><span class="line"><span class="comment"># 当一个服务拥有多个容器时，可通过 --index 参数进入到该服务下的任何容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">exec</span> <span class="string">--index=1</span> <span class="string">nginx</span> <span class="string">bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pause</span></span><br><span class="line"><span class="comment"># 暂停工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pause</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">unpause</span></span><br><span class="line"><span class="comment"># 恢复工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">unpause</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">restart</span></span><br><span class="line"><span class="comment"># 重启工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">start</span></span><br><span class="line"><span class="comment"># 启动工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">start</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span></span><br><span class="line"><span class="comment"># 停止工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过发送 SIGKILL 信号停止工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">kill</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有（停止状态）服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span></span><br><span class="line"><span class="comment"># 先停止所有服务的容器，再删除所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-s</span></span><br><span class="line"><span class="comment"># 不询问是否删除，直接删除</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-f</span></span><br><span class="line"><span class="comment"># 删除服务容器挂载的数据卷</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-v</span></span><br><span class="line"><span class="comment"># 删除工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-sv</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并删除工程中所有服务的容器、网络</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span></span><br><span class="line"><span class="comment"># 停止并删除工程中所有服务的容器、网络、镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">down</span> <span class="string">--rmi</span> <span class="string">all</span></span><br><span class="line"><span class="comment"># 停止并删除工程中所有服务的容器、网络、数据卷</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">down</span> <span class="string">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有服务的容器所对应的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">images</span></span><br><span class="line"><span class="comment"># 打印指定服务的容器所对应的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">images</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定服务容器的某个端口所映射的宿主机端口</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">port</span> <span class="string">nginx</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工程中所有服务的容器正在运行的进程</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">top</span></span><br><span class="line"><span class="comment"># 显示工程中指定服务的容器正在运行的进程</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">top</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>BEP软件配置实现与BBK通讯</title>
    <url>/BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF.html</url>
    <content><![CDATA[<p>配置BEP四轮软件和注册表实现BBK与BEP通讯<br><span id="more"></span></p>
<h2 id="通讯简介"><a href="#通讯简介" class="headerlink" title="通讯简介"></a>通讯简介</h2><p>BBK与BEP软件之间可选择串口(232)和TCP两种通讯方式, 现场常用串口通讯<br>软件之间交互主要有两个, 1. BBK扫码后将车型信息发送给BEP; 2. BEP将测试结果发送给BBK软件</p>
<h2 id="注册表配置"><a href="#注册表配置" class="headerlink" title="注册表配置"></a>注册表配置</h2><h3 id="选择通讯方式"><a href="#选择通讯方式" class="headerlink" title="选择通讯方式"></a>选择通讯方式</h3><h4 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h4><p><img src="BEP软件配置实现与BBK通讯/RegSerial.PNG" alt="Reg"></p>
<p>如上图<code>Use Host</code>用于配置软件间的通讯方式, 1为串口通讯, 2为网络通讯<br>当选择串口通讯时需要在软件中配置串口号, BEP软件对串口号的列举有限制,若串口使用扩展设备时串口号大于限值则不会在软件中显示, 这时需要将限值改大后再选择对应串口, 对应更改上图中的<code>Number of Serial Ports on Machine</code>.</p>
<h4 id="网口"><a href="#网口" class="headerlink" title="网口"></a>网口</h4><p><img src="BEP软件配置实现与BBK通讯/RegTcpip.PNG" alt="Tcp"></p>
<p>若选择网口通讯则需要配置上图所示的IP及端口号</p>
<h3 id="Host配置"><a href="#Host配置" class="headerlink" title="Host配置"></a>Host配置</h3><p>BEP与BBK软件通讯中有相应的协议规则, 为了更方便的使用需要屏蔽一些规则</p>
<p><img src="BEP软件配置实现与BBK通讯/RegHost.PNG" alt="Host"></p>
<p>其中最主要的是要将<code>Use Host Handshaking</code>握手的配置改为0屏蔽掉, 否则无法直接与BEP软件进行数据交互<br>也可将图中所有<code>Use</code>开头值为1的配置改为0</p>
<h3 id="BEP软件配置"><a href="#BEP软件配置" class="headerlink" title="BEP软件配置"></a>BEP软件配置</h3><h4 id="串口-1"><a href="#串口-1" class="headerlink" title="串口"></a>串口</h4><p><img src="BEP软件配置实现与BBK通讯/BEPSerial.PNG" alt="Serial"></p>
<p>配置完注册表后需要配置BEP软件中的串口号<br>其中BEP软件通过HOST串口将测试数据发送给BBK<br>通过SCANNER串口接收BBK发送的车型信息<br>其他不需要的不用管或者在注册表中屏蔽</p>
<h4 id="网口-1"><a href="#网口-1" class="headerlink" title="网口"></a>网口</h4><p><img src="BEP软件配置实现与BBK通讯/BEPTcp.PNG" alt="TCP"></p>
<p>若选择网口通讯则需要在上图中进行配置</p>
<h4 id="车型数据规则配置"><a href="#车型数据规则配置" class="headerlink" title="车型数据规则配置"></a>车型数据规则配置</h4><p><img src="BEP软件配置实现与BBK通讯/BEPVINConfig.PNG" alt="VIN"></p>
<p>BEP接收BBK发送车型数据字符串后会解析为VIN和ZTS, 由于ZTS可能存在不同长度所以需要配置不同的解析规则</p>
<p>具体配置参考上图, VIN为17位, ZTS为2位</p>
<p>BBK发送的车型数据也有一定规则, 在上图第二个标签也中进行配置, 默认为<code>0x02</code>STX开头, <code>0x03</code>ETX结尾</p>
<h4 id="测试结果发送配置"><a href="#测试结果发送配置" class="headerlink" title="测试结果发送配置"></a>测试结果发送配置</h4><p><img src="BEP软件配置实现与BBK通讯/BEPRsm.PNG" alt="rsm"></p>
<p>BEP通过图中<code>rsm_hoststring.xml</code>中配置的规则生成数据字符串后发送给BBK, BBK接收后通过同样的规则进行解析, 因此需要保证BEP和BBK调用该文件的一致性, 上图为BEP软件读取路径, 该路径在注册表配置HOST时可更改; BBK文件路径在相应Config文件下</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>AlgorithmLearning-二分查找(分治递归)</title>
    <url>/AlgorithmLearning-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92.html</url>
    <content><![CDATA[<p>基于分治的二分查找<br><span id="more"></span></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] sortedArray2 = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">46</span>, <span class="number">57</span>, <span class="number">68</span>, <span class="number">79</span> &#125;;  </span><br><span class="line">FindIndex(sortedArray2, <span class="number">25</span>, <span class="number">0</span>, <span class="number">9</span>);  </span><br><span class="line"><span class="comment">//查找target = 6的index  </span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">FindIndex</span>(<span class="params"><span class="built_in">int</span>[] sortedArray, <span class="built_in">int</span> target, <span class="built_in">int</span> start, <span class="built_in">int</span> end</span>)</span>  </span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(start &gt; end)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> <span class="built_in">int</span> mid = (start + end) / <span class="number">2</span>;  </span><br><span class="line">    mid.Dump();</span><br><span class="line">    <span class="keyword">if</span>(sortedArray[mid] == target)</span><br><span class="line">     <span class="keyword">return</span> mid;    </span><br><span class="line"> <span class="keyword">if</span>(sortedArray[mid] &lt; target)  </span><br><span class="line">    &#123;        </span><br><span class="line">     <span class="comment">//递归子问题f(m + 1, end)</span></span><br><span class="line">     <span class="keyword">return</span> FindIndex(sortedArray, target, mid + <span class="number">1</span>, end);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">     <span class="comment">//递归子问题f(start, m - 1) </span></span><br><span class="line">     <span class="keyword">return</span> FindIndex(sortedArray, target, start, mid - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>AlgorithmLearning-汉诺塔(分治递归)</title>
    <url>/AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92.html</url>
    <content><![CDATA[<p>利用分治处理汉诺塔问题<br><span id="more"></span></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定三根柱子，记为 A、B 和 C 。起始状态下，柱子A 上套着 𝑛 个圆盘，它们从上到下按照从小到大的顺序排列。我们的任务是要把这 𝑛 个圆盘移到柱子C 上，并保持它们的原有顺序不变</p>
<ol>
<li>圆盘只能从一根柱子顶部拿出，从另一根柱子顶部放入。  </li>
<li>每次只能移动一个圆盘。  </li>
<li>小圆盘必须时刻位于大圆盘之上。<br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133250.png" alt="AC"></li>
</ol>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h4 id="对于问题-𝑓-1"><a href="#对于问题-𝑓-1" class="headerlink" title="对于问题 𝑓(1)"></a>对于问题 𝑓(1)</h4><p>即当只有一个圆盘时，我们将它直接从 A 移动至 C 即可<br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133711.png" alt="AC"></p>
<h4 id="对于问题-𝑓-2"><a href="#对于问题-𝑓-2" class="headerlink" title="对于问题 𝑓(2)"></a>对于问题 𝑓(2)</h4><p>即当有两个圆盘时， 由于要时刻满足小圆盘在大圆盘之上，因此需要借助<br>B 来完成移动。</p>
<ol>
<li>先将上面的小圆盘从 A 移至 B 。  </li>
<li>再将大圆盘从 A 移至 C 。  </li>
<li>最后将小圆盘从 B 移至 C 。<br>解决问题 𝑓(2) 的过程可总结为： 将两个圆盘借助 B 从 A 移至 C 。其中，C 称为目标柱、B 称为缓冲柱。<br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133805.png" alt="AC1"><br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133825.png" alt="AC2"><br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133831.png" alt="AC3"><br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133835.png" alt="AC4"></li>
</ol>
<h4 id="对于问题-𝑓-3"><a href="#对于问题-𝑓-3" class="headerlink" title="对于问题 𝑓(3)"></a>对于问题 𝑓(3)</h4><p>即当有三个圆盘时，情况变得稍微复杂了一些。<br>因为已知 𝑓(1) 和 𝑓(2) 的解，所以我们可从分治角度思考， 将 A 顶部的两个圆盘看作一个整体, 这样三个圆盘就被顺利地从 A 移至 C 了。</p>
<ol>
<li>令 B 为目标柱、 C 为缓冲柱，将两个圆盘从 A 移至 B 。  </li>
<li>将 A 中剩余的一个圆盘从 A 直接移动至 C 。  </li>
<li>令 C 为目标柱、 A 为缓冲柱，将两个圆盘从 B 移至 C 。<br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133859.png" alt="AC"><br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133903.png" alt="AC"><br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133907.png" alt="AC"><br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133919.png" alt="AC"></li>
</ol>
<p>从本质上看， 我们将问题 𝑓(3) 划分为两个子问题 𝑓(2) 和一个子问题 𝑓(1) 。按顺序解决这三个子问题之后，<br>原问题随之得到解决。这说明子问题是独立的，而且解可以合并。<br>至此，我们可总结出下图所示的解决汉诺塔问题的分治策略：将原问题 𝑓(𝑛) 划分为两个子问题 𝑓(𝑛-1)<br>和一个子问题 𝑓(1) ，并按照以下顺序解决这三个子问题。  </p>
<ol>
<li>将 𝑛 - 1 个圆盘借助 C 从 A 移至 B 。  </li>
<li>将剩余 1 个圆盘从 A 直接移至 C 。  </li>
<li>将 𝑛 - 1 个圆盘借助 A 从 B 移至 C 。<br>对于这两个子问题 𝑓(𝑛 - 1) ， 可以通过相同的方式进行递归划分，直至达到最小子问题 𝑓(1) 。而 𝑓(1) 的<br>解是已知的，只需一次移动操作即可。<br><img src="AlgorithmLearning-汉诺塔-分治递归/20250619133615.png" alt="AC"></li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 移动一个圆盘 */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; src, List&lt;<span class="built_in">int</span>&gt; target</span>)</span> </span><br><span class="line">&#123;  </span><br><span class="line"> <span class="comment">// 从 src 顶部拿出一个圆盘  </span></span><br><span class="line"> <span class="built_in">int</span> pan = src[^<span class="number">1</span>];  </span><br><span class="line"> src.RemoveAt(src.Count - <span class="number">1</span>);  </span><br><span class="line"> <span class="comment">// 将圆盘放入 target 顶部  </span></span><br><span class="line"> target.Add(pan);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 求解汉诺塔问题 f(i) */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span>(<span class="params"><span class="built_in">int</span> i, List&lt;<span class="built_in">int</span>&gt; src, List&lt;<span class="built_in">int</span>&gt; buffer, List&lt;<span class="built_in">int</span>&gt; target</span>)</span> &#123;  </span><br><span class="line"> <span class="comment">// 若 src 只剩下一个圆盘，则直接将其移到 target  </span></span><br><span class="line"> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;  </span><br><span class="line">  Move(src, target);  </span><br><span class="line">  <span class="keyword">return</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">// 子问题 f(i-1) ：将 src 顶部 i-1 个圆盘借助 target 移到 buffer  </span></span><br><span class="line"> DFS(i - <span class="number">1</span>, src, target, buffer);  </span><br><span class="line"> <span class="comment">// 子问题 f(1) ：将 src 剩余一个圆盘移到 target  </span></span><br><span class="line"> Move(src, target);  </span><br><span class="line"> <span class="comment">// 子问题 f(i-1) ：将 buffer 顶部 i-1 个圆盘借助 src 移到 target</span></span><br><span class="line"> DFS(i - <span class="number">1</span>, buffer, src, target);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 求解汉诺塔问题 */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SolveHanota</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; A, List&lt;<span class="built_in">int</span>&gt; B, List&lt;<span class="built_in">int</span>&gt; C</span>)</span> &#123;  </span><br><span class="line"> <span class="built_in">int</span> n = A.Count;  </span><br><span class="line"> <span class="comment">// 将 A 顶部 n 个圆盘借助 B 移到 C  </span></span><br><span class="line"> DFS(n, A, B, C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp补课笔记TypeConverter</title>
    <url>/CSharp%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0TypeConverter.html</url>
    <content><![CDATA[<p>实现不同类型之间的转换, 如动态的将字符串转换为对象实例<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestTypeConvert</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    TypeConverter tc = TypeDescriptor.GetConverter(<span class="keyword">typeof</span>(ColorRGB));</span><br><span class="line"></span><br><span class="line">    ColorRGB colorRGB1 = (ColorRGB)tc.ConvertFromString(<span class="string">&quot;#FF8800&quot;</span>);</span><br><span class="line">    ColorRGB colorRGB2 = (ColorRGB)tc.ConvertFromString(<span class="string">&quot;255, 136, 0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> colorString1 = tc.ConvertToString(colorRGB1);</span><br><span class="line">    <span class="built_in">string</span> colorString2 = tc.ConvertToString(colorRGB2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将转换器与目标类型关联</span></span><br><span class="line">[<span class="meta">TypeConverter(typeof(ColorRGBConverter))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ColorRGB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> R; <span class="keyword">public</span> <span class="built_in">byte</span> G; <span class="keyword">public</span> <span class="built_in">byte</span> B;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorRGB</span>(<span class="params"><span class="built_in">byte</span> r, <span class="built_in">byte</span> g, <span class="built_in">byte</span> b</span>)</span></span><br><span class="line">    &#123; R = r; G = g; B = b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;#&#123;0:X2&#125;&#123;1:X2&#125;&#123;2:X2&#125;&quot;</span>, R, G, B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义类型转换器"><a href="#定义类型转换器" class="headerlink" title="定义类型转换器"></a>定义类型转换器</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ColorRGBConverter</span> : <span class="title">TypeConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义可以从哪些类型转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanConvertFrom</span>(<span class="params">ITypeDescriptorContext context, Type sourceType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sourceType == <span class="keyword">typeof</span>(<span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanConvertTo</span>(<span class="params">ITypeDescriptorContext context, Type destinationType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.CanConvertTo(context, destinationType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现将字符串转化为对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ConvertFrom</span>(<span class="params">ITypeDescriptorContext context, CultureInfo culture, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span> <span class="keyword">is</span> <span class="built_in">string</span> strValue)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(strValue.StartsWith(<span class="string">&quot;#&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (strValue.Length == <span class="number">7</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ColorRGB(<span class="built_in">byte</span>.Parse(strValue.Substring(<span class="number">1</span>,<span class="number">2</span>), NumberStyles.HexNumber),</span><br><span class="line">                                            <span class="built_in">byte</span>.Parse(strValue.Substring(<span class="number">3</span>,<span class="number">2</span>), NumberStyles.HexNumber),</span><br><span class="line">                                            <span class="built_in">byte</span>.Parse(strValue.Substring(<span class="number">5</span>,<span class="number">2</span>), NumberStyles.HexNumber));                        </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span>[] parts = strValue.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> ColorRGB(<span class="built_in">byte</span>.Parse(parts[<span class="number">0</span>].Trim()),</span><br><span class="line">                                        <span class="built_in">byte</span>.Parse(parts[<span class="number">1</span>].Trim()),</span><br><span class="line">                                        <span class="built_in">byte</span>.Parse(parts[<span class="number">2</span>].Trim()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FormatException(<span class="string">&quot;格式不正确&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.ConvertFrom(context, culture, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ConvertTo</span>(<span class="params">ITypeDescriptorContext context, CultureInfo culture, <span class="built_in">object</span> <span class="keyword">value</span>, Type destinationType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span> <span class="keyword">is</span> ColorRGB &amp;&amp; destinationType == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>.ToString();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.ConvertTo(context, culture, <span class="keyword">value</span>, destinationType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>CultureInfo主要用于特定区域的数字, 日期, 货币等格式化设置</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>CSharp 补课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK根据CAN通讯矩阵读取数据示例</title>
    <url>/BBK%E6%A0%B9%E6%8D%AECAN%E9%80%9A%E8%AE%AF%E7%9F%A9%E9%98%B5%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E7%A4%BA%E4%BE%8B.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="76f522e509ae465e5f5fc92cb18adab9b2f01df3f95812387f1b58b0bdbf80ae"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>BBK</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>CSharp</tag>
        <tag>CAN</tag>
      </tags>
  </entry>
  <entry>
    <title>Basler相机网卡驱动配置更改</title>
    <url>/Basler%E7%9B%B8%E6%9C%BA%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9.html</url>
    <content><![CDATA[<p>解决程序拍照时软件<strong>网络占比高</strong>或相机拍照时偶发<strong>丢帧</strong>问题<br><span id="more"></span></p>
<h2 id="问题确认"><a href="#问题确认" class="headerlink" title="问题确认"></a>问题确认</h2><p>打开网卡配置检查相机对应网卡是否为<code>Basler GigE Vision Adapter</code>驱动, 若不是则需要更改.<br>如下图中<code>PLC</code>网卡下方显示为<code>Intel</code>驱动, <code>WBH_LF</code>网卡为<code>Basler</code>驱动</p>
<p><img src="Basler相机网卡驱动配置更改/捕获1.png" alt="捕获1"></p>
<h2 id="更改驱动"><a href="#更改驱动" class="headerlink" title="更改驱动"></a>更改驱动</h2><p>选择对应网卡进入属性编辑界面: 属性-&gt;配置</p>
<p><img src="Basler相机网卡驱动配置更改/捕获2.png" alt="捕获2"></p>
<p>属性-&gt;配置-&gt;驱动程序-&gt;更新驱动程序-&gt;<strong>浏览我的电脑以查找驱动程序</strong></p>
<p><img src="Basler相机网卡驱动配置更改/捕获3.png" alt="捕获3"></p>
<p>点击: <strong>让我从计算机上的可用驱动程序列表中选取</strong></p>
<p><img src="Basler相机网卡驱动配置更改/捕获4.png" alt="捕获4"></p>
<p>选择: <code>Basler GigE Vision Adapter</code> 后点击下一步即可</p>
<p><img src="Basler相机网卡驱动配置更改/捕获5.png" alt="捕获5"></p>
<p>将所有相机网卡改完后验证问题是否解决</p>
]]></content>
      <categories>
        <category>BBK</category>
      </categories>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>ABS参数配置说明</title>
    <url>/ABS%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<p><center></center><br>ABS增减压参数配置文件路径在Config\ABSValveTestConfig中, 不同车型会自动生成相应配置文件<br><span id="more"></span></p>
<h2 id="ABS参数配置说明"><a href="#ABS参数配置说明" class="headerlink" title="ABS参数配置说明"></a>ABS参数配置说明</h2><p>增减压时间参数说明如下, 因各现场及车型不同, 参数意义可能不同</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">NewDataSet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Table1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--0:增减压力值采集满设定时间后退出当前增减压步骤;1:增减压力值合格后立即退出当前增减压步骤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UseJump</span>&gt;</span>0<span class="tag">&lt;/<span class="name">UseJump</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--脉冲增压次数,用于ESC或ESP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">IncPulseN</span>&gt;</span>5<span class="tag">&lt;/<span class="name">IncPulseN</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增压力值采集时间,记录当前时间内的最大值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">IncCollectT</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">IncCollectT</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--减压力值采集时间,记录当前时间内的最小值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DecCollectT</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">DecCollectT</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--左前增压输入时间参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A1_IncT1</span>&gt;</span>250<span class="tag">&lt;/<span class="name">A1_IncT1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--左前脉冲增压输入时间参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A1_IncT2</span>&gt;</span>50<span class="tag">&lt;/<span class="name">A1_IncT2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--左前减压输入时间参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A1_DecT</span>&gt;</span>250<span class="tag">&lt;/<span class="name">A1_DecT</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--右前增压输入时间参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A2_IncT1</span>&gt;</span>150<span class="tag">&lt;/<span class="name">A2_IncT1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--右前脉冲增压输入时间参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A2_IncT2</span>&gt;</span>50<span class="tag">&lt;/<span class="name">A2_IncT2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--右前减压输入时间参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A2_DecT</span>&gt;</span>250<span class="tag">&lt;/<span class="name">A2_DecT</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--预留--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A3_IncT1</span>&gt;</span>150<span class="tag">&lt;/<span class="name">A3_IncT1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A3_IncT2</span>&gt;</span>50<span class="tag">&lt;/<span class="name">A3_IncT2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A3_DecT</span>&gt;</span>250<span class="tag">&lt;/<span class="name">A3_DecT</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A4_IncT1</span>&gt;</span>150<span class="tag">&lt;/<span class="name">A4_IncT1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A4_IncT2</span>&gt;</span>50<span class="tag">&lt;/<span class="name">A4_IncT2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A4_DecT</span>&gt;</span>250<span class="tag">&lt;/<span class="name">A4_DecT</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Table1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">NewDataSet</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>Motorola解析赋值</title>
    <url>/Motorola%E8%A7%A3%E6%9E%90%E8%B5%8B%E5%80%BC.html</url>
    <content><![CDATA[<p>Motorola数据解析及赋值<br><span id="more"></span></p>
<h2 id="Motorola格式转换"><a href="#Motorola格式转换" class="headerlink" title="Motorola格式转换"></a>Motorola格式转换</h2><p>字节顺序: <code>Byte0, Byte1, … Byte7</code><br>bit位顺序: <code>bit7, bit6, … bit0</code></p>
<h3 id="Motorola-LSB"><a href="#Motorola-LSB" class="headerlink" title="Motorola LSB"></a><strong><code>Motorola LSB</code></strong></h3><p><img src="Motorola解析赋值/LSB.png" alt="`LSB`"></p>
<h3 id="Motorola-MSB"><a href="#Motorola-MSB" class="headerlink" title="Motorola MSB"></a><strong><code>Motorola MSB</code></strong></h3><p><img src="Motorola解析赋值/MSB.png" alt="`MSB`"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">ulong</span> <span class="title">Motorola_Get</span>(<span class="params"><span class="built_in">byte</span>[] data, <span class="built_in">int</span> startbit, <span class="built_in">int</span> bitlength, <span class="built_in">bool</span> msb = <span class="literal">true</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//处理格式转换</span></span><br><span class="line">    <span class="built_in">ulong</span> longData = <span class="number">0</span>;</span><br><span class="line">    data.ToList().ForEach(b =&gt; longData = (longData &lt;&lt; <span class="number">8</span>) + b);</span><br><span class="line">    <span class="comment">//计算移位</span></span><br><span class="line">    <span class="built_in">int</span> move = msb ? data.Length * <span class="number">8</span> - (<span class="number">8</span> - startbit % <span class="number">8</span> - <span class="number">1</span> + (startbit / <span class="number">8</span>) * <span class="number">8</span>) - bitlength : (data.Length - <span class="number">1</span> - (startbit / <span class="number">8</span>)) * <span class="number">8</span> + startbit % <span class="number">8</span>;</span><br><span class="line">    <span class="comment">//计算屏蔽码</span></span><br><span class="line">    <span class="built_in">ulong</span> mask = (<span class="built_in">ulong</span>)Math.Pow(<span class="number">2</span>, bitlength) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    longData &gt;&gt;= move;</span><br><span class="line">    longData &amp;= mask;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> longData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Motorola_Set</span>(<span class="params"><span class="built_in">byte</span>[] data, <span class="built_in">double</span> values, <span class="built_in">int</span> startbit, <span class="built_in">int</span> bitlength, <span class="built_in">double</span> factor, <span class="built_in">double</span> offset, <span class="built_in">bool</span> msb = <span class="literal">true</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//处理格式转换</span></span><br><span class="line">    <span class="built_in">ulong</span> dataSet = Convert.ToUInt64((values - offset) / factor);</span><br><span class="line">    <span class="built_in">ulong</span> longData = <span class="number">0</span>;</span><br><span class="line">    data.ToList().ForEach(b =&gt; longData = (longData &lt;&lt; <span class="number">8</span>) + b);</span><br><span class="line">    <span class="comment">//计算移位</span></span><br><span class="line">    <span class="built_in">int</span> move = msb ? data.Length * <span class="number">8</span> - (<span class="number">8</span> - startbit % <span class="number">8</span> - <span class="number">1</span> + (startbit / <span class="number">8</span>) * <span class="number">8</span>) - bitlength : (data.Length - <span class="number">1</span> - (startbit / <span class="number">8</span>)) * <span class="number">8</span> + startbit % <span class="number">8</span>;</span><br><span class="line">    <span class="comment">//计算屏蔽码</span></span><br><span class="line">    <span class="built_in">ulong</span> mask = (<span class="built_in">ulong</span>)Math.Pow(<span class="number">2</span>, bitlength) - <span class="number">1</span>;</span><br><span class="line">    longData = longData &amp; ~(mask &lt;&lt; move) | ((dataSet &amp; mask) &lt;&lt; move);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; data.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data[<span class="number">7</span> - i] = (<span class="built_in">byte</span>)(longData &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>BBK启用CAN通讯超时时间配置</title>
    <url>/BBK%E5%90%AF%E7%94%A8CAN%E9%80%9A%E8%AE%AF%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p><center></center><br>像ABS测试默认通讯超时时间为100ms配置中的Time并未使用,可在代码中启用也可在Always中启用<br><span id="more"></span></p>
<h2 id="启用超时配置"><a href="#启用超时配置" class="headerlink" title="启用超时配置"></a>启用超时配置</h2><ol>
<li>找到Always文件中CAN通讯对象, ABS可在初始化通讯中看到</li>
<li>执行EnableUserTimeout方法</li>
</ol>
<p><img src="BBK启用CAN通讯超时时间配置/EnableUserTimeout.png" alt="启用超时配置"></p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>EOLPrint参数配置说明</title>
    <url>/EOLPrint%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<p><center></center><br>EOLPrint一般用于检测线打印工位<br><span id="more"></span></p>
<h2 id="EOLPrint"><a href="#EOLPrint" class="headerlink" title="EOLPrint"></a>EOLPrint</h2><p>该打印软件以EOLPrint\Report文件夹下的Excel为模板, 编辑中绑定单元格对应数据库字段</p>
<h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="EOLPrint参数配置说明/Print.jpg" alt="打印主界面"></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>用于编辑链接字符串</p>
<p>自动打印时需检查链接字符串的配置是否满足需求, 如下图只会打印”报告打印”字段为N且”全部合格”字段为Y的数据</p>
<p><img src="EOLPrint参数配置说明/ParamConfig.jpg" alt="编辑"></p>
<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>用于绑定数据库中字段, 如需更改模板字体或格式, 需要直接更改Report文件夹中excel模板文件</p>
<h3 id="管理模板"><a href="#管理模板" class="headerlink" title="管理模板"></a>管理模板</h3><p>用于添加重载模板</p>
<font color="#FF0000"> 请勿随便点击"删除选中模板" </font>  

<p>点击 打开Excel文件 选中Report文件中的模板来更新或添加</p>
<p><img src="EOLPrint参数配置说明/Temp.jpg" alt="编辑"></p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpWeb补充</title>
    <url>/HttpWeb%E8%A1%A5%E5%85%85.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="HttpWeb说明"><a href="#HttpWeb说明" class="headerlink" title="HttpWeb说明"></a>HttpWeb说明</h2><a href="/HttpWeb.html" title="HttpWeb">HttpWeb</a>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="解决SSL-TLS证书验证报错"><a href="#解决SSL-TLS证书验证报错" class="headerlink" title="解决SSL/TLS证书验证报错"></a>解决SSL/TLS证书验证报错</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net.Security;</span><br><span class="line"><span class="keyword">using</span> System.Security.Authentication;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography.X509Certificates;</span><br><span class="line"></span><br><span class="line"><span class="comment">//忽略SSL验证</span></span><br><span class="line">ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) =&gt; <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加SSL证书</span></span><br><span class="line">ServicePointManager.ServerCertificateValidationCallback = <span class="keyword">new</span> System.Net.Security.RemoteCertificateValidationCallback(CheckValidationResult);</span><br><span class="line">ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 |</span><br><span class="line">    SecurityProtocolType.Tls |</span><br><span class="line">    (SecurityProtocolType)<span class="number">0x300</span> |<span class="comment">//Tls11</span></span><br><span class="line">    (SecurityProtocolType)<span class="number">0xC00</span>;<span class="comment">//Tls12</span></span><br></pre></td></tr></table></figure>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">WebClient web = <span class="keyword">new</span> WebClient();</span><br><span class="line">web.Headers.Add(HttpRequestHeader.ContentType, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">web.Encoding = Encoding.UTF8;</span><br><span class="line"><span class="comment">//post</span></span><br><span class="line">recv = web.UploadString(mesGetVInfoUrl, jsonGetCurVehicle.ToString());</span><br><span class="line"><span class="comment">//request</span></span><br><span class="line">recv = web.DownloadString(url);</span><br><span class="line"><span class="keyword">var</span> recvObject = JObject.Parse(recv)</span><br><span class="line">JsonRecv jrecv = JsonConvert.DeserializeObject&lt;JsonRecv&gt;(recv);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">HttpListener httpListenner;</span><br><span class="line">httpListenner = <span class="keyword">new</span> HttpListener();</span><br><span class="line">httpListenner.AuthenticationSchemes = AuthenticationSchemes.Anonymous;</span><br><span class="line">httpListenner.Prefixes.Add(httpServerUrl);</span><br><span class="line">httpListenner.Start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(<span class="built_in">delegate</span></span><br><span class="line">&#123;</span><br><span class="line">    loop(httpListenner);</span><br><span class="line">&#125;)).Start();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loop</span>(<span class="params">HttpListener httpListenner</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        HttpListenerContext context = httpListenner.GetContext();</span><br><span class="line">        HttpListenerRequest request = context.Request;</span><br><span class="line">        HttpListenerResponse response = context.Response;</span><br><span class="line">        <span class="keyword">if</span> (request.HttpMethod == <span class="string">&quot;POST&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            HandlePost(request, response);                    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (request.HttpMethod == <span class="string">&quot;GET&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            response.OutputStream.Write(Encoding.ASCII.GetBytes(<span class="string">&quot;NotSupport&quot;</span>), <span class="number">0</span>, Encoding.ASCII.GetBytes(<span class="string">&quot;NotSupport&quot;</span>).Length);</span><br><span class="line">        &#125;</span><br><span class="line">        response.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">HandlePost</span>(<span class="params">HttpListenerRequest request, HttpListenerResponse response</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> stream = response.OutputStream;</span><br><span class="line">    <span class="built_in">byte</span>[] readBytes = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    request.InputStream.Read(readBytes, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">    <span class="built_in">string</span> recv = Encoding.ASCII.GetString(readBytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> jsonRecv = JObject.Parse(recv.Trim(<span class="string">&#x27;\0&#x27;</span>));</span><br><span class="line">    JObject jsonSend = <span class="keyword">new</span> JObject();</span><br><span class="line">    <span class="keyword">if</span> (jsonRecv[<span class="string">&quot;stationCode&quot;</span>].ToString() == <span class="string">&quot;EV&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        jsonSend[<span class="string">&quot;factoryCode&quot;</span>] = <span class="string">&quot;Changzhou&quot;</span>;</span><br><span class="line">        jsonSend[<span class="string">&quot;stationCode&quot;</span>] = <span class="string">&quot;EV&quot;</span>;</span><br><span class="line">        jsonSend[<span class="string">&quot;vin&quot;</span>] = <span class="string">&quot;12345678901234567&quot;</span>;</span><br><span class="line">        jsonSend[<span class="string">&quot;state&quot;</span>] = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">        jsonSend[<span class="string">&quot;result&quot;</span>] = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stream.Write(Encoding.ASCII.GetBytes(jsonSend.ToString()), <span class="number">0</span>, Encoding.ASCII.GetBytes(jsonSend.ToString()).Length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSharp</tag>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown画图</title>
    <url>/Markdown%E7%94%BB%E5%9B%BE.html</url>
    <content><![CDATA[<p><center></center><br>利用Mermaid绘制图标<br>详见: <a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md</a><br><span id="more"></span></p>
<h2 id="图类"><a href="#图类" class="headerlink" title="图类"></a>图类</h2><p>饼状图：使用pie关键字<br>流程图：使用graph关键字<br>序列图：使用sequenceDiagram关键字<br>甘特图：使用gantt关键字<br>类图：使用classDiagram关键字<br>状态图：使用stateDiagram关键字<br>用户旅程图：使用journey关键字</p>
<h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%注释</span><br><span class="line">pie</span><br><span class="line">    title 为什么总是宅在家里？</span><br><span class="line">    &quot;喜欢宅&quot; : 15</span><br><span class="line">    &quot;天气太热或太冷&quot; : 20</span><br><span class="line">    &quot;穷&quot; : 500</span><br></pre></td></tr></table></figure>
<pre class="mermaid">%%注释
pie
    title 为什么总是宅在家里？
    "喜欢宅" : 15
    "天气太热或太冷" : 20
    "穷" : 500</pre>

<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%注释</span><br><span class="line">graph LR</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B -- Yes --&gt; C[OK];</span><br><span class="line">    C --&gt; D[Rethink];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B -- No ----&gt; E[End];</span><br></pre></td></tr></table></figure>
<pre class="mermaid">%%注释
graph LR
    A[Start] --> B{Is it?};
    B -- Yes --> C[OK];
    C --> D[Rethink];
    D --> B;
    B -- No ----> E[End];</pre>

<h4 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h4><p>graph或graph TB或graph TD：从上往下<br>graph BT：从下往上<br>graph LR：从左往右<br>graph RL：从右往左</p>
<h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><p>无名字的结点：直接写内容，此时结点边框为方形；节点内容不支持空格<br>有名字的结点：节点名后书写内容，内容左右有特定符号，结点边框由符号决定；节点内容可以有空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%注释</span><br><span class="line">graph</span><br><span class="line">    默认方形</span><br><span class="line">    id1[方形]</span><br><span class="line">    id2(圆边矩形)</span><br><span class="line">    id3([体育场形])</span><br><span class="line">    id4[[子程序形]]</span><br><span class="line">    id5[(圆柱形)]</span><br><span class="line">    id6((圆形))</span><br></pre></td></tr></table></figure>
<pre class="mermaid">%%注释
graph
    默认方形
    id1[方形]
    id2(圆边矩形)
    id3([体育场形])
    id4[[子程序形]]
    id5[(圆柱形)]
    id6((圆形))</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%注释</span><br><span class="line">graph</span><br><span class="line">    id1&#123;菱形&#125;</span><br><span class="line">    id2&#123;&#123;六角形&#125;&#125;</span><br><span class="line">    id3[/平行四边形/]</span><br><span class="line">    id4[\反向平行四边形\]</span><br><span class="line">    id5[/梯形\]</span><br><span class="line">    id6[\反向梯形/]</span><br></pre></td></tr></table></figure>
<pre class="mermaid">%%注释
graph
    id1{菱形}
    id2
    id3[/平行四边形/]
    id4[\反向平行四边形\]
    id5[/梯形\]
    id6[\反向梯形/]</pre>

<h4 id="连线样式"><a href="#连线样式" class="headerlink" title="连线样式"></a>连线样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%注释</span><br><span class="line">graph LR</span><br><span class="line">a--&gt;b--实线--&gt;c--&gt;|实线|d</span><br><span class="line">a==&gt;b==粗线==&gt;c</span><br><span class="line">a-.-&gt;b-.虚线.-&gt;c</span><br></pre></td></tr></table></figure>
<pre class="mermaid">%%注释
graph LR
a-->b--实线-->c-->|实线|d
a==>b==粗线==>c
a-.->b-.虚线.->c</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a---b</span><br><span class="line">b--无箭头!---c</span><br><span class="line">c---|无箭头|d</span><br><span class="line">d===e</span><br><span class="line">e==无箭头===f</span><br><span class="line">f-.-g</span><br><span class="line">g-.无箭头.-h</span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph LR
a---b
b--无箭头!---c
c---|无箭头|d
d===e
e==无箭头===f
f-.-g
g-.无箭头.-h</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A o--o B</span><br><span class="line">    B &lt;--&gt; C</span><br><span class="line">    C x--x D</span><br></pre></td></tr></table></figure>
<pre class="mermaid">flowchart LR
    A o--o B
    B <--> C
    C x--x D</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%多重连接</span><br><span class="line">graph </span><br><span class="line">   a --&gt; b &amp; c--&gt; d</span><br><span class="line">   </span><br><span class="line">   A &amp; B--&gt; C &amp; D</span><br><span class="line">   </span><br><span class="line">    X --&gt; M</span><br><span class="line">    X --&gt; N</span><br><span class="line">    Y --&gt; M</span><br><span class="line">    Y --&gt; N</span><br></pre></td></tr></table></figure>
<pre class="mermaid">%%多重连接
graph 
   a --> b & c--> d

   A & B--> C & D

    X --> M
    X --> N
    Y --> M
    Y --> N</pre>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>OBDII参数配置说明</title>
    <url>/OBDII%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>如下图:</p>
<ol>
<li>KeyName: 通讯标识,不存在时程序自动创建</li>
<li>ClassName: BBKCAN驱动标识, 一般使用VCanCmdForBBKDrive</li>
<li>Time1: 单帧超时时间, 超过此时间报错Timeout</li>
<li>Time2: 收到78等待时间</li>
<li>Param1: OBD串口号</li>
<li>Param2: 波特率</li>
<li>Param3: 当前KeyName通讯生成的log名称(可不填)</li>
<li>Param4: 其他配置, 如250表示CAN通讯250K(默认500k); 250,1表示250k扩展帧; 500,1表示500k扩展帧;</li>
</ol>
<p><img src="OBDII参数配置说明/Config.jpg" alt="启用超时配置"></p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql数据导入导出</title>
    <url>/Postgresql%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA.html</url>
    <content><![CDATA[<h2 id="测试软件导出、Postgresql导入"><a href="#测试软件导出、Postgresql导入" class="headerlink" title="测试软件导出、Postgresql导入"></a>测试软件导出、Postgresql导入</h2><h3 id="测试软件导出"><a href="#测试软件导出" class="headerlink" title="测试软件导出"></a>测试软件导出</h3><blockquote>
<p>连接数据库设置完筛选条件后点击导出到Excel重命名为：表名.csv</p>
</blockquote>
<h3 id="测试软件导入"><a href="#测试软件导入" class="headerlink" title="测试软件导入"></a>测试软件导入</h3><blockquote>
<p>1、打开导出表添加新的数据后，删除第一行表头以及第一列序号<br>2、删除原数据库已有行后保存<br>3、打开Postgres找到相应表右键导入<br>4、文件名选择csv文件路径、格式选csv、字符编码可选<br>5、点击导入即可</p>
<blockquote>
<p>如果主键为自增序列执行6、7<br>6、将相应表的序列创建脚本后删除<br>7、更改脚本中的START大于新增数据的主键ID后执行脚本</p>
</blockquote>
</blockquote>
<h2 id="SQL-shell-psql-导入"><a href="#SQL-shell-psql-导入" class="headerlink" title="SQL shell(psql)导入"></a>SQL shell(psql)导入</h2><blockquote>
<p>1、将excel处理好后，另存为csv（Comma Delimited）<br>2、运行SQL shell(psql) 并登录<br>3、运行’COPY mytable FROM ‘/myfile.csv’  WITH CSV  HEADER</p>
</blockquote>
<h2 id="SQL-shell-psql-导出"><a href="#SQL-shell-psql-导出" class="headerlink" title="SQL shell(psql)导出"></a>SQL shell(psql)导出</h2><blockquote>
<p>COPY (select * from mytable) to ‘/myfile.csv’ with csv header;</p>
</blockquote>
<h2 id="数据库备份脚本"><a href="#数据库备份脚本" class="headerlink" title="数据库备份脚本"></a>数据库备份脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo off</span><br><span class="line">set PRJDB=LocalDB</span><br><span class="line">set FileName=%PRJDB%_%date:~0,4%_%date:~5,2%_%date:~8,2%.backup</span><br><span class="line">if not exist &quot;D:\BBK\DBbackup&quot; (md D:\BBK\DBbackup)</span><br><span class="line">D:/“Program Files (x86)“/PostgreSQL/9.5/bin\pg_dump.exe --host localhost --port 5432 --username &quot;postgres&quot; --no-password  --format custom --verbose --file &quot;D:\BBK\DBbackup\%FileName%&quot; &quot;LocalDB&quot;</span><br></pre></td></tr></table></figure>
<h2 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 删除7天以前的数据</span><br><span class="line">D:/“Program Files (x86)“/PostgreSQL/9.5/bin/psql -h 127.0.0.1 -p 5432 -d LocalDB -U postgres --command &quot;delete from 侧滑表 where 测试时间 &lt; (now() - interval &#x27;7 day&#x27;)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="时间扩展"><a href="#时间扩展" class="headerlink" title="时间扩展"></a>时间扩展</h3><h4 id="年"><a href="#年" class="headerlink" title="年"></a>年</h4><p>interval ‘2 years’<br>interval ‘2 year’<br>interval ‘2 y’<br>interval ‘2 Y’<br>interval ‘2Y’</p>
<h4 id="月"><a href="#月" class="headerlink" title="月"></a>月</h4><p>interval ‘1 month’<br>interval ‘one month’</p>
<h4 id="周"><a href="#周" class="headerlink" title="周"></a>周</h4><p>interval ‘3 week’</p>
<p>说明：interval 可以不写</p>
<p>运行时会提示数据用户名密码<br>windows系统可在<code>%APPDATA%\postgresql\pgpass.conf</code>中添加服务器信息，实现免密操作。<br>参考：<a href="https://www.postgresql.org/docs/current/libpq-pgpass.html">https://www.postgresql.org/docs/current/libpq-pgpass.html</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据格式</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.html</url>
    <content><![CDATA[<p><center></center><br>数据格式说明<br><span id="more"></span></p>
<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>基于64个可打印字符来表示二进制数据的方法<br>64个字符0~63分别对应A~Za~z0~9+/</p>
<p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3*8 = 4*6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。</p>
<h3 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h3><ol>
<li>把3个字节变成4个字节。</li>
<li>每76个字符加一个换行符。</li>
<li>最后的结束符也要处理。</li>
</ol>
<p>例如:<br>转换前: 10101101,10111010,01110110<br>转换后: 00101011, 00011011 ,00101001 ,00110110<br>十进制 43 27 41 54<br>对应码表中的值 r b p 2<br>所以上面的24位编码，编码后的Base64值为 rbp2</p>
<p>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲区中剩下的Bit用0补足。然后，每次取出6个bit，按照其值选择ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。<br>如果最后剩下两个输入数据，在编码结果后加1个“=”；如果最后剩下一个输入数据，编码结果后加2个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。</p>
]]></content>
  </entry>
  <entry>
    <title>BBK平台软件添加通讯点</title>
    <url>/BBK%E5%B9%B3%E5%8F%B0%E8%BD%AF%E4%BB%B6%E6%B7%BB%E5%8A%A0%E9%80%9A%E8%AE%AF%E7%82%B9.html</url>
    <content><![CDATA[<p><center></center><br>Always中添加并使用通讯点, 如ADAS,侧滑等或需要在平台实现动作控制的工位<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p><img src="BBK平台软件添加通讯点/Client.PNG" alt="创建Client"></p>
<p><img src="BBK平台软件添加通讯点/Base.PNG" alt="创建Base"></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><img src="BBK平台软件添加通讯点/Init.png" alt="初始化"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><img src="BBK平台软件添加通讯点/In.png" alt="输入点"></p>
<p><img src="BBK平台软件添加通讯点/Out.png" alt="输出点"></p>
<h3 id="状态显示"><a href="#状态显示" class="headerlink" title="状态显示"></a>状态显示</h3><p>在菜单中添加状态显示</p>
<p><img src="BBK平台软件添加通讯点/Show.png" alt="显示"></p>
<p>点击菜单中的 查看-设备状态</p>
<p><img src="BBK平台软件添加通讯点/ShowIO.jpg" alt="显示"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>按示例添加完成后打开程序会自动在Config文件夹中生成对应名称的xml文件</p>
<p><img src="BBK平台软件添加通讯点/Config.jpg" alt="输出点"></p>
<p>value需要手动配置绑定到对应IO点<br>WriteEnable输出点需配置为true<br>Reversion用于输入点位取反<br>AutoReset用于输出点位自动复位,-1为禁用,500为500ms后复位<br>ShowName为设备状态界面显示分类及名称</p>
<h3 id="常用类型说明"><a href="#常用类型说明" class="headerlink" title="常用类型说明"></a>常用类型说明</h3><ol>
<li>AdvOpera4.AdvConfigEx : 研华板卡</li>
<li>EIPNetOperaLib.EIPABConfig : AB PLC</li>
<li>S7NetOperaLib.S7NetConfig : 西门子PLC</li>
<li>EtherCATOperaLib.EtherCATConfig : 倍福模块</li>
<li>GeneralLib.xRemoterClientConfig : TCP设备间软件对象绑定:<a href="/BBK%E6%A3%80%E6%B5%8B%E7%BA%BF%E9%80%9A%E8%AE%AF%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D.html" title="BBK检测线通讯相关介绍">BBK检测线通讯相关介绍</a></li>
<li>OPCOpraLib.OPCConfigEx : OPC</li>
</ol>
<h3 id="通讯点使用说明"><a href="#通讯点使用说明" class="headerlink" title="通讯点使用说明"></a>通讯点使用说明</h3><h4 id="输入点"><a href="#输入点" class="headerlink" title="输入点"></a>输入点</h4><ol>
<li>IsTrue</li>
<li>IsFalse</li>
</ol>
<h4 id="输出点"><a href="#输出点" class="headerlink" title="输出点"></a>输出点</h4><ol>
<li>SetTrue</li>
<li>SetFalse</li>
<li>SetTrueFalseTimer脉冲输出, 默认持续500ms, 可输入参数为脉冲时间(int)</li>
</ol>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Minio存储文件</title>
    <url>/C-Minio%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<p><center></center><br>MinIO Client SDK 为 MinIO 和 Amazon S3 兼容云存储服务提供更高级别的 API<br>支持.Net4.5及以上<br><span id="more"></span></p>
<h2 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a>官方资料</h2><p>源码: <a href="https://github.com/minio/minio-dotnet">https://github.com/minio/minio-dotnet</a></p>
<h2 id="Server安装使用"><a href="#Server安装使用" class="headerlink" title="Server安装使用"></a>Server安装使用</h2><h3 id="下载Minio"><a href="#下载Minio" class="headerlink" title="下载Minio"></a>下载Minio</h3><p><a href="https://dl.minio.io/server/minio/release/windows-amd64/minio.exe">https://dl.minio.io/server/minio/release/windows-amd64/minio.exe</a></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动服务需要用cmd命令行启动<br><code>minio.exe server D:\MinIO</code><br>后面为minio.exe所在路径<br>启动成功后可以通过 127.0.0.1:9000 来访问,默认用户名和密码为 minioadmin/minioadmin</p>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>找到 .minio.sys/config/config.json 文件，打开搜索 access_key<br>access_key :value  用户名<br>secret_key :value  密码<br>保存重启即可</p>
<h2 id="Client安装使用"><a href="#Client安装使用" class="headerlink" title="Client安装使用"></a>Client安装使用</h2><h3 id="安装MinIO-NET"><a href="#安装MinIO-NET" class="headerlink" title="安装MinIO.NET"></a>安装MinIO.NET</h3><p>在Nuget程序包管理器控制台中运行以下命令<br><code>PM&gt; Install-Package Minio</code></p>
<p>示例: <a href="https://github.com/minio/minio-dotnet/tree/master/Minio.Examples/Cases">https://github.com/minio/minio-dotnet/tree/master/Minio.Examples/Cases</a></p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Minio;</span><br><span class="line"><span class="keyword">using</span> Minio.Exceptions;</span><br><span class="line"><span class="keyword">using</span> Minio.DataModel;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UploadFile</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> endpoint = <span class="string">&quot;127.0.0.1:9000&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> accessKey = <span class="string">&quot;minioadmin&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> secretKey = <span class="string">&quot;minioadmin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> minio = <span class="keyword">new</span> MinioClient()</span><br><span class="line">                        .WithEndpoint(endpoint)</span><br><span class="line">                        .WithCredentials(accessKey, secretKey)</span><br><span class="line">                        .Build();</span><br><span class="line">    Run(minio).Wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">static</span> Task <span class="title">Run</span>(<span class="params">MinioClient minio</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> bucketName = <span class="string">&quot;firstbucket&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> location = <span class="string">&quot;us-east-1&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> objectName = <span class="string">&quot;1.bmp&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> filePath = <span class="string">&quot;D:\\BBK\\1.bmp&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> contentType = <span class="string">&quot;application/bmp&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Make a bucket on the server, if not already present.</span></span><br><span class="line">        <span class="keyword">var</span> beArgs = <span class="keyword">new</span> BucketExistsArgs()</span><br><span class="line">            .WithBucket(bucketName);</span><br><span class="line">        <span class="built_in">bool</span> found = <span class="keyword">await</span> minio.BucketExistsAsync(beArgs).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!found)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> mbArgs = <span class="keyword">new</span> MakeBucketArgs()</span><br><span class="line">                .WithBucket(bucketName);</span><br><span class="line">            <span class="keyword">await</span> minio.MakeBucketAsync(mbArgs).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Upload a file to bucket.</span></span><br><span class="line">        <span class="keyword">var</span> putObjectArgs = <span class="keyword">new</span> PutObjectArgs()</span><br><span class="line">            .WithBucket(bucketName)</span><br><span class="line">            .WithObject(objectName)</span><br><span class="line">            .WithFileName(filePath)</span><br><span class="line">            .WithContentType(contentType);</span><br><span class="line">        <span class="keyword">await</span> minio.PutObjectAsync(putObjectArgs).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Successfully uploaded &quot;</span> + objectName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (MinioException e)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;File Upload Error: &#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//未测试</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Run</span>(<span class="params">IMinioClient minio,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> bucketName = <span class="string">&quot;my-bucket-name&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> objectName = <span class="string">&quot;my-object-name&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> fileName = <span class="string">&quot;local-filename&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        ServerSideEncryption sse = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running example for API: GetObjectAsync&quot;</span>);</span><br><span class="line">        File.Delete(fileName);</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">args</span> = <span class="keyword">new</span> GetObjectArgs()</span><br><span class="line">            .WithBucket(bucketName)</span><br><span class="line">            .WithObject(objectName)</span><br><span class="line">            .WithFile(fileName)</span><br><span class="line">            .WithServerSideEncryption(sse);</span><br><span class="line">        <span class="keyword">await</span> minio.GetObjectAsync(<span class="keyword">args</span>).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Downloaded the file <span class="subst">&#123;fileName&#125;</span> from bucket <span class="subst">&#123;bucketName&#125;</span>&quot;</span>);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;[Bucket]  Exception: <span class="subst">&#123;e&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>MiniIO</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p><center></center><br>单例模式,降低对象之间的耦合度<br><span id="more"></span></p>
<p>实现: 确保一个类只有一个实例,并提供一个访问它的全局访问点</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 单例模式的实现</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一个静态变量来保存类的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个标识确保线程同步</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> locker = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义私有构造函数，使外界不能创建该类实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当第一个线程运行到这里时，此时会对locker对象 &quot;加锁&quot;，</span></span><br><span class="line">        <span class="comment">// 当第二个线程运行该方法时，首先检测到locker对象为&quot;加锁&quot;状态，该线程就会挂起等待第一个线程解锁</span></span><br><span class="line">        <span class="comment">// lock语句运行完之后（即线程运行完之后）会对该对象&quot;解锁&quot;</span></span><br><span class="line">        <span class="comment">// 双重锁定只需要一句判断就可以了</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (locker)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果类的实例不存在则创建，否则直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>C++字符</title>
    <url>/C-%E5%AD%97%E7%AC%A6.html</url>
    <content><![CDATA[<p><center></center><br>C++中各类型字符区别<br><span id="more"></span></p>
<p>字符通常可用1个或两个字节表示;<br>ANSI编码中一个字符使用一个字节表示;<br>Unicode编码中一个字符使用两个字节表示</p>
<p>Visual C++编译器支持TCHAR、WCHAR、LPSTR、LPWSTR、LPCTSTR 的 ANSI 和 Unicode 字符。</p>
<h2 id="char"><a href="#char" class="headerlink" title="char"></a>char</h2><p>C语言标准数据类型，字符型<br>由几个字节组成通常由编译器决定，一般一个字节。</p>
<h2 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h2><p>ANSI字符<br>英文用一个字节,中文用两个字节</p>
<h2 id="WCHAR"><a href="#WCHAR" class="headerlink" title="WCHAR"></a>WCHAR</h2><p>Unicode字符<br>每个字符有两个字节组成。</p>
<h2 id="TCHAR"><a href="#TCHAR" class="headerlink" title="TCHAR"></a>TCHAR</h2><p>当前编译方式为ANSI（默认）方式，TCHAR等价于CHAR<br>如果为Unicode方式，TCHAR等价于WCHAR</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _UNICODE</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> TCHAR;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">wchar_t</span> TCHAR;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="LPSTR"><a href="#LPSTR" class="headerlink" title="LPSTR"></a>LPSTR</h2><p>LPSTR 是长指针字符串。它要么是char <em>要么是 wchar_t</em> 取决于 uopn<br>uncicod 是否定义。 其中<br>LP 代表长指针<br>STR 代表字符串<br>LPSTR 表示 CHAR 或长指针常量的常量以空结尾的字符串</p>
<h2 id="LPWSTR"><a href="#LPWSTR" class="headerlink" title="LPWSTR"></a>LPWSTR</h2><p>LPWSTR 是一个指向 32 位 Unicode 字符字符串的 16 位指针<br>它是 WCHAR 类型的以 null 结尾的字符串或长指针 wchar 类型的字符串</p>
<h2 id="LPCTSTR"><a href="#LPCTSTR" class="headerlink" title="LPCTSTR"></a>LPCTSTR</h2><p>LPCSTR 是一个 32 位指针，指向以 8 位 Windows （ANSI） 字符的常量 null 结尾字符串</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>CSharp调用C++ dll</title>
    <url>/CSharp%E8%B0%83%E7%94%A8C-dll.html</url>
    <content><![CDATA[<p>C#中动态加载C++ DLL文件<br><span id="more"></span></p>
<p>在C#中动态加载C++ DLL（动态链接库）可以通过几种方式实现。下面我将介绍最常用的方法：</p>
<h2 id="1-使用DllImport特性（静态加载）"><a href="#1-使用DllImport特性（静态加载）" class="headerlink" title="1. 使用DllImport特性（静态加载）"></a>1. 使用DllImport特性（静态加载）</h2><p>这是最常见的方式，虽然不是完全动态的，但值得了解：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 声明DLL中的函数</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;YourCppDll.dll&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">YourCppFunction</span>(<span class="params"><span class="built_in">int</span> param1, <span class="built_in">string</span> param2</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用DLL中的函数</span></span><br><span class="line">        <span class="built_in">int</span> result = YourCppFunction(<span class="number">123</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-使用LoadLibrary和GetProcAddress（真正动态加载）"><a href="#2-使用LoadLibrary和GetProcAddress（真正动态加载）" class="headerlink" title="2. 使用LoadLibrary和GetProcAddress（真正动态加载）"></a>2. 使用LoadLibrary和GetProcAddress（真正动态加载）</h2><p>如果你想在运行时决定加载哪个DLL，可以使用Windows API：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 导入Windows API函数</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">LoadLibrary</span>(<span class="params"><span class="built_in">string</span> dllToLoad</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetProcAddress</span>(<span class="params">IntPtr hModule, <span class="built_in">string</span> procedureName</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">FreeLibrary</span>(<span class="params">IntPtr hModule</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义委托类型匹配C++函数签名</span></span><br><span class="line">    [<span class="meta">UnmanagedFunctionPointer(CallingConvention.Cdecl)</span>]</span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">YourCppFunctionDelegate</span>(<span class="params"><span class="built_in">int</span> param1, <span class="built_in">string</span> param2</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IntPtr pDll = LoadLibrary(<span class="string">@&quot;YourCppDll.dll&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pDll == IntPtr.Zero)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Failed to load DLL&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        IntPtr pAddressOfFunctionToCall = GetProcAddress(pDll, <span class="string">&quot;YourCppFunction&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pAddressOfFunctionToCall == IntPtr.Zero)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Failed to find function&quot;</span>);</span><br><span class="line">            FreeLibrary(pDll);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将函数指针转换为委托</span></span><br><span class="line">        YourCppFunctionDelegate yourFunction = Marshal.GetDelegateForFunctionPointer&lt;YourCppFunctionDelegate&gt;(pAddressOfFunctionToCall);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用函数</span></span><br><span class="line">        <span class="built_in">int</span> result = yourFunction(<span class="number">123</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放DLL</span></span><br><span class="line">        FreeLibrary(pDll);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-使用COM-Interop（如果DLL是COM组件）"><a href="#3-使用COM-Interop（如果DLL是COM组件）" class="headerlink" title="3. 使用COM Interop（如果DLL是COM组件）"></a>3. 使用COM Interop（如果DLL是COM组件）</h2><p>如果C++ DLL是COM组件，可以使用COM互操作：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Type comType = Type.GetTypeFromProgID(<span class="string">&quot;YourCOMComponent.YourClass&quot;</span>);</span><br><span class="line"><span class="built_in">dynamic</span> comObject = Activator.CreateInstance(comType);</span><br><span class="line">comObject.YourMethod(<span class="number">123</span>, <span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p><strong>调用约定</strong>：确保C#端和C++端的调用约定一致（通常C++使用<code>__cdecl</code>或<code>__stdcall</code>）。</p>
</li>
<li><p><strong>数据类型映射</strong>：注意C++和C#之间的数据类型转换，特别是字符串和指针类型。</p>
</li>
<li><p><strong>32/64位兼容性</strong>：确保DLL和应用程序的平台架构一致（同为x86或x64）。</p>
</li>
<li><p><strong>DLL位置</strong>：DLL文件需要放在应用程序可找到的路径（如exe所在目录或系统PATH中）。</p>
</li>
<li><p><strong>内存管理</strong>：如果DLL分配内存，确保有相应的释放机制，避免内存泄漏。</p>
</li>
<li><p><strong>异常处理</strong>：C++异常不能直接传递到C#，需要在C++端捕获并转换为错误码。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CSharp</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>SICK RFID RFU630读写标签</title>
    <url>/SICK-RFID-RFU630%E8%AF%BB%E5%86%99%E6%A0%87%E7%AD%BE.html</url>
    <content><![CDATA[<p><code>SICK RFID RFU630</code>通电后默认启动<code>192.168.0.1 2112</code> <code>tcp</code>服务, 客户端可直接发送读写命令正常使用, 若需配置功率等则要安装<code>SOPAS_Engineering_Tool</code> 工具进行配置<br><span id="more"></span></p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p><img src="SICK-RFID-RFU630读写标签/Memory.png" alt="Memory"></p>
<h3 id="读写命令"><a href="#读写命令" class="headerlink" title="读写命令"></a>读写命令</h3><p><img src="SICK-RFID-RFU630读写标签/Read.png" alt="Read"></p>
<p><img src="SICK-RFID-RFU630读写标签/Write.png" alt="Write"></p>
<h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><p>读写<code>Bank=0b11=3</code> 用户存储区域数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;STX&gt;sMN TAreadTagData 0 3 0 9 32&lt;ETX&gt;</span><br><span class="line">0: 从0位开始</span><br><span class="line">9: 读取9word, 9*2=18byte, 9*2*2=36位字符. 即9*2个xx-&gt;18字节-&gt;36个字符</span><br><span class="line"></span><br><span class="line">&lt;STX&gt;sMN TAwriteTagData 0 3 0 1 32 +4 0000&lt;ETX&gt;</span><br><span class="line">1:1word-&gt;2个字节xx xx-&gt;-&gt;4位字符-&gt;+4</span><br><span class="line">&lt;STX&gt;sMN TAwriteTagData 0 3 0 2 32 +8 0000&lt;ETX&gt;</span><br><span class="line">2:2word-&gt;4字节xx xx xx xx-&gt;8位-&gt;+8</span><br><span class="line"></span><br><span class="line">写入01234567891234567</span><br><span class="line">&lt;STX&gt;sMN TAwriteTagData 0 3 0 9 32 +36 303132333435363738393132333435363700&lt;ETX&gt;</span><br><span class="line">0: 从0位开始写入</span><br><span class="line">9: 写入9word-&gt;18byte-&gt;36位字符</span><br></pre></td></tr></table></figure>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">RFID_SICK_RFU630</span> : <span class="title">xStringEx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> xString Connected = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> xString Enable = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> xString SendString = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> xString RecvString = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TcpClient tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> EnableLog = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> LogFile = <span class="string">&quot;RFID_SICK_RFU630&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> remoteIP = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> remotePort = <span class="number">2112</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> recvTimeout = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RFID_SICK_RFU630</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Connected = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;Connected&quot;</span>);</span><br><span class="line">        Enable = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;Enable&quot;</span>);</span><br><span class="line">        SendString = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;SendString&quot;</span>);</span><br><span class="line">        RecvString = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;RecvString&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">Init</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; PortCif = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; <span class="string">&quot;IPAddr&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;PortNo&quot;</span>, <span class="number">2112</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;RecvTimeout&quot;</span>, <span class="number">1000</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;EnableLog&quot;</span>, <span class="literal">true</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;LogFileName&quot;</span>, LogFile &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            XmlFO.Configs.Get(<span class="string">&quot;TCPClient&quot;</span>, sPara, PortCif);</span><br><span class="line"></span><br><span class="line">            remoteIP = Convert.ToString(PortCif[<span class="string">&quot;IPAddr&quot;</span>]);</span><br><span class="line">            remotePort = Convert.ToInt32(PortCif[<span class="string">&quot;PortNo&quot;</span>]);</span><br><span class="line">            recvTimeout = Convert.ToInt32(PortCif[<span class="string">&quot;RecvTimeout&quot;</span>]);</span><br><span class="line">            EnableLog = Convert.ToBoolean(PortCif[<span class="string">&quot;EnableLog&quot;</span>]);</span><br><span class="line">            LogFile = Convert.ToString(PortCif[<span class="string">&quot;LogFileName&quot;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">RFIDRecv</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!IsOnline())</span><br><span class="line">                Connect();</span><br><span class="line">            <span class="built_in">string</span> sendData = <span class="string">&quot;\u0002&quot;</span> + XmlFO.StringAnalysis(sPara) + <span class="string">&quot;\u0003&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> tcpRecvString = TCPSendRecv(sendData);</span><br><span class="line">            <span class="keyword">if</span> (tcpRecvString.Length &lt; <span class="number">40</span>)</span><br><span class="line">                <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">            tcpRecvString = tcpRecvString.Substring(<span class="number">24</span>, <span class="number">40</span>).Trim();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> length = tcpRecvString.Length;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[length / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                bytes[i / <span class="number">2</span>] = Convert.ToByte(tcpRecvString.Substring(i, <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            tcpRecvString = Encoding.ASCII.GetString(bytes).Trim(<span class="string">&#x27;\0&#x27;</span>).Trim();</span><br><span class="line">            RecvString.xValue = tcpRecvString;</span><br><span class="line">            Logout(<span class="string">&quot;Recv -&gt; VIN: &quot;</span> + tcpRecvString);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Logout(ex.ToString());</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">RFIDWriteVIN</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!IsOnline())</span><br><span class="line">                Connect();</span><br><span class="line">            <span class="built_in">string</span> vin = XmlFO.StringAnalysis(sPara.Trim());</span><br><span class="line">            Logout(<span class="string">&quot;写入VIN: &quot;</span> + vin);</span><br><span class="line">            <span class="built_in">string</span> vinHexString = <span class="built_in">string</span>.Empty;</span><br><span class="line">            Encoding.ASCII.GetBytes(vin).ToList().ForEach(b =&gt; vinHexString += b.ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> sendString = <span class="string">&quot;\u0002&quot;</span> + <span class="string">&quot;sMN TAwriteTagData 0 3 0 9 32 +36 &quot;</span> + vinHexString.PadRight(<span class="number">36</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&quot;\u0003&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> tcpRecvString = TCPSendRecv(sendString);</span><br><span class="line">            RecvString.xValue = tcpRecvString;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Logout(ex.ToString());</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">TCPSendRecv</span>(<span class="params"><span class="built_in">string</span> sendData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Logout(<span class="string">&quot;Send -&gt; &quot;</span> + sendData);</span><br><span class="line">        tcpClient.Client.Send(Encoding.ASCII.GetBytes(sendData));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] tcpRecvByts = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">int</span> recvLength = tcpClient.Client.Receive(tcpRecvByts);</span><br><span class="line">        <span class="keyword">if</span> (recvLength &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">byte</span>[] tmpRecvData = <span class="keyword">new</span> <span class="built_in">byte</span>[recvLength];</span><br><span class="line">        Array.Copy(tcpRecvByts, tmpRecvData, recvLength);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> tcpRecvString = Encoding.ASCII.GetString(tmpRecvData).Trim(<span class="string">&#x27;\0&#x27;</span>).Trim();</span><br><span class="line">        Logout(<span class="string">&quot;Recv -&gt; &quot;</span> + tcpRecvString);</span><br><span class="line">        <span class="keyword">return</span> tcpRecvString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Connect</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpClient == <span class="literal">null</span>)</span><br><span class="line">            tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line">        <span class="keyword">if</span> (tcpClient.Connected)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        tcpClient.Close();</span><br><span class="line">        tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line">        tcpClient.Connect(IPAddress.Parse(remoteIP), remotePort);</span><br><span class="line">        tcpClient.Client.ReceiveTimeout = recvTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsOnline</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpClient == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">bool</span> onLine = !((tcpClient.Client.Poll(<span class="number">100</span>, SelectMode.SelectRead) &amp;&amp; (tcpClient.Client.Available == <span class="number">0</span>)) || !tcpClient.Client.Connected);</span><br><span class="line">        <span class="keyword">if</span> (!onLine)</span><br><span class="line">            tcpClient = <span class="literal">null</span>;</span><br><span class="line">        Connected.xValue = onLine.ToString();</span><br><span class="line">        <span class="keyword">return</span> onLine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Logout</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(EnableLog)</span><br><span class="line">            OnlyOneStartUp.Log(LogFile, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
        <category>BBK</category>
      </categories>
      <tags>
        <tag>BBK</tag>
        <tag>CSharp</tag>
        <tag>RFID</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM示例一</title>
    <url>/WPF-MVVM%E7%A4%BA%E4%BE%8B%E4%B8%80.html</url>
    <content><![CDATA[<p>深入浅出<code>WPF</code>示例, 理解Binding实现<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>功能: 实现按钮计算更新<code>TextBox</code>数据</p>
<p><img src="WPF-MVVM示例一/20250726202642.png" alt="Cal"></p>
<h3 id="数据属性NotificationObject"><a href="#数据属性NotificationObject" class="headerlink" title="数据属性NotificationObject"></a>数据属性<code>NotificationObject</code></h3><p>当属性被赋值时调用<code>RaisePropertyChanged</code>触发<code>PropertyChanged</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NotificationObject</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RaisePropertyChanged</span>(<span class="params"><span class="built_in">string</span> propertyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(propertyName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命令属性DelegateCommand"><a href="#命令属性DelegateCommand" class="headerlink" title="命令属性DelegateCommand"></a>命令属性<code>DelegateCommand</code></h3><p><code>View</code>中按钮按下等触发命令后执行<code>Execute</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DelegateCommand</span> : <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler CanExecuteChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CanExecute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(CanExcuteFunc == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> CanExcuteFunc(parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ExecuteAction == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ExecuteAction(parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">object</span>&gt; ExecuteAction &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">object</span>, <span class="built_in">bool</span>&gt; CanExcuteFunc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MainWindowViewModel"><a href="#MainWindowViewModel" class="headerlink" title="MainWindowViewModel"></a><code>MainWindowViewModel</code></h3><p>示例中<code>Cal``Button</code>按下后触发执行<code>CanExecute</code>若返回<code>true</code>则执行<code>Execute</code>, 在构造中添加<code>ExecuteAction</code>执行方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainWindowViewModel</span> : <span class="title">NotificationObject</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> num1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">double</span> Num1</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span> &#123; <span class="keyword">return</span> num1; &#125;</span><br><span class="line">		<span class="keyword">set</span></span><br><span class="line">		&#123;</span><br><span class="line">			num1 = <span class="keyword">value</span>;</span><br><span class="line">			RaisePropertyChanged(<span class="keyword">nameof</span>(Num1));</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Num2</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> num2++; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            num2 = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChanged(<span class="keyword">nameof</span>(Num2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> num3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Num3</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> num3; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            num3 = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChanged(<span class="keyword">nameof</span>(Num3));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DelegateCommand AddCommand &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">object</span> param</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Num3 = Num1 + Num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AddCommand = <span class="keyword">new</span> DelegateCommand</span><br><span class="line">        &#123;</span><br><span class="line">            ExecuteAction = Add</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据层DataContext"><a href="#数据层DataContext" class="headerlink" title="数据层DataContext"></a>数据层<code>DataContext</code></h3><p><code>DataContext = new MainWindowViewModel();</code></p>
<p>指定<code>Banding</code>上下文即业务逻辑</p>
<p>如上述示例 <code>Banding</code>绑定的是<code>MainWindowViewModel</code>类里的属性名</p>
<h4 id="DataContext设置方法"><a href="#DataContext设置方法" class="headerlink" title="DataContext设置方法"></a><code>DataContext</code>设置方法</h4><h5 id="1-初始化时添加"><a href="#1-初始化时添加" class="headerlink" title="1. 初始化时添加"></a>1. 初始化时添加</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    <span class="keyword">this</span>.DataContext = <span class="keyword">new</span> MainWindowViewModel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-xaml中d-DataContext指定"><a href="#2-xaml中d-DataContext指定" class="headerlink" title="2. xaml中d:DataContext指定"></a>2. <code>xaml</code>中<code>d:DataContext</code>指定</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlns:viewmodel=&quot;clr-namespace:LearnWpf.ViewModel&quot; </span><br><span class="line">d:DataContext=&quot;&#123;d:DesignInstance Type=viewmodel:MainWindowViewModel&#125;&quot;</span><br></pre></td></tr></table></figure>
<h5 id="3-xaml中添加"><a href="#3-xaml中添加" class="headerlink" title="3. xaml中添加"></a>3. <code>xaml</code>中添加</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.DataContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">viewmodel:MainWindowViewModel</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.DataContext</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Banding-DataContext说明"><a href="#Banding-DataContext说明" class="headerlink" title="Banding DataContext说明"></a><code>Banding DataContext</code>说明</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意此时我已经在初始化代码中设置DataContext 为 ClassA，DataContext = new ClassA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Name</span>=<span class="string">&quot;MyWindow&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- DataContext 没有被指定,所以继承自父类 的 DataContext,也就是 ClassA --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- DataContext 继承自父类,也就是 ClassA, 所以这里会显示 ClassA.Name --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding Name&#125;&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- DataContext 仍然是ClassA, 但是我们通过binding设置为ClassA.ClassB--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">DataContext</span>=<span class="string">&quot;&#123;Binding ClassB&#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- DataContext 继承自父类，也就是ClassB，所以这里会显示 ClassB.Name --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding Name&#125;&quot;</span>/&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- DataContext i仍然是 ClassB, 但是我们binding 到了Window&#x27;s DataContext.Name, 也就是 ClassA.Name --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding ElementName=MyWindow, Path=DataContext.Name&#125;&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- We&#x27;ve left the StackPanel with its DataContext bound to ClassB, so this Label&#x27;s DataContext is ClassA (inherited from parent StackPanel), and we are binding to ClassA.ClassB.Name --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding ClassB.Name&#125;&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-MVVM</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-MVVM.html</url>
    <content><![CDATA[<p><code>MVVM-&gt;Model View ViewModel</code><br><span id="more"></span></p>
<h2 id="MVVM-Model-View-ViewModel"><a href="#MVVM-Model-View-ViewModel" class="headerlink" title="MVVM (Model-View-ViewModel)"></a><code>MVVM (Model-View-ViewModel)</code></h2><p><strong>概念解析：</strong></p>
<ul>
<li><p><code>MVVM</code>作为<code>MVC</code>模式的改良版，尤其受到现代前端开发青睐，常见于与<code>Vue</code>、<code>Angular</code>、<code>React</code>等框架的深度融合。</p>
</li>
<li><p><strong><code>Model</code></strong>：与<code>MVC</code>中一样，负责数据管理与业务逻辑处理。</p>
</li>
<li><strong><code>View</code></strong>：负责渲染用户界面，但不再直接与<code>Model</code>交流。</li>
<li><strong><code>ViewModel</code></strong>：作为新增角色，充当<code>View</code>与<code>Model</code>之间的枢纽，封装视图逻辑，并实现数据绑定，让<code>Model</code>与<code>View</code>的同步实现自动化。</li>
</ul>
<p><strong>运作机制详解：</strong></p>
<ul>
<li><strong>双向数据绑定</strong>：<code>ViewModel</code>与<code>Mode</code>l建立绑定关系，一旦<code>Model</code>数据发生变更，<code>ViewModel</code>会自动更新，并通过数据绑定技术将变化同步到<code>View</code>；反之，用户在<code>View</code>的操作也会通过双向绑定自动反应到<code>ViewModel</code>和<code>Model</code>中。</li>
<li><strong>观察者模式</strong>：<code>MVVM</code>通常采用观察者模式实现数据绑定，<code>ViewModel</code>监控<code>Model</code>变化并自动更新视图。</li>
</ul>
<p><strong>优缺点评估：</strong></p>
<ul>
<li><strong>优点</strong>：通过数据绑定技术大大减轻了手动维护视图状态的工作量，提升了开发效率，降低了代码耦合度。</li>
<li><strong>缺点</strong>：新手理解数据绑定机制可能存在一定的难度，另外，在大型或高性能应用中，若未经合理优化，可能会产生较多<code>DOM</code>操作，影响性能表现。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp删除文件或文件夹</title>
    <url>/CSharp%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteFiles</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] files = Directory.GetFiles(path);</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; picFiles = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> f <span class="keyword">in</span> files)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fileName = Path.GetFileName(f);</span><br><span class="line">            <span class="keyword">if</span> (fileName.ToUpper().Contains(<span class="string">&quot;LW&quot;</span>))</span><br><span class="line">                picFiles.Add(f);</span><br><span class="line">        &#125;</span><br><span class="line">        picFiles.ForEach((f) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            FileInfo fi = <span class="keyword">new</span> FileInfo(f);</span><br><span class="line">            DateTime dtWrite = fi.LastWriteTime;</span><br><span class="line">            <span class="keyword">if</span> ((DateTime.Now - dtWrite).Days &gt; deleteDays)</span><br><span class="line">                fi.Delete();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] directories = Directory.GetDirectories(path);</span><br><span class="line">directories.ToList().ForEach((dir) =&gt;</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">if</span> ((DateTime.Now - Directory.GetLastWriteTime(dir)).Days &gt; deleteDays)</span><br><span class="line">        Directory.Delete(dir, <span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp执行外部exe</title>
    <url>/CSharp%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8exe.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExecuteWithOutput</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">string</span> exeName</span>)<span class="comment">//执行外部exe文件；</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!System.IO.File.Exists(path + exeName + <span class="string">&quot;\\&quot;</span> + exeName + <span class="string">&quot;.exe&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(<span class="keyword">new</span> Exception(<span class="string">&quot;请确认&quot;</span> + exeName + <span class="string">&quot;文件路径配置是否正确&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Process ps = Process.Start(cmdExe);</span></span><br><span class="line">        <span class="comment">//ps.WaitForExit();</span></span><br><span class="line">        <span class="keyword">using</span> (System.Diagnostics.Process cmdProcess = <span class="keyword">new</span> System.Diagnostics.Process())</span><br><span class="line">        &#123;</span><br><span class="line">            System.Diagnostics.ProcessStartInfo psi = <span class="keyword">new</span> System.Diagnostics.ProcessStartInfo();</span><br><span class="line">            psi.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">            psi.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">            psi.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">            psi.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">            psi.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">            psi.FileName = path + exeName + <span class="string">&quot;\\&quot;</span> + exeName + <span class="string">&quot;.exe&quot;</span>;</span><br><span class="line">            psi.WorkingDirectory = path + exeName + <span class="string">&quot;\\&quot;</span>;</span><br><span class="line">            cmdProcess.StartInfo = psi;</span><br><span class="line">            cmdProcess.Start();</span><br><span class="line">            <span class="comment">//string output = cmdProcess.StandardOutput.ReadToEnd();</span></span><br><span class="line">            cmdProcess.WaitForExit();</span><br><span class="line">            cmdProcess.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        xErrorOutException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git复习</title>
    <url>/Git%E5%A4%8D%E4%B9%A0.html</url>
    <content><![CDATA[<p><center></center><br>日复一日,必有精进</p>
<p>官方手册<https:#git-scm.com/docs><br><span id="more"></span></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init  <span class="comment">#初始化</span></span><br><span class="line">git init gitDicName <span class="comment">#指定初始化文件夹</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https:#github.com/.git <span class="comment">#从现有仓库中拷贝项目</span></span><br><span class="line">git <span class="built_in">clone</span> https:#github.com/.git gitDicName</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#提交时会记录信息</span></span><br><span class="line">git config --global user.name <span class="string">&quot;myUserName&quot;</span> <span class="comment">#设置用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;myEmail@Email.com&quot;</span> <span class="comment">#设置邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置简写</span></span><br><span class="line">git config --global alias.logg <span class="string">&quot;log --oneline --graph&quot;</span></span><br><span class="line"></span><br><span class="line">git config -l <span class="comment">#查看配置</span></span><br></pre></td></tr></table></figure>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init <span class="comment">#初始化仓库</span></span><br><span class="line">git add . <span class="comment">#添加文件置暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;repoInit and add files&quot;</span> <span class="comment">#提交到本地仓库</span></span><br><span class="line">git commit --amend <span class="comment">#合并两次提交为一次(第一次commit漏掉某个文件后add完执行amend进行合并提交)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Commit规范</span></span><br><span class="line"><span class="comment">#&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span><br><span class="line"><span class="comment">#如 feat(miniprogram): 增加了小程序模板消息相关功能</span></span><br><span class="line"><span class="comment">#type</span></span><br><span class="line"><span class="comment">#feat - 新功能 feature</span></span><br><span class="line"><span class="comment">#fix - 修复 bug</span></span><br><span class="line"><span class="comment">#docs - 文档注释</span></span><br><span class="line"><span class="comment">#style - 代码格式(不影响代码运行的变动)</span></span><br><span class="line"><span class="comment">#refactor - 重构、优化(既不增加新功能，也不是修复bug)</span></span><br><span class="line"><span class="comment">#perf - 性能优化</span></span><br><span class="line"><span class="comment">#test - 增加测试</span></span><br><span class="line"><span class="comment">#chore - 构建过程或辅助工具的变动</span></span><br><span class="line"><span class="comment">#revert - 回退</span></span><br><span class="line"><span class="comment">#build - 打包</span></span><br><span class="line"></span><br><span class="line">git push <span class="comment">#上传到远程仓库</span></span><br><span class="line"></span><br><span class="line">git status <span class="comment">#参看仓库状态, 显示文件变更等信息</span></span><br><span class="line">git status -s <span class="comment">#参看仓库状态, for short</span></span><br><span class="line">git diff <span class="comment">#比较暂存区和工作区文件区别</span></span><br><span class="line">git diff branch1 branch2 --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看记录</span></span><br><span class="line">git <span class="built_in">log</span> --oneline <span class="comment">#查看记录,简短</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph <span class="comment">#线性记录简短</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph --all -5 <span class="comment">#查看所有分支的图形记录的前5条</span></span><br><span class="line">git blame README <span class="comment">#查看文件修改记录</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> <span class="comment">#从工作区和暂存区中删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> <span class="comment">#列出文件</span></span><br></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch branchName <span class="comment">#创建分支branchName</span></span><br><span class="line">git checkout branchName <span class="comment">#切换当亲分支到branchName分支</span></span><br><span class="line"></span><br><span class="line">git checkout -b branchName <span class="comment">#创建并切换到branchName分支</span></span><br><span class="line"></span><br><span class="line">git branch <span class="comment">#查看本地分支</span></span><br><span class="line">git branch -r <span class="comment">#查看远程分支</span></span><br><span class="line">git branch -a <span class="comment">#查看本地和远程分支</span></span><br><span class="line"></span><br><span class="line">git checkout master</span><br><span class="line">git merge branchName <span class="comment">#合并branchName分支到master分支</span></span><br><span class="line"></span><br><span class="line">git branch -d branchName <span class="comment">#删除branchName分支</span></span><br><span class="line">git branch -d -r branchName <span class="comment">#删除远程branchName分支</span></span><br><span class="line"></span><br><span class="line">git tag <span class="comment">#查看tag</span></span><br><span class="line">git tag v1.0.0 <span class="comment">#创建tag</span></span><br><span class="line">git tag -a v1.0.0 -m <span class="string">&quot;Release version 1.0.0&quot;</span> HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment">#tag标签需要主动推送</span></span><br><span class="line">git push origin &#123;标签名&#125;</span><br><span class="line">git push origin --tags <span class="comment">#推送所有tag</span></span><br><span class="line"></span><br><span class="line">git tag -d &#123;标签名&#125; <span class="comment">#删除tag</span></span><br><span class="line">git push origin :refs/tags/&#123;标签名&#125; <span class="comment">#删除远程tag</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitee.com:silencejql/git-practice-repo.git <span class="comment">#添加远程仓库并起名为origin</span></span><br><span class="line">git push 远程主机名 远程分支名:本地分支名 <span class="comment">#如果本地分支名与远程分支名相同，则可以省略冒号</span></span><br><span class="line">git push --force origin master <span class="comment">#如果本地版本与远程版本有差异，但又要强制推送可以使用 --force 参数</span></span><br><span class="line">git push -u origin master <span class="comment">#提交到远程仓库origin的master分支</span></span><br><span class="line"></span><br><span class="line">git remote <span class="comment">#查看远程仓库</span></span><br><span class="line">git remote -v <span class="comment">#查看远程仓库细节</span></span><br><span class="line"></span><br><span class="line">git fatch <span class="comment">#从远程仓库下载到本地(并不合并至本地仓库)</span></span><br><span class="line">git merge <span class="comment">#从远程仓库提取并合并到当前分支</span></span><br><span class="line"></span><br><span class="line">git pull = git fetch + git merge</span><br><span class="line">git pull 远程主机名 远程分支名:本地分支名 <span class="comment">#如果本地分支名与远程分支名相同，则可以省略冒号</span></span><br><span class="line"></span><br><span class="line">git fetch origin </span><br><span class="line">git fetch origin master  <span class="comment">#从远程的origin仓库的master分支下载代码到本地的origin/master Repository中(不可修改)</span></span><br><span class="line">git chechout -b tmp origion/master <span class="comment">#新建分支指向拉取的master分支</span></span><br><span class="line">git merge origin/master <span class="comment">#把远程下载下来的代码合并到本地仓库，远程的和本地的合并</span></span><br><span class="line"></span><br><span class="line">git merge -Xignore-space-change whitespace <span class="comment">#忽略空白符</span></span><br><span class="line">git merge --abort <span class="comment">#退出合并模式(进入git merge后必须解决冲突后才可执行其他操作)</span></span><br><span class="line"></span><br><span class="line">git fetch origin master:temp  <span class="comment">#从远程的origin仓库的master分支下载到本地并新建一个分支temp</span></span><br><span class="line">git diff temp                 <span class="comment">#比较master分支和temp分支的不同</span></span><br><span class="line"> </span><br><span class="line">git branch -d temp            <span class="comment">#删除temp</span></span><br></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#git stash 若不保存就不可以执行切换分支等操作 </span></span><br><span class="line"><span class="comment">#stash执行后下次切换到当前分支后不包含所保存的修改</span></span><br><span class="line"><span class="comment">#stash pop后才会恢复修改后的内容</span></span><br><span class="line">git stash <span class="comment">#对没有提交到版本库的，位于工作区或暂存区中游离的修改进行保存，在需要时可进行恢复</span></span><br><span class="line">git stash list <span class="comment">#查看该分支上被stash保存的修改</span></span><br><span class="line"></span><br><span class="line">git stash pop <span class="comment">#恢复并删除stash中存储的最新修改</span></span><br><span class="line">git stash apply <span class="comment">#恢复但不删除stash中存储的最新修改</span></span><br><span class="line">git stash apply stash@&#123;0&#125; <span class="comment">#恢复但不删除stash中存储的特定提交</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看版本日志(版本号)</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD^：将最近一次提交节点的提交记录回退到暂存区</span><br><span class="line">git reset --mixed HEAD^：将最近一次提交节点的提交记录回退到工作区</span><br><span class="line">git reset --hard HEAD^：将最近一次提交节点的提交记录全部清除</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD <span class="comment">#当前版本</span></span><br><span class="line">git reset --hard HEAD^ <span class="comment">#上一个版本</span></span><br><span class="line">git reset --hard HEAD^^ <span class="comment">#上上个版本--以此类推^^^</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~1 <span class="comment">#上一个版本git </span></span><br><span class="line">git reset --hard HEAD~n <span class="comment">#上n个版本</span></span><br><span class="line"></span><br><span class="line">git reset --hard 8b416 <span class="comment">#退回git log中指定的版本号(前几位即可)</span></span><br><span class="line"></span><br><span class="line">git revert 8b416 <span class="comment">#版本回滚创建新的提交来舍弃不要的提交--会保留所有记录--用法同reset</span></span><br><span class="line"></span><br><span class="line">git rebase -i HEAD~n <span class="comment">#rebase可精简commit</span></span><br><span class="line"></span><br><span class="line">git rebase -i starthash endhash <span class="comment">#合并后生成一个临时分支</span></span><br><span class="line">git checkout -b tmp <span class="comment">#生成分支后续rebase或者直接用临时分支hashcode</span></span><br><span class="line">git checkout master</span><br><span class="line">git rebase tmp <span class="comment">#重新rebase</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git push -f <span class="comment">#合并后强制推送到Remote</span></span><br></pre></td></tr></table></figure>
<h2 id="清空Commit"><a href="#清空Commit" class="headerlink" title="清空Commit"></a>清空Commit</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout --orphan  new_branch #基于当前分支创建一个独立的分支new_branch</span><br><span class="line">git add -A</span><br><span class="line">git commit -am &quot;commit message&quot;</span><br><span class="line">git branch -D master #删除master分支</span><br><span class="line">git branch -m master #重新命名当前独立分支为 master</span><br><span class="line"></span><br><span class="line">git push -f origin master #推送到远端分支,强制覆盖</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Docker 搭建Gitlab</title>
    <url>/Ubuntu-Docker-%E6%90%AD%E5%BB%BAGitlab.html</url>
    <content><![CDATA[<p><center></center><br>Ubuntu下基于Docker搭建Gitlab<br><span id="more"></span></p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>安装如下或自行搜索</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//来添加新的 HTTPS 软件源</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br><span class="line"></span><br><span class="line">//导入源仓库的 GPG key</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"></span><br><span class="line">//安装 Docker 最新版本</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">//安装完成，Docker 服务将会自动启动, 如下为手动启动</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">//你可以输入下面的命令，验证</span><br><span class="line">sudo systemctl status docker</span><br><span class="line">输出如下:</span><br><span class="line">docker.service - Docker Application Container Engine</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2020-05-21 14:47:34 UTC; 42s **ago**</span><br><span class="line">//</span><br></pre></td></tr></table></figure>
<h2 id="部署Gitlab"><a href="#部署Gitlab" class="headerlink" title="部署Gitlab"></a>部署Gitlab</h2><h3 id="创建容器外挂目录"><a href="#创建容器外挂目录" class="headerlink" title="创建容器外挂目录"></a>创建容器外挂目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /gitlab/data</span><br><span class="line">sudo mkdir -p /gitlab/logs</span><br><span class="line">sudo mkdir -p /gitlab/config</span><br></pre></td></tr></table></figure>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --publish 8443:433 --publish 8000:80 --publish 2222:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /gitlab/logs:/var/log/gitlab \</span><br><span class="line">    --volume /gitlab/data:/var/opt/gitlab \</span><br><span class="line">    -log-driver=none \</span><br><span class="line">    beginor/gitlab-ce</span><br></pre></td></tr></table></figure>
<p>说明:<br>–detach 设置容器后台运行<br>–publish 暴露 https、http和ssh端口,关于端口下文会细说<br>–name 容器名称<br>–restart always 每次启动容器就重启GitLab<br>–volume 设置GitLab数据挂载点</p>
<h3 id="查询Docker状态"><a href="#查询Docker状态" class="headerlink" title="查询Docker状态"></a>查询Docker状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//status=starting表示正在启动, 启动成功转为health</span><br><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure>
<h2 id="配置Gitlab"><a href="#配置Gitlab" class="headerlink" title="配置Gitlab"></a>配置Gitlab</h2><p>配置文件位于/gitlab/config/gitlab.rb中</p>
<p>修改external_url, 外部访问地址<br>修改gitlab_shell_ssh_port —不修改每次访问都需要输入密码<br>修改nginx监听端口</p>
<h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker start</span><br><span class="line">sudo docker restart</span><br><span class="line">sudo docker stop</span><br></pre></td></tr></table></figure>
<h2 id="登录gitlab"><a href="#登录gitlab" class="headerlink" title="登录gitlab"></a>登录gitlab</h2><p>gitlab启动后浏览器输入IP:8000后进入登录界面</p>
<p>用户名:root<br>获取默认密码:<br><code>sudo docker exec -it gitlab grep &#39;Password:&#39; /etc/&#39;gitlab/initial_root_password</code></p>
<p>登录后点击右上角Edit profile更改密码</p>
<h2 id="使用Gitlab"><a href="#使用Gitlab" class="headerlink" title="使用Gitlab"></a>使用Gitlab</h2><ol>
<li>添加组Group和用户</li>
<li>新建项目Project</li>
<li>使用</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin http://IP:8000/groupName/projectName.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -uf origin main</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>DoIP协议解读</title>
    <url>/DoIP%E5%8D%8F%E8%AE%AE%E8%A7%A3%E8%AF%BB.html</url>
    <content><![CDATA[<p><center></center><br>ISO13400<br><span id="more"></span></p>
<h2 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">ProtocolVersion</th>
<th style="text-align:center">InverseProtocolVersion</th>
<th style="text-align:left">PayloadType</th>
<th style="text-align:center">PayloadLength</th>
<th style="text-align:center">DoIPPayload</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">协议版本信息</td>
<td style="text-align:center">协议版本信息按位取反</td>
<td style="text-align:left">有效数据类型</td>
<td style="text-align:center">有效数据长度</td>
<td style="text-align:center">SA TA UserData</td>
</tr>
<tr>
<td style="text-align:center">1Byte</td>
<td style="text-align:center">1Byte</td>
<td style="text-align:left">2Byte</td>
<td style="text-align:center">4Byte</td>
<td style="text-align:center">源地址(2Byte)目标地址(2Byte)UDS数据</td>
</tr>
<tr>
<td style="text-align:center">0x01:DoIp13400-2010</td>
<td style="text-align:center">^ProtocolVersion</td>
<td style="text-align:left"><strong>0x8001:DiagnosticMessage</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>0x02:DoIp13400-2012</strong></td>
<td style="text-align:center">^ProtocolVersion</td>
<td style="text-align:left"><strong>0x8002:DiagnosticMessagePositiveAcknowledgement</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">0x03~0xFE:DoIp13400-xxxx</td>
<td style="text-align:center">^ProtocolVersion</td>
<td style="text-align:left"><strong>0x8003:DiagnosticMessageNegativeAcknowledgement</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">0xFF</td>
<td style="text-align:center">^ProtocolVersion</td>
<td style="text-align:left">0x0005:RoutingActivationRequest</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left">0x0006:RoutingActivationRespose</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left">0x0007:AliveCheckRequest</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left">0x0008:AliveCheckReponse</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">02</td>
<td style="text-align:center">FD</td>
<td style="text-align:left">8001</td>
<td style="text-align:center">00000006</td>
<td style="text-align:center">0E800304 1003</td>
</tr>
</tbody>
</table>
</div>
<p>关于数据类型参考:<code>https://blog.csdn.net/weixin_42967006/article/details/121638078</code></p>
<h2 id="源地址"><a href="#源地址" class="headerlink" title="源地址"></a>源地址</h2><p>0x0E00-0x0E7F用于OBD诊断, 0x0E80-0x0EFF用于增强型诊断<br>物理逻辑地址, 在0x0001-0x0DFF或0x1000-0x7FFF范围内<br>功能寻址, 是0xE000</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">02</span> FD PayloadType Length SourceAddress TargetAddress Message</span><br><span class="line"><span class="number">1.</span> <span class="number">02</span> FD <span class="number">0005</span> <span class="number">0000000B</span> <span class="number">0E80</span> <span class="number">000000000000000000</span> <span class="comment">//请求路由激活</span></span><br><span class="line"><span class="number">2.</span> <span class="number">02</span> FD <span class="number">0006</span> <span class="number">000000</span>XX XXXX XXXX XXXX YY XX... <span class="comment">//收到回复YY=0x10表示成功</span></span><br><span class="line"><span class="number">3.</span> <span class="number">02</span> FD <span class="number">8001</span> <span class="number">00000006</span> <span class="number">0E800304</span> <span class="number">1003</span> <span class="comment">//进入诊断模式</span></span><br><span class="line"><span class="number">4.</span> <span class="number">02</span> FD <span class="number">8002</span> <span class="number">00000005</span> <span class="number">03040E80</span> <span class="number">00</span> <span class="comment">//诊断报文正反馈</span></span><br><span class="line"><span class="number">5.</span> <span class="number">02</span> FD <span class="number">8001</span> <span class="number">0000000</span>A <span class="number">03040E80</span> <span class="number">5003003200</span>C8 <span class="comment">//收到诊断报文</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><img src="DoIP协议解读/PayloadType.jpg" alt="截图"></p>
]]></content>
      <tags>
        <tag>DoIP</tag>
      </tags>
  </entry>
  <entry>
    <title>Winform动态更改Combox等宽度</title>
    <url>/Winform%E5%8A%A8%E6%80%81%E6%9B%B4%E6%94%B9Combox%E7%AD%89%E5%AE%BD%E5%BA%A6.html</url>
    <content><![CDATA[<p><center></center><br>前面啥也没有<br><span id="more"></span></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>加载界面时根据内容更改宽度</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">DropDownWidth</span>(<span class="params">ComboBox myCombo</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> maxWidth = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> obj <span class="keyword">in</span> myCombo.Items)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = TextRenderer.MeasureText(obj.ToString(), myCombo.Font).Width;</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; maxWidth)</span><br><span class="line">        &#123;</span><br><span class="line">            maxWidth = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Linq</span></span><br><span class="line"></span><br><span class="line">comboBox1.DropDownWidth = </span><br><span class="line">    comboBox1.Items.Cast&lt;<span class="built_in">string</span>&gt;().Max(x =&gt; TextRenderer.MeasureText(x, comboBox1.Font).Width);</span><br></pre></td></tr></table></figure>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="Linq-Cast"><a href="#Linq-Cast" class="headerlink" title="Linq Cast"></a>Linq Cast</h3><h4 id="Cast操作符"><a href="#Cast操作符" class="headerlink" title="Cast操作符"></a>Cast操作符</h4><p>Cast操作符用于将一个类型为IEnumerable的集合对象转换为IEnumerable&lt;\T&gt;类型的集合对象。也就是非泛型集合转成泛型集合，因为在Linq to OBJECT中，绝大部分操作符都是针对IEnumerable&lt;\T&gt;类型进行的扩展方法。因此对非泛型集合并不适用。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">al.Add(<span class="number">1</span>);</span><br><span class="line">al.Add(<span class="number">2</span>);</span><br><span class="line">al.Add(<span class="number">3</span>);</span><br><span class="line">IEnumerable&lt;<span class="built_in">int</span>&gt; IEInt = al.Cast&lt;<span class="built_in">int</span>&gt;();    <span class="comment">//非泛型转泛型</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> IEInt)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="OfType操作符"><a href="#OfType操作符" class="headerlink" title="OfType操作符"></a>OfType操作符</h4><p>OfType操作符与Cast操作符类似，用于将类型为IEnumerable的集合对象转换为IEnumerable&lt;\T&gt;类型的集合对象。不同的是，Cast操作符会视图将输入序列中的所有元素转换成类型为T的对象,如果有转换失败的元素存在Cast操作符将抛出一个异常；而OfType操作符仅会将能够成功转换的元素进行转换，并将这些结果添加到结果序列中去。与Cast操作符相比，OfType操作符更加安全。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">al.Add(<span class="number">1</span>);</span><br><span class="line">al.Add(<span class="number">2</span>);</span><br><span class="line">al.Add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">//IEnumerable&lt;int&gt; IECast = al.Cast&lt;int&gt;();    //抛出异常</span></span><br><span class="line"><span class="comment">//foreach (var i in IECast)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    Console.WriteLine(i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">IEnumerable&lt;<span class="built_in">int</span>&gt; IEOfType = al.OfType&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> IEOfType)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);   <span class="comment">//输出 1 2 其中转换不了的a则不转换            </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend <span class="comment">#合并并修改上次提交</span></span><br><span class="line"></span><br><span class="line">git tag v1.0.0</span><br><span class="line">git tag -a v1.0.0 -m <span class="string">&quot;Release version 1.0.0&quot;</span> HEAD</span><br><span class="line"></span><br><span class="line">git push origin &#123;标签名&#125;</span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line">git branch -D master <span class="comment">#删除master分支</span></span><br><span class="line">git branch -m master <span class="comment">#重新命名当前独立分支为 master</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph --all -5 <span class="comment">#查看所有分支的图形记录的前5条</span></span><br><span class="line"></span><br><span class="line">git merge branchName <span class="comment">#合并branchName分支到当前分支</span></span><br><span class="line">git merge branchName -Xignore-space-change whitespace <span class="comment">#合并branchName分支到当前分支并忽略空白符</span></span><br><span class="line"></span><br><span class="line">git fetch origin master:temp  <span class="comment">#从远程的origin仓库的master分支下载到本地并新建一个分支temp</span></span><br><span class="line">git diff temp                 <span class="comment">#比较master分支和temp分支的不同</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD~3 <span class="comment">#文件不会被修改，后三次提交被 git add 添加到暂存区，相当于只撤销了 git commit</span></span><br><span class="line">git reset --mixed HEAD~3 <span class="comment">#文件不会被修改，但后三次提交没有添加到暂存区, 回退到工作区</span></span><br><span class="line">git reset --hard HEAD~3 <span class="comment">#文件会被回退到 HEAD~3 时的状态</span></span><br><span class="line"></span><br><span class="line">git revert <span class="comment">#撤销一个提交的同时会创建一个新的提交</span></span><br><span class="line">git revert HEAD~2 <span class="comment">#会创建一个新的提交来撤销前两个提交的更改，然后把新的提交加入提交历史</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git revert 可以用在公共分支上，git reset 应该用在私有分支上。</span></span><br><span class="line"><span class="comment">#也可以把 git revert 用作撤销已经 push 的更改</span></span><br><span class="line"><span class="comment">#而 git reset 用来撤销已经 commit 但没有 push 的更改#</span></span><br><span class="line"><span class="comment">#或者 git reset HEAD 撤销没有 commit 的更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将最近一次提交节点的提交记录回退到工作区</span></span><br><span class="line"><span class="comment">#用于修改上次提交</span></span><br><span class="line">git reset --mixed HEAD~1 <span class="comment">#回退到工作区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看可引用的历史版本记录</span></span><br><span class="line"><span class="comment">#用于恢复reset, 直接执行git reset commitId恢复到工作区</span></span><br><span class="line">git reflog </span><br><span class="line"></span><br><span class="line"><span class="comment">#将最近一次提交节点的提交记录全部清除</span></span><br><span class="line"><span class="comment">#用于删除上次提交</span></span><br><span class="line">git reset --hard HEAD^ <span class="comment">#删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rebase可精简commit</span></span><br><span class="line">git rebase -i HEAD~n </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode CMake</title>
    <url>/VSCode-CMake.html</url>
    <content><![CDATA[<p><center>写在前面</center><br>前面啥也没有<br><span id="more"></span></p>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1>]]></content>
  </entry>
  <entry>
    <title>Git设置git diff用Codecompare</title>
    <url>/Git%E8%AE%BE%E7%BD%AEgit-diff%E7%94%A8Codecompare.html</url>
    <content><![CDATA[<h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>打开.gitconfig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[difftool <span class="string">&quot;codecompare&quot;</span>]</span><br><span class="line">cmd = \&quot;C:\\Program Files\\Devart\\Code Compare\\CodeCompare.exe\&quot; -W \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot;</span><br><span class="line">renames = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[diff]</span><br><span class="line">tool = codecompare</span><br><span class="line">guitool = codecompare</span><br><span class="line">[mergetool <span class="string">&quot;codecompare&quot;</span>]</span><br><span class="line">cmd = \&quot;C:\\Program Files\\Devart\\Code Compare\\CodeMerge.exe\&quot; -MF \&quot;<span class="variable">$LOCAL</span>\&quot; -TF \&quot;<span class="variable">$REMOTE</span>\&quot; -BF \&quot;<span class="variable">$BASE</span>\&quot; -RF \&quot;<span class="variable">$MERGED</span>\&quot;</span><br><span class="line">trustExitCode = <span class="literal">true</span></span><br><span class="line">[mergetool]</span><br><span class="line">keepBackup = <span class="literal">false</span></span><br><span class="line">[merge]</span><br><span class="line">tool = codecompare</span><br><span class="line">guitool = codecompare</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-外观模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口<br>降低访问复杂系统的内部子系统时的复杂度，简化客户端之间的接口。<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">SubSystemOne</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodOne</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;子系统一&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">SubSystemTwo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodTwo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;子系统二&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">SubSystemThree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodThree</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;子系统三&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外观类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Facade</span></span><br><span class="line">&#123;</span><br><span class="line">    SubSystemOne one;</span><br><span class="line">    SubSystemOne two;</span><br><span class="line">    SubSystemOne three;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        one = <span class="keyword">new</span> SubSystemOne();</span><br><span class="line">        two = <span class="keyword">new</span> SubSystemTwo();</span><br><span class="line">        three = <span class="keyword">new</span> SubSystemThree();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        one.MethodOne();</span><br><span class="line">        two.MethodTwo();</span><br><span class="line">        three.MethodThree();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        one.MethodOne();</span><br><span class="line">        three.MethodThree();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">facade.MethodA();</span><br><span class="line">facade.MethodB();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-代理模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>创建具有现有对象的对象，以便向外界提供功能接口。用于解决直接访问对象时带来的问题<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IImage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Display</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RealImage</span> : <span class="title">IImage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> fileName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        LoadFromDisk(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//display</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadFromDisk</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Load Image From Disk</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProxyImage</span> : <span class="title">IImage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> fileName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(realImage == <span class="literal">null</span>)</span><br><span class="line">            realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">        realImage.Diaplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IImage image = <span class="keyword">new</span> ProxyImage(<span class="string">&quot;test.jpg&quot;</span>);</span><br><span class="line"><span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">image.display(); </span><br><span class="line"><span class="comment">// 图像不需要从磁盘加载</span></span><br><span class="line">image.display();  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-原型模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>原型模式是用于创建重复的对象，同时又能保证性能, 当直接创建对象的代价比较大时例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Resume</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> timeArea;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> compart;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPersonalInfo</span>(<span class="params"><span class="built_in">string</span> sex, <span class="built_in">string</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWorkExperience</span>(<span class="params"><span class="built_in">string</span> timeArea, <span class="built_in">string</span> company</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeArea = timeArea;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;</span>, name, sex, age);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;工作经历: &#123;0&#125; &#123;1&#125;&quot;</span>, timeArea, company);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client---需要多次创建对象</span></span><br><span class="line">Resume a = <span class="keyword">new</span> Resume(<span class="string">&quot;小a&quot;</span>);</span><br><span class="line">a.SetPersonalInfo(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">a.SetWorkExperience(<span class="string">&quot;2021-2022&quot;</span>, <span class="string">&quot;a公司&quot;</span>);</span><br><span class="line">Resume b = <span class="keyword">new</span> Resume(<span class="string">&quot;小a&quot;</span>);</span><br><span class="line">b.SetPersonalInfo(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">b.SetWorkExperience(<span class="string">&quot;2022-2023&quot;</span>, <span class="string">&quot;b公司&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.Display();</span><br><span class="line">b.Display();</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Resume</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> timeArea;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> compart;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPersonalInfo</span>(<span class="params"><span class="built_in">string</span> sex, <span class="built_in">string</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWorkExperience</span>(<span class="params"><span class="built_in">string</span> timeArea, <span class="built_in">string</span> company</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeArea = timeArea;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;</span>, name, sex, age);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;工作经历: &#123;0&#125; &#123;1&#125;&quot;</span>, timeArea, company);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//浅拷贝--值类型:逐位复制, 引用类型只复制引用(指向同一对象)</span></span><br><span class="line">        <span class="keyword">return</span> (Object)<span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Resume a = <span class="keyword">new</span> Resume(<span class="string">&quot;小a&quot;</span>);</span><br><span class="line">a.SetPersonalInfo(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">a.SetWorkExperience(<span class="string">&quot;2021-2022&quot;</span>, <span class="string">&quot;a公司&quot;</span>);</span><br><span class="line">Resume b = (Resume)a.Clone();</span><br><span class="line">b.SetWorkExperience(<span class="string">&quot;2022-2023&quot;</span>, <span class="string">&quot;b公司&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.Display();</span><br><span class="line">b.Display();</span><br></pre></td></tr></table></figure>
<p>浅拷贝存在的问题: 对于引用类型只是拷贝其引用, 创建多个对象后引用类型都指向同一对象</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">WorkExperence</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> workDate;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> WorkDate</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> workDate;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;workDate = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> company;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Resume</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> age;</span><br><span class="line">    <span class="keyword">private</span> WorkExperence work;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        work = <span class="keyword">new</span> WorkExperence();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPersonalInfo</span>(<span class="params"><span class="built_in">string</span> sex, <span class="built_in">string</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWorkExperience</span>(<span class="params"><span class="built_in">string</span> timeArea, <span class="built_in">string</span> company</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        work.WorkDate = timeArea;</span><br><span class="line">        work.Company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;</span>, name, sex, age);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;工作经历: &#123;0&#125; &#123;1&#125;&quot;</span>, timeArea, company);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//浅拷贝--值类型:逐位复制, 引用类型只复制引用(指向同一对象)</span></span><br><span class="line">        <span class="keyword">return</span> (Object)<span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Resume a = <span class="keyword">new</span> Resume(<span class="string">&quot;小a&quot;</span>);</span><br><span class="line">a.SetPersonalInfo(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">a.SetWorkExperience(<span class="string">&quot;2021-2022&quot;</span>, <span class="string">&quot;a公司&quot;</span>);</span><br><span class="line">Resume b = (Resume)a.Clone();</span><br><span class="line">b.SetWorkExperience(<span class="string">&quot;2022-2023&quot;</span>, <span class="string">&quot;b公司&quot;</span>);<span class="comment">//---引用类型重新赋值会覆盖原有值</span></span><br><span class="line"></span><br><span class="line">a.Display();</span><br><span class="line">b.Display();</span><br></pre></td></tr></table></figure>
<p>深拷贝需要考虑要深入到多少层</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">WorkExperence</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> workDate;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> WorkDate</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> workDate;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;workDate = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> company;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//浅拷贝--值类型:逐位复制, 引用类型只复制引用(指向同一对象)</span></span><br><span class="line">        <span class="keyword">return</span> (Object)<span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Resume</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> age;</span><br><span class="line">    <span class="keyword">private</span> WorkExperence work;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        work = <span class="keyword">new</span> WorkExperence();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span>(<span class="params">WorkExperence work</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.work = (WorkExperence)work.Clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPersonalInfo</span>(<span class="params"><span class="built_in">string</span> sex, <span class="built_in">string</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWorkExperience</span>(<span class="params"><span class="built_in">string</span> timeArea, <span class="built_in">string</span> company</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        work.WorkDate = timeArea;</span><br><span class="line">        work.Company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;</span>, name, sex, age);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;工作经历: &#123;0&#125; &#123;1&#125;&quot;</span>, timeArea, company);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        Resume obj = <span class="keyword">new</span> Resume(<span class="keyword">this</span>.work);</span><br><span class="line">        obj.name = <span class="keyword">this</span>.name;</span><br><span class="line">        obj.sex = <span class="keyword">this</span>.sex;</span><br><span class="line">        obj.age = <span class="keyword">this</span>.age;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Resume a = <span class="keyword">new</span> Resume(<span class="string">&quot;小a&quot;</span>);</span><br><span class="line">a.SetPersonalInfo(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">a.SetWorkExperience(<span class="string">&quot;2021-2022&quot;</span>, <span class="string">&quot;a公司&quot;</span>);</span><br><span class="line">Resume b = (Resume)a.Clone();</span><br><span class="line">b.SetWorkExperience(<span class="string">&quot;2022-2023&quot;</span>, <span class="string">&quot;b公司&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.Display();</span><br><span class="line">b.Display();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-工厂方法</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<p>一个工厂类只创建一个产品</p>
<p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br>将所要创建的具体对象放在子类, 实现扩展(非更改)<br><span id="more"></span></p>
<h2 id="简单工厂实现"><a href="#简单工厂实现" class="headerlink" title="简单工厂实现"></a>简单工厂实现</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DatabaseLogger</span> : <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">FileLogger</span> : <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">LoggerFactory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">CreateLogger</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">args</span>.EqualsIgnoreCase(<span class="string">&quot;db&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//连接数据库</span></span><br><span class="line">            <span class="comment">//创建对象</span></span><br><span class="line">            ILogger logger = <span class="keyword">new</span> DatabaseLogger();</span><br><span class="line">            <span class="comment">//初始化数据库</span></span><br><span class="line">            <span class="keyword">return</span> logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">args</span>.EqualsIgnoreCase(<span class="string">&quot;file&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//创建日志文件</span></span><br><span class="line">            <span class="comment">//创建对象</span></span><br><span class="line">            ILogger logger = <span class="keyword">new</span> FileLogger();</span><br><span class="line">            <span class="comment">//初始化日志文件</span></span><br><span class="line">            <span class="keyword">return</span> logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>新增产品必须修改工厂类, 违反开闭原则;<br>所有产品都由同一工厂创建,职责重,逻辑复杂,耦合度高</p>
<p>工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行</p>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>定义一个用于创建对象的接口, 让子类决定实例化哪个类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">DatabaseLogger</span> : <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//数据库记录日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">FileLogger</span> : <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//文件记录日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">ILoggerFactory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILogger <span class="title">CreateLogger</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">DatabaseLoggerFactory</span> : <span class="title">ILoggerFactory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILogger <span class="title">CreateLogger</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//连接数据库</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Logger logger = <span class="keyword">new</span> DatabaseLogger();</span><br><span class="line">        <span class="comment">//初始化数据库</span></span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">FileLoggerFactory</span> : <span class="title">ILoggerFactory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILogger <span class="title">CreateLogger</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//连接数据库</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Logger logger = <span class="keyword">new</span> FileLogger();</span><br><span class="line">        <span class="comment">//初始化数据库</span></span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span>&#123;</span><br><span class="line">    ILoggerFactory factory;</span><br><span class="line">    ILogger logger;</span><br><span class="line">    factory = <span class="keyword">new</span> FileLoggerFactory();</span><br><span class="line">    logger = factory.CreateLogger();</span><br><span class="line">    logger.WriteLog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DatabaseLogger</span> : <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">FileLogger</span> : <span class="title">ILogger</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Logger</span>(<span class="title">ILogger</span> <span class="title">logger</span>)&#123;</span><br><span class="line">    <span class="keyword">private</span> logger;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span>(<span class="params">ILogger logger</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger = logger;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLog</span>()</span>&#123;</span><br><span class="line">        logger.WriteLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> logger = Logger(<span class="keyword">new</span> DatabaseLogger());</span><br><span class="line">    logger.WriteLog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-建造者模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>使用多个简单的对象一步一步构建成一个复杂的对象<br>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    IList&lt;<span class="built_in">string</span>&gt; parts = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">string</span> part</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        parts.Add(part);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;产品创建--&quot;</span>);</span><br><span class="line">        parts.Foreach(p =&gt; Console.WriteLine(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建造者--抽象</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildPartA</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildPartB</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">GetResult</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建造者--具体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateBuilder1</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPartA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        product.Add(<span class="string">&quot;Part A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPartB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        product.Add(<span class="string">&quot;Part B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">GetResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateBuilder2</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPartA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        product.Add(<span class="string">&quot;Part X&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPartB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        product.Add(<span class="string">&quot;Part Y&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">GetResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指挥者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Director</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Construct</span>(<span class="params">Builder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        builder.BuildPartA();</span><br><span class="line">        builder.BuildPartB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Director director = <span class="keyword">new</span> Director();</span><br><span class="line">Builder b1 = <span class="keyword">new</span> ConcreateBuilder1();</span><br><span class="line">Builder b2 = <span class="keyword">new</span> ConcreateBuilder2();</span><br><span class="line"></span><br><span class="line">director.Construct(b1);</span><br><span class="line">Product p1 = b1.GetResult();</span><br><span class="line">p1.Show();</span><br><span class="line"></span><br><span class="line">director.Construct(b2);</span><br><span class="line">Product p2 = b2.GetResult();</span><br><span class="line">p2.Show();</span><br></pre></td></tr></table></figure>
<p>建造者与外观模式对比</p>
<p>建造者的目的是希望用<strong>同样的生产过程</strong>，根据不同的生产者得到不同的产品。需要重写<br>外观模式则是将多个对象组合起来，它不需要生产者，也不需要得到不同的结果。不需要重写</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-模板方法模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行<br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中<br>把不变的部分移至父类, 去除子类重复代码<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Game</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span>()</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span>()</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span>()</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//模板</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span>()</span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//初始化游戏</span></span><br><span class="line">      initialize();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//开始游戏</span></span><br><span class="line">      startPlay();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//结束游戏</span></span><br><span class="line">      endPlay();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cricket</span> : <span class="title">Game</span> </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">endPlay</span>()</span> &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Cricket Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">initialize</span>()</span> &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Cricket Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">startPlay</span>()</span> &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Cricket Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Football</span> : <span class="title">Game</span> </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">endPlay</span>()</span> &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Football Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">initialize</span>()</span> &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Football Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">startPlay</span>()</span> &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Football Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">Game game = <span class="keyword">new</span> Cricket();</span><br><span class="line">game.play();</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">game = <span class="keyword">new</span> Football();</span><br><span class="line">game.play(); </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-策略模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。<br>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p>
<p>策略模式相对简单工厂耦合度更低, 只需要开放一个类给客户端</p>
<p>无论是简单工厂还是策略模式都没有消除switch, 若想消除可用反射, 参考抽象工厂模式<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">DoOprea</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OperaAdd</span> : <span class="title">IStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">DoOpera</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OperaSub</span> : <span class="title">IStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">DoOpera</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OperaMult</span> : <span class="title">IStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">DoOpera</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************策略模式*************************/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IStrategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">IStrategy strategy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">ExecuteStrategy</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.DoOpera(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperaAdd())</span><br><span class="line">context.ExecuteStrategy(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperaMult())</span><br><span class="line">context.ExecuteStrategy(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************简单工厂*************************/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">OperaFactory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IStrategy <span class="title">GetOpera</span>(<span class="params"><span class="built_in">string</span> type</span>)</span>&#123;</span><br><span class="line">        IStrategy opera = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;+&quot;</span>))&#123;</span><br><span class="line">            opera = <span class="keyword">new</span> OperaAdd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;-&quot;</span>))&#123;</span><br><span class="line">            opera = <span class="keyword">new</span> OperaSub();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">            opera = <span class="keyword">new</span> OperaMult();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> opera;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IStrategy opera = ChartFactory.GetOpera(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">opera.DoOprea(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-抽象工厂</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.html</url>
    <content><![CDATA[<p>抽象工厂, 将工厂抽象出来</p>
<p>工厂方法模式和抽象工厂模式都是创建型设计模式，它们的主要区别在于所创建的对象范围不同。</p>
<p>工厂方法模式（Factory Method）通过让子类实现工厂接口，来决定具体应该创建哪一个产品类的实例对象。它允许我们在不改变现有代码基础上添加新的产品类型，并且可以将具体产品的实现与调用方分离开来。</p>
<p>抽象工厂模式（Abstract Factory）与工厂方法模式类似，也是用于创建一系列相关的对象。不同之处在于，抽象工厂是针对多个产品族而言的，即每个工厂可以创建多种不同类型的产品。这样的话，抽象工厂为创建一组相关或独立的对象提供了一种方式。</p>
<p>工厂方法模式通常只针对一个抽象产品类进行创建，而抽象工厂模式则需要针对多种抽象产品进行创建。<br><span id="more"></span></p>
<p>示例为实现切换不同数据库</p>
<h2 id="原程序"><a href="#原程序" class="headerlink" title="原程序"></a>原程序</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//User表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ID</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;id = ID;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;name = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SQLServer操作User表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">SqlServerUser</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params">User user</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;在SQLServer中增加一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">GerUser</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;在SQLServer中根据ID获取User表的一条记录&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">SqlServerUser su = <span class="keyword">new</span> SqlServerUser();<span class="comment">//--此处定义了必须是SQL无法直接替换其他类型数据库</span></span><br><span class="line">su.Insert(user);</span><br><span class="line">su.GetUser(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IUser</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span>(<span class="params">User user</span>)</span>;</span><br><span class="line">    <span class="function">User <span class="title">GetUser</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">SqlServerUser</span> : <span class="title">IUser</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params">User user</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;在SQLServer中增加一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">GerUser</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;在SQLServer中根据ID获取User表的一条记录&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">AccessUser</span> : <span class="title">IUser</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params">User user</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;在Access中增加一条记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">GerUser</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;在Access中根据ID获取User表的一条记录&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IUser <span class="title">CreateUser</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">SqlserverFactory</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">CreateUser</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlserverUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">AccessFactory</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">CreateUser</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccessUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">IFactory factory = <span class="keyword">new</span> SqlserverFactory();</span><br><span class="line">IUser iu = factory.CreateUser();</span><br><span class="line"></span><br><span class="line">iu.Insert(user);</span><br><span class="line">iu.GetUser(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>工厂方法模式通常只针对一个抽象产品类进行创建，而抽象工厂模式则需要针对多种抽象产品进行创建。</p>
<p>随着表的增多(比如增加一个Department部门表),<br>需要增加很多类(IDepartment, SqlserverDepartment, AccessDepartment),<br>还要修改很多类(IFactory, SqlserverFactory, AccessFactory)增加接口函数</p>
<h3 id="简单工厂优化抽象工厂"><a href="#简单工厂优化抽象工厂" class="headerlink" title="简单工厂优化抽象工厂"></a>简单工厂优化抽象工厂</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">DataAccess</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> db = <span class="string">&quot;Sqlserver&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUser <span class="title">CreateUser</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IUser user = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span>(db)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Sqlserver&quot;</span>:</span><br><span class="line">            user = <span class="keyword">new</span> SqlserverUser();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Access&quot;</span>:</span><br><span class="line">            user = <span class="keyword">new</span> AccessUser();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IDepartment <span class="title">CreateDepartment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IDepartment deparement = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span>(db)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Sqlserver&quot;</span>:</span><br><span class="line">            deparement = <span class="keyword">new</span> SqlserverDeparement();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Access&quot;</span>:</span><br><span class="line">            deparement = <span class="keyword">new</span> AccessDeparement();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deparement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Department department = <span class="keyword">new</span> Department();</span><br><span class="line"></span><br><span class="line">IUser iu = DataAccess.CreateUser();</span><br><span class="line">iu.Insert(user);</span><br><span class="line">iu.GetUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">IDepartment id = DataAccess.CreateDepartment();</span><br><span class="line">id.Insert(department);</span><br><span class="line">id.GetDepartment(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>简单工厂去除了工厂类, 比如但若是增加Oracle数据库的访问, 抽象工厂只需要增加OracleFactory, 简单工厂却需要更改DataAccess类中的case</p>
<h3 id="反射-抽象工厂"><a href="#反射-抽象工厂" class="headerlink" title="反射+抽象工厂"></a>反射+抽象工厂</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DataAccess</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> assemblyName = <span class="string">&quot;抽象工厂模式&quot;</span>;<span class="comment">//程序集名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> db = <span class="string">&quot;Sqlserver&quot;</span>;<span class="comment">//--可放在配置文件中实现真正的开闭原则</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUser <span class="title">CreateUser</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> className = assemblyName + <span class="string">&quot;.&quot;</span> + db + <span class="string">&quot;User&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (IUser)Assembly.Load(assemblyName).CreateInstance(className);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IDepartment <span class="title">CreateDepartment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> className = assemblyName + <span class="string">&quot;.&quot;</span> + db + <span class="string">&quot;Department&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (IDepartment)Assembly.Load(assemblyName).CreateInstance(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Department department = <span class="keyword">new</span> Department();</span><br><span class="line"></span><br><span class="line">IUser iu = DataAccess.CreateUser();</span><br><span class="line">iu.Insert(user);</span><br><span class="line">iu.GetUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">IDepartment id = DataAccess.CreateDepartment();</span><br><span class="line">id.Insert(department);</span><br><span class="line">id.GetDepartment(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java抽象工厂示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为形状创建一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实现接口的实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Square::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Circle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为颜色创建一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实现接口的实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Red::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Green</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Green::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Blue::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为 Color 和 Shape 对象创建抽象类来获取工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Color <span class="title function_">getColor</span><span class="params">(String color)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Shape <span class="title function_">getShape</span><span class="params">(String shape)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Shape <span class="title function_">getShape</span><span class="params">(String shapeType)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Color <span class="title function_">getColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Shape <span class="title function_">getShape</span><span class="params">(String shapeType)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Color <span class="title function_">getColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(color == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;RED&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Red</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;GREEN&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Green</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;BLUE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blue</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryProducer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title function_">getFactory</span><span class="params">(String choice)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;SHAPE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShapeFactory</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;COLOR&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ColorFactory</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactoryPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状工厂</span></span><br><span class="line">      <span class="type">AbstractFactory</span> <span class="variable">shapeFactory</span> <span class="operator">=</span> FactoryProducer.getFactory(<span class="string">&quot;SHAPE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状为 Circle 的对象</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape1</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;CIRCLE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">      shape1.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状为 Rectangle 的对象</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape2</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;RECTANGLE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">      shape2.draw();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取形状为 Square 的对象</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape3</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;SQUARE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">      shape3.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色工厂</span></span><br><span class="line">      <span class="type">AbstractFactory</span> <span class="variable">colorFactory</span> <span class="operator">=</span> FactoryProducer.getFactory(<span class="string">&quot;COLOR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Red 的对象</span></span><br><span class="line">      <span class="type">Color</span> <span class="variable">color1</span> <span class="operator">=</span> colorFactory.getColor(<span class="string">&quot;RED&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Red 的 fill 方法</span></span><br><span class="line">      color1.fill();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Green 的对象</span></span><br><span class="line">      <span class="type">Color</span> <span class="variable">color2</span> <span class="operator">=</span> colorFactory.getColor(<span class="string">&quot;GREEN&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Green 的 fill 方法</span></span><br><span class="line">      color2.fill();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Blue 的对象</span></span><br><span class="line">      <span class="type">Color</span> <span class="variable">color3</span> <span class="operator">=</span> colorFactory.getColor(<span class="string">&quot;BLUE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Blue 的 fill 方法</span></span><br><span class="line">      color3.fill();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Inside Circle::draw() method.</span></span><br><span class="line"><span class="comment">Inside Rectangle::draw() method.</span></span><br><span class="line"><span class="comment">Inside Square::draw() method.</span></span><br><span class="line"><span class="comment">Inside Red::fill() method.</span></span><br><span class="line"><span class="comment">Inside Green::fill() method.</span></span><br><span class="line"><span class="comment">Inside Blue::fill() method.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-装饰模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>装饰模式:<br>把所需的功能按正确的顺序串联起来<br>动态的给一个对象添加一些职责<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;&#123;0&#125;穿着&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Finery</span> : <span class="title">Person</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> Person component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Decorate</span>(<span class="params">Person component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        component?.Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">TShirts</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;T恤 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">BigTrouser</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;垮裤 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Silpper</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;拖鞋 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"></span><br><span class="line">Person ps = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">BigTrouser bt = <span class="keyword">new</span> BigTrouser();</span><br><span class="line">TShirts ts = <span class="keyword">new</span> TShirts();</span><br><span class="line">Silpper s = <span class="keyword">new</span> Silpper();</span><br><span class="line">bt.Decorate(ps);</span><br><span class="line">ts.Decorate(bt);</span><br><span class="line">s.Decorate(ts);</span><br><span class="line">s.Show();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">小明穿着垮裤 T恤 拖鞋</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java示例</span></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape: Rectangle&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape: Circle&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承接口的抽象装饰类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">      decoratedShape.draw();</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承抽象装饰的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title class_">ShapeDecorator</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(decoratedShape);     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      decoratedShape.draw();         </span><br><span class="line">      setRedBorder(decoratedShape);<span class="comment">//扩展功能</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setRedBorder</span><span class="params">(Shape decoratedShape)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Border Color: Red&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      <span class="type">ShapeDecorator</span> <span class="variable">redCircle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedShapeDecorator</span>(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">      <span class="type">ShapeDecorator</span> <span class="variable">redRectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedShapeDecorator</span>(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">      <span class="comment">//Shape redCircle = new RedShapeDecorator(new Circle());</span></span><br><span class="line">      <span class="comment">//Shape redRectangle = new RedShapeDecorator(new Rectangle());</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Circle with normal border&quot;</span>);</span><br><span class="line">      circle.draw();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;\nCircle of red border&quot;</span>);</span><br><span class="line">      redCircle.draw();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;\nRectangle of red border&quot;</span>);</span><br><span class="line">      redRectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Circle with normal border</span></span><br><span class="line"><span class="comment">Shape: Circle</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Circle of red border</span></span><br><span class="line"><span class="comment">Shape: Circle</span></span><br><span class="line"><span class="comment">Border Color: Red</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Rectangle of red border</span></span><br><span class="line"><span class="comment">Shape: Rectangle</span></span><br><span class="line"><span class="comment">Border Color: Red</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-观察者模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>定义了一种一对多的依赖关系，当一个对象的状态发生改变时，其所有依赖者都会收到通知并自动更新。<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象通知者</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IList&lt;Observer&gt; observers = <span class="keyword">new</span> List&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">//增加观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attach</span>(<span class="params">Observer observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        observers.Add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Detach</span>(<span class="params">Observer observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        observers.Remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        observers.Foreach(o =&gt; o.Update())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象观察者</span></span><br><span class="line"><span class="keyword">interface</span> <span class="keyword">class</span> <span class="title">IObserver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体通知者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateSubject</span> : <span class="title">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> subjectState;</span><br><span class="line">    <span class="comment">//具体被观察者的状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SubjectState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> subjectState;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;subjectState = <span class="keyword">value</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreatObserver</span> : <span class="title">IObserver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> observerState;</span><br><span class="line">    <span class="keyword">private</span> ConcreateSubject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreatObserver</span>(<span class="params">ConcreateSubject subject, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        observerState = subject.SubjectState;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;观察者&#123;0&#125;的新状态是&#123;1&#125;&quot;</span>, name, observerState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ConcreateSubject Subject</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> subject;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;subject = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">ConcreateSubject subject = <span class="keyword">new</span> ConcreateSubject();l</span><br><span class="line">subject.Attach(<span class="keyword">new</span> ConcreatObserver(subject, <span class="string">&quot;X&quot;</span>));</span><br><span class="line">subject.Attach(<span class="keyword">new</span> ConcreatObserver(subject, <span class="string">&quot;Y&quot;</span>));</span><br><span class="line">subject.Attach(<span class="keyword">new</span> ConcreatObserver(subject, <span class="string">&quot;Z&quot;</span>));</span><br><span class="line">subject.SubjectState = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">subject.Notify();</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用事件</span></span><br><span class="line"><span class="comment">//通知者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Noticy</span>()</span>;</span><br><span class="line">    <span class="built_in">string</span> SubjectState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体通知者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateSubject</span> : <span class="title">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler Update;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> action;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Update();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SubjectState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> action;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;action = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreatObserver1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreatObserver1</span>(<span class="params">Subject subject, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        observerState = subject.SubjectState;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;观察者&#123;0&#125;的新状态是&#123;1&#125;&quot;</span>, name, observerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreatObserver2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreatObserver2</span>(<span class="params">Subject subject, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        observerState = subject.SubjectState;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;观察者&#123;0&#125;的新状态是&#123;1&#125;&quot;</span>, name, observerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">ConcreateSubject subject = <span class="keyword">new</span> ConcreateSubject();</span><br><span class="line">subject.Update += <span class="keyword">new</span> EventHandler(<span class="keyword">new</span> ConcreatObserver1(subject, <span class="string">&quot;X&quot;</span>).Update1());</span><br><span class="line">subject.Update += <span class="keyword">new</span> EventHandler(<span class="keyword">new</span> ConcreatObserver2(subject, <span class="string">&quot;Y&quot;</span>).Update2());</span><br><span class="line">subject.SubjectState = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">subject.Notify();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-简单工厂</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82.html</url>
    <content><![CDATA[<p>一个工厂类创建所有产品<br><span id="more"></span></p>
<h2 id="初始方案"><a href="#初始方案" class="headerlink" title="初始方案"></a>初始方案</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Chart</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chart</span>(<span class="params"><span class="built_in">object</span>[][] data, <span class="built_in">string</span> type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;histogram&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//柱状图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;pie&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//饼图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;line&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//折线图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Display</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;histogram&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//显示柱状图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;pie&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//显示饼图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;line&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//显示折线图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>定义一个类, 可根据不同参数返回不同类的实例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IChart</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">HistogramChart</span> : <span class="title">IChart</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HistogramChart</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//创建柱状图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//显示柱状图</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">PieChart</span> : <span class="title">IChart</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChart</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//创建饼图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//显示饼图</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">ChartFactory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IChart <span class="title">GetChart</span>(<span class="params"><span class="built_in">string</span> type</span>)</span>&#123;</span><br><span class="line">        IChart chart = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;histogram&quot;</span>))&#123;</span><br><span class="line">            chart = <span class="keyword">new</span> HistogramChart();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.EqualsIgnoreCase(<span class="string">&quot;pie&quot;</span>))&#123;</span><br><span class="line">            chart = <span class="keyword">new</span> PieChart();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span>&#123;</span><br><span class="line">    Chart chart = ChartFactory.GetChart(<span class="string">&quot;pie&quot;</span>);</span><br><span class="line">    chart.Display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-MVC模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-MVC%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>Model（模型） - 模型代表一个存取数据的对象<br>View（视图） - 视图代表模型包含的数据的可视化<br>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们将创建一个作为模型的 Student 对象。StudentView 是一个把学生详细信息输出到控制台的视图类，StudentController 是负责存储数据到 Student 对象中的控制器类，并相应地更新视图 StudentView。</span></span><br><span class="line"><span class="comment">//Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> rollNo;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">RollNo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> rollNo;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;<span class="keyword">this</span>.rollNo = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;<span class="keyword">this</span>.name = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//View</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentView</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintStudentDetails</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> rollNo</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Student Name: &#123;0&#125;, Roll No: &#123;1&#125;&quot;</span>, name, rollNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Strudent model;</span><br><span class="line">    <span class="keyword">private</span> StudentView view;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentController</span>(<span class="params">Student model, StudentView view</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetStudentName</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        model.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetStudentRollNo</span>(<span class="params"><span class="built_in">string</span> rollNo</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        model.rollNo = rollNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetStudentName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> model.Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetStudentRollNo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> model.rollNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateView</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        view.PrintStudentDetails(model.Name, model.RollNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Student model = <span class="keyword">new</span> Student();</span><br><span class="line">StudentView view = <span class="keyword">new</span> StudentView();</span><br><span class="line">StudentController controller = <span class="keyword">new</span> StudengController(model, view);</span><br><span class="line">controller.SetStudentName(<span class="string">&quot;Xiaoming&quot;</span>);</span><br><span class="line">controller.SetStudentRollNo(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">controller.UpdateView();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>UML-PlantUML</title>
    <url>/UML-PlantUML.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line"><span class="title">abstract</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line"><span class="title">interface</span> <span class="title">Person</span></span><br><span class="line"><span class="title">enum</span> <span class="title">Gender</span> &#123; MALE, FEMALE &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法属性</span></span><br><span class="line"><span class="comment">//+:public</span></span><br><span class="line"><span class="comment">//-:private</span></span><br><span class="line"><span class="comment">//#:protected</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ClassName</span> &#123;</span><br><span class="line">  + attribute1 : Type1</span><br><span class="line">  <span class="meta"># attribute2 : Type2</span></span><br><span class="line">  - method1() : ReturnType1</span><br><span class="line">  + method2(param1:Type1, param2:Type2) : ReturnType2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMS0QHVecvgGhLNDeAYIKbHPb9fIMfXWfM2Y6L1Qc6NCe8GIEee15GPMvgIKP-Yg669b0iABMaj2WFeXmcOwHHa5YKc6je1HRMKG3pZC0y8rGzHbor0000>
<h2 id="类之间关系"><a href="#类之间关系" class="headerlink" title="类之间关系"></a>类之间关系</h2><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><p>继承非抽象类<br>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B继承自A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line">A &lt;|-- B</span><br></pre></td></tr></table></figure>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMS5Ievj9Mo4qjoSXFqT1Ki588IYqfBSeBgIn8vQhbIWQhSSAhnb71faPNLy490000>
<h3 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h3><p>实现关系表现为继承抽象类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B继承自A</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">A</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line">A &lt;|.. B</span><br></pre></td></tr></table></figure>
<img  src=http://www.plantuml.com/plantuml/svg/oymhIIrAIqnELN1KgERILiXDBSd8Jz7GLB1I24ejAItA2waiIEMgvKhEIImkLd32gyPHmQP6Jq_12G00>
<h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B聚合到A上，或者说A由B组成</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line">A o-- B</span><br></pre></td></tr></table></figure>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMS5Ievj9Mo4qjoSXFqT1Ki588IYqfBSeBgIn8vQhbIWQhSSAhnb4XNrTNmGa0>
<h3 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//说A由B组成</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line">A *-- B</span><br></pre></td></tr></table></figure>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMS5Ievj9Mo4qjoSXFqT1Ki588IYqfBSeBgIn8vQhbIWQhSSAhnb51IrTNmGa0>
<h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>描述不同类的对象之间的结构关系<br>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系<br>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示B知道A，但 A不知道B</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line">A &lt;-- B</span><br></pre></td></tr></table></figure>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMS5Ievj9Mo4qjoSXFqT1Ki588IYqfBSeBgIn8vQhbIWQhSSAhnb71HbTNmGa0>
<h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化<br>一个对象在运行期间会用到另一个对象的关系<br>应该保持单向依赖，杜绝双向依赖的产生</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">  + method() : ReturnType</span><br><span class="line">&#125;</span><br><span class="line">A &lt;.. B</span><br></pre></td></tr></table></figure>
<img  src=http://www.plantuml.com/plantuml/svg/Iyv9B2vMS5Ievj9Mo4qjoSXFqT1Ki588IYqfBSeBgIn8vQhbIWQhSSAhnb71HazFmGa0>
]]></content>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-命令模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令<br><span id="more"></span></p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//知道如何实施与执行一个与请求相关的操作，任何类都可能作为一个接受者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Receiver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Command 执行操作的接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> Receiver receiver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span>(<span class="params">Receiver receiver</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConcreateCommand 将一个接受者对象绑定于一个动作，调用接受者相应的操作，以实现Execute</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateCommand</span> : <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateCommand</span>(<span class="params">Receiver receiver</span>) : <span class="title">base</span>(<span class="params">receiver</span>)</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        receiver.Action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Invoker 要求命令执行请求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Invoker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCommand</span>(<span class="params">Command command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExecuteCommand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        command.Execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Receiver rec = <span class="keyword">new</span> Receiver();</span><br><span class="line">Command co = <span class="keyword">new</span> ConcreateCommand(rec);</span><br><span class="line">Invoker i = <span class="keyword">new</span> Invoker();</span><br><span class="line"></span><br><span class="line">i.SetCommand(co);</span><br><span class="line">i.ExecuteCommand();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stock</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span>+name+<span class="string">&quot;, </span></span><br><span class="line"><span class="string">         Quantity: &quot;</span> + quantity +<span class="string">&quot; ] bought&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span>+name+<span class="string">&quot;, </span></span><br><span class="line"><span class="string">         Quantity: &quot;</span> + quantity +<span class="string">&quot; ] sold&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyStock</span> <span class="keyword">implements</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">BuyStock</span><span class="params">(Stock abcStock)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.abcStock = abcStock;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">      abcStock.buy();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellStock</span> <span class="keyword">implements</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SellStock</span><span class="params">(Stock abcStock)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.abcStock = abcStock;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">      abcStock.sell();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//命令调用类</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Broker</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Order&gt; orderList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Order&gt;(); </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeOrder</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">      orderList.add(order);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">placeOrders</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">         order.execute();</span><br><span class="line">      &#125;</span><br><span class="line">      orderList.clear();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Stock</span> <span class="variable">abcStock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stock</span>();</span><br><span class="line"> </span><br><span class="line">      <span class="type">BuyStock</span> <span class="variable">buyStockOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyStock</span>(abcStock);</span><br><span class="line">      <span class="type">SellStock</span> <span class="variable">sellStockOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellStock</span>(abcStock);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Broker</span> <span class="variable">broker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Broker</span>();</span><br><span class="line">      broker.takeOrder(buyStockOrder);</span><br><span class="line">      broker.takeOrder(sellStockOrder);</span><br><span class="line"> </span><br><span class="line">      broker.placeOrders();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Stock [ Name: ABC, Quantity: 10 ] bought</span></span><br><span class="line"><span class="comment">Stock [ Name: ABC, Quantity: 10 ] sold</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-中介者模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护<br>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互<br>对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理<br><span id="more"></span></p>
<h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Mediator 抽象中介者</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message, Colleague colleague</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Colleague 抽象同事类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span>(<span class="params">Mediator mediator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateMediator</span> : <span class="title">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ConcreateColleague1 colleague1;</span><br><span class="line">    <span class="keyword">private</span> ConcreateColleague2 colleague2;</span><br><span class="line">    <span class="keyword">public</span> ConcreateColleague1 Colleague1</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>&#123;colleague1 = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ConcreateColleague2 Colleague2</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span>&#123;colleague2 = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message, Colleague colleague</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(colleague == colleague1)</span><br><span class="line">            colleague2.Notify(message)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            colleague1.Notify(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateColleague1</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateColleague1</span>(<span class="params">Mediator mediator</span>) : <span class="title">base</span>(<span class="params">mediator</span>)</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mediator.Send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Colleague 1 Recv &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateColleague2</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateColleague2</span>(<span class="params">Mediator mediator</span>) : <span class="title">base</span>(<span class="params">mediator</span>)</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mediator.Send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Colleague 2 Recv &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">ConcreateMediator m = <span class="keyword">new</span> ConcreateMediator();<span class="comment">//创建中介</span></span><br><span class="line">ConcreateColleague1 c1 = <span class="keyword">new</span> ConcreateColleague1(m);<span class="comment">//让同事都认识中介</span></span><br><span class="line">ConcreateColleague2 c2 = <span class="keyword">new</span> ConcreateColleague2(m);</span><br><span class="line"></span><br><span class="line">m.colleague1 = c1;<span class="comment">//让中介认识同事</span></span><br><span class="line">m.colleague2 = c2;</span><br><span class="line"></span><br><span class="line">c1.Send(<span class="string">&quot;你瞅啥&quot;</span>);</span><br><span class="line">c2.Send(<span class="string">&quot;瞅你咋地&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-享元模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>用于减少创建对象的数量，以减少内存占用和提高性能<br>运用共享技术有效地支持大量细粒度的对象<br>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建<br>用 HashMap(Hashtable) 存储这些对象</p>
<p>string 运用了Flyweight模式<br><span id="more"></span></p>
<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Flyweight 享元接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Flyweight</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operation</span>(<span class="params"><span class="built_in">int</span> extrinsicstate</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//共享的Flyweight子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateFlyweight</span> : <span class="title">Flyweight</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Operation</span>(<span class="params"><span class="built_in">int</span> extrinsicstate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;具体Flayweight: &quot;</span> + extrinsicstate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不需要共享的Flyweight子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">UnsharedConcreateFlyweight</span> : <span class="title">Flyweight</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Operation</span>(<span class="params"><span class="built_in">int</span> extrinsicstate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;不共享的具体Flayweight: &quot;</span> + extrinsicstate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//享元工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">FlyweightFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Hashtable flyweights = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlyweightFactory</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        flyweights.Add(<span class="string">&quot;X&quot;</span>, <span class="keyword">new</span> ConcreateFlyweight());</span><br><span class="line">        flyweights.Add(<span class="string">&quot;Y&quot;</span>, <span class="keyword">new</span> ConcreateFlyweight());</span><br><span class="line">        flyweights.Add(<span class="string">&quot;X&quot;</span>, <span class="keyword">new</span> ConcreateFlyweight());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">GetFlyweight</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!flyweights.ContainKey(key))</span><br><span class="line">            flyweights.Add(key, <span class="keyword">new</span> ConcreateFlyweight());</span><br><span class="line">        <span class="keyword">return</span>(Flyweight)flyweight[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"><span class="built_in">int</span> extrinsicstate = <span class="number">22</span>;</span><br><span class="line">FlyweightFactory f = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">Flyweight fx = f.GetFlyweight(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">fx.Operation(--extrinsicstate);</span><br><span class="line">Flyweight fy = f.GetFlyweight(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">fy.Operation(--extrinsicstate);</span><br><span class="line">Flyweight fz = f.GetFlyweight(<span class="string">&quot;Z&quot;</span>);</span><br><span class="line">fz.Operation(--extrinsicstate);</span><br><span class="line"></span><br><span class="line">Flyweight uf = <span class="keyword">new</span> UnsharedConcreateFlyweight();</span><br><span class="line">uf.Operation(--extrinsicstate);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-备忘录模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>在不破坏封装性的前提下, 捕获一个对象的内部状态, 并在该对象之外保存这个状态<br><span id="more"></span></p>
<h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发起人Originator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Originator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> state;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> State&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment">//创建备忘录保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">CreateMemento</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//恢复数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMemento</span>(<span class="params">Memento memento</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        state = memento.State;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;State = &quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//备忘录Memento</span></span><br><span class="line"><span class="comment">//封装保存细节</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Memento</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> state;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> State&#123;<span class="keyword">get</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span>(<span class="params"><span class="built_in">string</span> state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//管理者Caretaker</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Caretaker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line">    <span class="keyword">public</span> Memento Memento&#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Originator o = <span class="keyword">new</span> Originator();</span><br><span class="line">o.State = <span class="string">&quot;On&quot;</span>;</span><br><span class="line">o.Show();</span><br><span class="line"></span><br><span class="line">Caretaker c = <span class="keyword">new</span> Caretaker();</span><br><span class="line">c.Memento = o.CreateMemento();</span><br><span class="line"></span><br><span class="line">o.State = <span class="string">&quot;Off&quot;</span>;</span><br><span class="line">o.Show();</span><br><span class="line"></span><br><span class="line">o.SetMemento(c.Memento);</span><br><span class="line">o.Show();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-总结</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<p>设计模式是众多软件开发人员经过相当长的一段时间的试验和错误的总结</p>
<p>目的是使程序 可维护, 可扩展, 可复用, 灵活性好<br><span id="more"></span></p>
<h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><h3 id="开闭原则（Open-Close-Principle）"><a href="#开闭原则（Open-Close-Principle）" class="headerlink" title="开闭原则（Open Close Principle）"></a>开闭原则（Open Close Principle）</h3><p><strong>对扩展开放，对修改关闭。</strong><br>在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。<br>简言之，是为了使程序的扩展性好，易于维护和升级。使用接口和抽象类</p>
<h3 id="里式替换原则（Liskov-Substitution-Principle）"><a href="#里式替换原则（Liskov-Substitution-Principle）" class="headerlink" title="里式替换原则（Liskov Substitution Principle）"></a>里式替换原则（Liskov Substitution Principle）</h3><p>任何基类可以出现的地方，子类一定可以出现。<br>LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。<br>里氏代换原则是对开闭原则的补充。<br>实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范</p>
<h3 id="依赖倒置原则（Dependence-Inversion-Principle）"><a href="#依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）"></a>依赖倒置原则（Dependence Inversion Principle）</h3><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
<h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h3><p>使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度</p>
<h3 id="迪特米法则（Demeter-Principle）"><a href="#迪特米法则（Demeter-Principle）" class="headerlink" title="迪特米法则（Demeter Principle）"></a>迪特米法则（Demeter Principle）</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</p>
<h3 id="合成复用原则（Composite-Reuse-Principle）"><a href="#合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成复用原则（Composite Reuse Principle）"></a>合成复用原则（Composite Reuse Principle）</h3><p>尽量使用合成/聚合的方式，而不是使用继承</p>
<h2 id="常用23种设计模式"><a href="#常用23种设计模式" class="headerlink" title="常用23种设计模式"></a>常用23种设计模式</h2><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><p>用于创建对象</p>
<h4 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h4><p>工厂方法适用于创建单个产品<br>工厂负责创建接口使用者需要的对象，但是接口使用者不需要关心具体的对象类型，只需要关心已知的返回对象类型和接口即可</p>
<p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行<br>允许我们在不改变现有代码基础上添加新的产品类型，并且可以将具体产品的实现与调用方分离开来</p>
<p><strong>优点</strong>: 1、一个调用者想创建一个对象，只要知道其名称就可以了。<br>          2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。<br>          3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖</p>
<p>简单工厂模式和普通工厂模式的差别比较小，可以合在一起讲，它们的区别是简单工厂模式里，工厂直接负责产品的生产，而到普通工厂模式里，工厂是个抽象类，具体的生产行为交给了具体的工厂。到了抽象工厂模式里，工厂生产的对象不止一个，而是多个</p>
<h4 id="抽象工厂模式（Abstract-Factory-Pattern）"><a href="#抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="抽象工厂模式（Abstract Factory Pattern）"></a>抽象工厂模式（Abstract Factory Pattern）</h4><p>抽象工厂适用于创建多个产品</p>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</p>
<p>抽象工厂可以理解为是一系列工厂方法的集合。抽象工厂的子类，实现每一个工厂方法</p>
<p>使用工厂方法模式时，往往仅需选用所需的工厂方法即可，而使用抽象工厂模式时，则需要创建所有抽象产品对象</p>
<h4 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h4><p>确保一个类只有一个实例，并提供了一个全局访问点来访问该实例</p>
<h4 id="建造者模式（Builder-Pattern）"><a href="#建造者模式（Builder-Pattern）" class="headerlink" title="建造者模式（Builder Pattern）"></a>建造者模式（Builder Pattern）</h4><p>组合的变化由不同基础部件组合导致<br>使用多个简单的对象一步一步构建成一个复杂的对象<br>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示<br>建造者模式更加关注与零件装配的顺序</p>
<h4 id="原型模式（Prototype-Pattern）"><a href="#原型模式（Prototype-Pattern）" class="headerlink" title="原型模式（Prototype Pattern）"></a>原型模式（Prototype Pattern）</h4><p>用于创建重复的对象，同时又能保证性能<br>实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式</p>
<p>注意深拷贝和浅拷贝</p>
<h3 id="结构性"><a href="#结构性" class="headerlink" title="结构性"></a>结构性</h3><h4 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h4><p>使原有接口适配新接口</p>
<p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作<br>适配器继承或依赖已有的对象，实现想要的目标接口</p>
<p>适配器模式：客户需要使用现有的类，而此类的接口不符合客户的需要；想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类；通过接口转换，将一个类插入另一个类系中</p>
<h4 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a>桥接模式（Bridge Pattern）</h4><p>将抽象与实现分离，使它们可以独立地变化，该模式通过将一个对象的抽象部分与它的实现部分分离，使它们可以独立地改变。它通过组合的方式，而不是继承的方式，将抽象和实现的部分连接起来</p>
<p>适用于一个类存在两个独立变化的维度，且这两个维度都需要进行扩展</p>
<p>个人理解: 一个抽象类中调用另一个抽象类, 实现解耦</p>
<h4 id="过滤器模式（Filter、Criteria-Pattern）"><a href="#过滤器模式（Filter、Criteria-Pattern）" class="headerlink" title="过滤器模式（Filter、Criteria Pattern）"></a>过滤器模式（Filter、Criteria Pattern）</h4><h4 id="组合模式（Composite-Pattern）"><a href="#组合模式（Composite-Pattern）" class="headerlink" title="组合模式（Composite Pattern）"></a>组合模式（Composite Pattern）</h4><p>用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次<br>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性<br>树枝和叶子实现统一接口，树枝内部组合该接口<br>树枝内部组合该接口，并且含有内部属性 List，里面放 Component</p>
<h4 id="装饰器模式（Decorator-Pattern）"><a href="#装饰器模式（Decorator-Pattern）" class="headerlink" title="装饰器模式（Decorator Pattern）"></a>装饰器模式（Decorator Pattern）</h4><p>允许向一个现有的对象添加新的功能，同时又不改变其结构<br>在保持类方法签名完整性的前提下，提供了额外的功能</p>
<h4 id="外观模式（Facade-Pattern）"><a href="#外观模式（Facade-Pattern）" class="headerlink" title="外观模式（Facade Pattern）"></a>外观模式（Facade Pattern）</h4><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口<br>降低访问复杂系统的内部子系统时的复杂度，简化客户端之间的接口</p>
<p><strong>创建一个新类</strong>, 为客户端提供具体的部件组合后的接口</p>
<p>两个类的关系是单项的, 一方通过外观与另一方发生关系, 而另一方则不能</p>
<h4 id="享元模式（Flyweight-Pattern）"><a href="#享元模式（Flyweight-Pattern）" class="headerlink" title="享元模式（Flyweight Pattern）"></a>享元模式（Flyweight Pattern）</h4><p>已创建的对象直接返回</p>
<p>用于减少创建对象的数量，以减少内存占用和提高性能<br>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建<br>用 HashMap(Hashtable) 存储这些对象</p>
<h4 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h4><p>一个类代表另一个类的功能, 为其他对象提供一种代理以控制对这个对象的访问, <strong>继承同一接口, 对客户端来说并无区别</strong></p>
<p>代理模式：当无法或不想直接访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口</p>
<p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。<br>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p>
<h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><h4 id="责任链模式（Chain-of-Responsibility-Pattern）"><a href="#责任链模式（Chain-of-Responsibility-Pattern）" class="headerlink" title="责任链模式（Chain of Responsibility Pattern）"></a>责任链模式（Chain of Responsibility Pattern）</h4><p>为请求创建了一个接收者对象的链<br>通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推<br>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止<br>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了</p>
<h4 id="命令模式（Command-Pattern）"><a href="#命令模式（Command-Pattern）" class="headerlink" title="命令模式（Command Pattern）"></a>命令模式（Command Pattern）</h4><p>请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令<br>解开了请求调用者和请求接收者之间的耦合关系<br>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化<br>比如需要对行为进行记录、撤销或重做、事务等处理时使用</p>
<p>当需要先将一个函数登记上，然后再以后调用此函数时，就需要使用命令模式，其实这就是回调函数</p>
<h4 id="解释器模式（Interpreter-Pattern）"><a href="#解释器模式（Interpreter-Pattern）" class="headerlink" title="解释器模式（Interpreter Pattern）"></a>解释器模式（Interpreter Pattern）</h4><h4 id="迭代器模式（Iterator-Pattern）"><a href="#迭代器模式（Iterator-Pattern）" class="headerlink" title="迭代器模式（Iterator Pattern）"></a>迭代器模式（Iterator Pattern）</h4><h4 id="中介者模式（Mediator-Pattern）"><a href="#中介者模式（Mediator-Pattern）" class="headerlink" title="中介者模式（Mediator Pattern）"></a>中介者模式（Mediator Pattern）</h4><h4 id="备忘录模式（Memento-Pattern）"><a href="#备忘录模式（Memento-Pattern）" class="headerlink" title="备忘录模式（Memento Pattern）"></a>备忘录模式（Memento Pattern）</h4><h4 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h4><h4 id="状态模式（State-Pattern）"><a href="#状态模式（State-Pattern）" class="headerlink" title="状态模式（State Pattern）"></a>状态模式（State Pattern）</h4><h4 id="空对象模式（Null-Object-Pattern）"><a href="#空对象模式（Null-Object-Pattern）" class="headerlink" title="空对象模式（Null Object Pattern）"></a>空对象模式（Null Object Pattern）</h4><h4 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h4><h4 id="模板模式（Template-Pattern）"><a href="#模板模式（Template-Pattern）" class="headerlink" title="模板模式（Template Pattern）"></a>模板模式（Template Pattern）</h4><h4 id="访问者模式（Visitor-Pattern）"><a href="#访问者模式（Visitor-Pattern）" class="headerlink" title="访问者模式（Visitor Pattern）"></a>访问者模式（Visitor Pattern）</h4>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-桥接模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>将抽象部分与实现部分分离，使它们都可以独立的变化<br>需要多角度去分类实现对象， 而只用继承会造成大量的类增加， 不能满足开放-封闭原则时， 就应该要考虑用桥接模式</p>
<p>适用于一个类存在两个独立变化的维度, 且每个维度都需要进行扩展<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不知不同颜色的不同形状</span></span><br><span class="line"><span class="comment">//将颜色和形状分开</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Paint</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedColor</span> : <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Paint</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;RedColor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BlueColor</span> : <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Paint</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;BlueColor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> IColor color;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetColor</span>(<span class="params">IColor color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">        color.Paint()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">        color.Paint()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Shape shape = <span class="keyword">new</span> Circle();</span><br><span class="line">shape.SetColor(<span class="keyword">new</span> BlueColor());</span><br><span class="line">shape.Draw();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-状态模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>当一个控制对象状态转换的条件表达式过于复杂时, 将状态的判断逻辑转移到表示不同状态的一系列类中<br>当代码中包含大量与对象状态有关的条件语句时, 使用状态模式<br><span id="more"></span></p>
<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象状态类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Handle</span>(<span class="params">Context context</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体状态类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateStateA</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Handle</span>(<span class="params">Context context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        context.State = <span class="keyword">new</span> ConcreateStateB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateStateB</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Handle</span>(<span class="params">Context context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        context.State = <span class="keyword">new</span> ConcreateStateA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">State state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> State State</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123; <span class="keyword">return</span> state;&#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            state = <span class="keyword">value</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Current state: &quot;</span> + state.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        state.Handle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Context c = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreateStateA());</span><br><span class="line">c.Request();<span class="comment">//每次请求实现状态切换</span></span><br><span class="line">c.Request();</span><br><span class="line">c.Request();</span><br><span class="line">c.Request();</span><br></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不同时间点的工作状态示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>(<span class="params">Work w</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上午工作状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShangWuState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>(<span class="params">Work w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(w.Hour &lt; <span class="number">12</span>)</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;上午工作状态&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w.SetState(<span class="keyword">new</span> ZhongWUState())</span><br><span class="line">            w.WriteProgram();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ZhongWUState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>(<span class="params">Work w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(w.Hour &lt; <span class="number">13</span>)</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;中午工作状态&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w.SetState(<span class="keyword">new</span> XiaWUState())</span><br><span class="line">            w.WriteProgram();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XiaWUState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>(<span class="params">Work w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(w.Hour &lt; <span class="number">17</span>)</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;下午工作状态&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w.SetState(<span class="keyword">new</span> WanShangState())</span><br><span class="line">            w.WriteProgram();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WanShangState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>(<span class="params">Work w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(w.TaskFinished)</span><br><span class="line">        &#123;</span><br><span class="line">            w.SetState(<span class="keyword">new</span> RestState());</span><br><span class="line">            w.WriteProgram();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(w.Hour &lt; <span class="number">21</span>)</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;晚上工作状态&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                w.SetState(<span class="keyword">new</span> SleepState())</span><br><span class="line">                w.WriteProgram();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SleepState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>(<span class="params">Work w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RestState</span> : <span class="title">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>(<span class="params">Work w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;下班休息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Work</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> State current;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Work</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        current = <span class="keyword">new</span> ShangWuState();<span class="comment">//初始化为上午状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> hour;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Hour</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> hour;&#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; hour = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> finish = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> TaskFinish</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> finish;&#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; finish = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetState</span>(<span class="params">State s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        current = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteProgram</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        current.WriteProgram(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Work work = <span class="keyword">new</span> Work();</span><br><span class="line">work.Hour = <span class="number">9</span>;</span><br><span class="line">work.WriteProgram();</span><br><span class="line">work.Hour = <span class="number">12</span>;</span><br><span class="line">work.WriteProgram();</span><br><span class="line">work.Hour = <span class="number">16</span>;</span><br><span class="line">work.WriteProgram();</span><br><span class="line">work.Hour = <span class="number">20</span>;</span><br><span class="line">work.WriteProgram();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-组合模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>用于把一组相似的对象当作一个单一的对象<br><span id="more"></span></p>
<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Component</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Leaf 叶节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Leaf</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Can not add to a leaf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Can not remove from a leaf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> String(<span class="string">&#x27;-&#x27;</span>, depth) + <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Composite 枝节点 用于存储子部件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Composite</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; children = <span class="keyword">new</span> List&lt;Component&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        children.Add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        children.Remove(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> String(<span class="string">&#x27;-&#x27;</span>, depth) + <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        children.Foreach(c.Display(depth + <span class="number">2</span>);)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Composite root = <span class="keyword">new</span> Composite(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">root.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;Leaf A&quot;</span>));</span><br><span class="line">root.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;Leaf B&quot;</span>));</span><br><span class="line"></span><br><span class="line">Composite comp = <span class="keyword">new</span> Composite(<span class="string">&quot;Composite X&quot;</span>);</span><br><span class="line">comp.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;Leaf XA&quot;</span>));</span><br><span class="line">comp.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;Leaf XB&quot;</span>));</span><br><span class="line">root.Add(comp);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-职责链模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止<br>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了<br><span id="more"></span></p>
<h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Handler</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Handler</span></span><br><span class="line">&#123;</span><br><span class="line">    protect Handler successor;<span class="comment">//职责链中的下一级, 当前对象无法处理时交由此对象处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetSuccessor</span>(<span class="params">Handler successor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">HandleRequest</span>(<span class="params"><span class="built_in">int</span> request</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateHandler1</span> : <span class="title">Handler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleRequest</span>(<span class="params"><span class="built_in">int</span> request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(request &gt;=<span class="number">0</span> &amp;&amp; request &lt; <span class="number">10</span>)<span class="comment">//当前处理者可处理</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;0-10&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(successor != <span class="literal">null</span>)</span><br><span class="line">            successor.HandleRequest(request);<span class="comment">//处理不了交给上级</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateHandler2</span> : <span class="title">Handler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleRequest</span>(<span class="params"><span class="built_in">int</span> request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(request &gt;=<span class="number">10</span> &amp;&amp; request &lt; <span class="number">20</span>)<span class="comment">//当前处理者可处理</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;0-10&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(successor != <span class="literal">null</span>)</span><br><span class="line">            successor.HandleRequest(request);<span class="comment">//处理不了交给上级</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Handler h1 = <span class="keyword">new</span> ConcreateHandler1();</span><br><span class="line">Handler h2 = <span class="keyword">new</span> ConcreateHandler2();</span><br><span class="line">h1.SetSuccessor(h2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] requests = &#123;<span class="number">0</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">11</span>&#125;;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> re <span class="keyword">in</span> requests)</span><br><span class="line">&#123;</span><br><span class="line">    h1.HandleRequest(re);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-解释器模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子<br><span id="more"></span></p>
<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象表达式</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Interpret</span>(<span class="params">Context context</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//终结符表达式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">TerminalExpression</span> : <span class="title">AbstractExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Interpret</span>(<span class="params">Context context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;终端解释器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">NonterminalExpression</span> : <span class="title">AbstractExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Interpret</span>(<span class="params">Context context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;非终端解释器&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> input;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Input</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; input = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> output;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Output</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> output; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; output = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Context context = <span class="keyword">new</span> Context()</span><br><span class="line">IList&lt;AbstractExpression&gt; list = <span class="keyword">new</span> List&lt;AbstractExpression&gt;();</span><br><span class="line">list.Add(<span class="keyword">new</span> TerminalExpression());</span><br><span class="line">list.Add(<span class="keyword">new</span> NonterminalExpression());</span><br><span class="line">list.Add(<span class="keyword">new</span> TerminalExpression());</span><br><span class="line">list.Add(<span class="keyword">new</span> TerminalExpression());</span><br><span class="line"><span class="keyword">foreach</span>(AbstractExpression exp <span class="keyword">in</span> list)</span><br><span class="line">&#123;</span><br><span class="line">    exp.Interpret();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-访问者模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>将数据结构与数据操作分离, 用于稳定的数据结构和易变的操作耦合问题<br><span id="more"></span></p>
<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Visitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">VisitorConcreateElementA</span>(<span class="params">ConcreateElementA concreateElementA</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">VisitorConcreateElementB</span>(<span class="params">ConcreateElementB concreateElementB</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateVisitor1</span> : <span class="title">Visitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitorConcreateElementA</span>(<span class="params">ConcreateElementA concreateElementA</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125;被&#123;1&#125;访问&quot;</span>, ConcreateElementA.GetType().Name, <span class="keyword">this</span>.GetType().Name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitorConcreateElementB</span>(<span class="params">ConcreateElementB concreateElementB</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125;被&#123;1&#125;访问&quot;</span>, ConcreateElementB.GetType().Name, <span class="keyword">this</span>.GetType().Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateVisitor2</span> : <span class="title">Visitor</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Element</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor visitor</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateElementA</span> : <span class="title">Element</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor visitor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        visitor.VisitConcreateElementA(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OperationA</span>()</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateElementB</span> : <span class="title">Element</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor visitor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        visitor.VisitConcreateElementB(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OperationB</span>()</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ObjectStructure</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IList&lt;Element&gt; elements = <span class="keyword">new</span> List&lt;Element&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attach</span>(<span class="params">Element element</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        elements.Add(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Detach</span>(<span class="params">Element element</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        elements.Remove(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">Visitor visitor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        elements.Foreach(e =&gt; e.Accept(visitor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">ObjectStructure o = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line">o.Attach(<span class="keyword">new</span> ConcreateElementA);</span><br><span class="line">o.Attach(<span class="keyword">new</span> ConcreateElementB);</span><br><span class="line">ConcreateVisitor1 v1 = <span class="keyword">new</span> ConcreateVisitor1();</span><br><span class="line">ConcreateVisitor1 v2 = <span class="keyword">new</span> ConcreateVisitor2();</span><br><span class="line">o.Accept(v1);</span><br><span class="line">o.Accept(v2);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-迭代器模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>学习其实现方式<br><span id="more"></span></p>
<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Iterator迭代器抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Iterator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">object</span> <span class="title">First</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">object</span> <span class="title">Next</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">bool</span> <span class="title">IsDone</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">object</span> <span class="title">CurrentItem</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体迭代器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateIterator</span> : <span class="title">Iterator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ConcreateAggregate aggregate;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> current = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateIterator</span>(<span class="params">ConcreateAggregate aggregate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.aggregate = aggregate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">First</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">Next</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">object</span> ret = <span class="literal">null</span>;</span><br><span class="line">        current++;</span><br><span class="line">        <span class="keyword">if</span>(current &lt; aggregate.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = aggregate[current];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsDone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> current &gt;= aggregate.Count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">CurrentItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> aggrate[current];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象聚集类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Aggregate</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">CreateIterator</span>()</span>;<span class="comment">//创建迭代器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体聚集类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreateAggregate</span> : <span class="title">Aggregate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IList</span>&lt;<span class="title">object</span>&gt; items <span class="keyword">new</span> <span class="title">List</span>&lt;<span class="title">object</span>&gt;()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Iterator <span class="title">CreateIterator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreateIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;<span class="keyword">get</span> &#123; <span class="keyword">return</span> items.Count;&#125;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> items[index];&#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;items.Insert(index, <span class="keyword">value</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">ConcreateAggregate ca = <span class="keyword">new</span> ConcreateAggregate();</span><br><span class="line">ca[<span class="number">0</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">ca[<span class="number">1</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">ca[<span class="number">2</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">Iterator i = <span class="keyword">new</span> ConcreateIterator(ca);</span><br><span class="line"><span class="built_in">object</span> item = i.First();</span><br><span class="line"><span class="keyword">while</span>(!i.IsDone)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.CurrentItem());</span><br><span class="line">    i.Next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-适配器模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<p>将一个类的接口转换成客户希望的另外一个接口<br>主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。<br>1、系统需要使用现有的类，而此类的接口不符合系统的需要。<br>2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。<br>3、通过接口转换，将一个类插入另一个类系中</p>
<p>DataAdapter<br><span id="more"></span></p>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Target</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;普通请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要适配的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Adaptee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpecificRequest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;特殊请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">Target</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        adaptee.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">Target target = <span class="keyword">new</span> Adapter();</span><br><span class="line">target.Request();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GUID/UUID</title>
    <url>/GUID-UUID.html</url>
    <content><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> uuid = Guid.NewGuid().ToString();<span class="comment">//带-</span></span><br><span class="line">uuid = Guid.NewGuid().ToString(<span class="string">&quot;N&quot;</span>);<span class="comment">//纯数字</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp复习-子线程更新MainForm</title>
    <url>/CSharp%E5%A4%8D%E4%B9%A0-%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0MainForm.html</url>
    <content><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Thread update;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    update = <span class="keyword">new</span> Thread(UpdateFunc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程更新主界面Label值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateFunc</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Invoke(()=&gt; label1.Text = DateTime.Now.ToString(<span class="string">&quot;HH:mm:ss&quot;</span>));</span><br><span class="line">        Invoke((<span class="built_in">string</span> x)=&gt; label1.Text = x + DateTime.Now.ToString(<span class="string">&quot;HH:mm:ss&quot;</span>),<span class="string">&quot;时间:&quot;</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展方法</title>
    <url>/%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<p>C# 扩展方法, 通过.的方式执行<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyExtensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// int 为返回类型, 参数this string str为 要扩展的类型</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">WordCount</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> str.Split(<span class="keyword">new</span> <span class="built_in">char</span>[]&#123;<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>&#125;,</span><br><span class="line">                StringSplitOptions.RemoveEmptyEntires).Length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ExtensionMethods;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;Hello Extension Methods&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> length = s.WordCount();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp Semaphore 信号量</title>
    <url>/CSharp-Semaphore-%E4%BF%A1%E5%8F%B7%E9%87%8F.html</url>
    <content><![CDATA[<p>限制可同时访问某一资源或资源池的线程数</p>
<p><code>Semaphore sema = new Semaphore(x,y)</code><br>x: 线程池中空位数<br>y: 线程池的总数</p>
<span id="more"></span>
<h2 id="WaitOne"><a href="#WaitOne" class="headerlink" title="WaitOne"></a>WaitOne</h2><p>阻止当前线程，直到当前线程的WaitHandle 收到信号</p>
<h2 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h2><p>退出信号量并返回前一个计数</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>排队</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> Semaphore sema = <span class="keyword">new</span> Semaphore(<span class="number">5</span>, <span class="number">5</span>);<span class="comment">//线程池中无线程, 最多同时执行5个线程</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> cycleNum = <span class="number">9</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; cycleNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Thread td = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart(testFun));</span><br><span class="line">            td.Name = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;&quot;</span>,i.ToString());</span><br><span class="line">            td.Start(td.Name);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFun</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        sema.WaitOne();</span><br><span class="line">        Console.WriteLine(obj.ToString() + <span class="string">&quot;进入：&quot;</span> + DateTime.Now.ToString());</span><br><span class="line">        Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">        Console.WriteLine(obj.ToString() + <span class="string">&quot;离开：&quot;</span> + DateTime.Now.ToString());</span><br><span class="line">        sema.Release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Leetcode打印零与奇偶数"><a href="#Leetcode打印零与奇偶数" class="headerlink" title="Leetcode打印零与奇偶数"></a>Leetcode打印零与奇偶数</h2><p>输入：n = 5<br>输出：”0102030405”</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ZeroEvenOdd</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//奇数偶数打印完解锁</span></span><br><span class="line">    <span class="keyword">public</span> Semaphore semaphore2 = <span class="keyword">new</span> Semaphore(<span class="number">0</span>, <span class="number">1</span>);<span class="comment">//0打印完解锁打印奇数</span></span><br><span class="line">    <span class="keyword">public</span> Semaphore semaphore3 = <span class="keyword">new</span> Semaphore(<span class="number">0</span>, <span class="number">1</span>);<span class="comment">//0打印完解锁打印偶数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZeroEvenOdd</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber(x) outputs &quot;x&quot;, where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Zero</span>(<span class="params">Action&lt;<span class="built_in">int</span>&gt; printNumber</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            semaphore.WaitOne();      </span><br><span class="line">            printNumber(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                semaphore2.Release();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                semaphore3.Release();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Even</span>(<span class="params">Action&lt;<span class="built_in">int</span>&gt; printNumber</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">2</span>;i&lt;=n;i=i+<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            semaphore3.WaitOne(); </span><br><span class="line">            printNumber(i);</span><br><span class="line">            semaphore.Release();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Odd</span>(<span class="params">Action&lt;<span class="built_in">int</span>&gt; printNumber</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=n;i=i+<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            semaphore2.WaitOne(); </span><br><span class="line">            printNumber(i);</span><br><span class="line">            semaphore.Release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp bit循环移位</title>
    <url>/CSharp-bit%E5%BE%AA%E7%8E%AF%E7%A7%BB%E4%BD%8D.html</url>
    <content><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 循环移位</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;val&quot;&gt;</span>输入的数字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iShiftBit&quot;&gt;</span>要移几位<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;isLeft&quot;&gt;</span>移位的方向<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>移位后的数字<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">uint</span> <span class="title">CycleShift</span>(<span class="params"><span class="built_in">uint</span> val, <span class="built_in">int</span> iShiftBit, <span class="built_in">bool</span> isLeft</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">uint</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">uint</span> result = <span class="number">0</span>;</span><br><span class="line">    temp |= val;</span><br><span class="line">    <span class="keyword">if</span> (isLeft)</span><br><span class="line">    &#123;</span><br><span class="line">        val &lt;&lt;= iShiftBit;</span><br><span class="line">        temp &gt;&gt;= (<span class="number">32</span> - iShiftBit);</span><br><span class="line">        result = val | temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        val &gt;&gt;= iShiftBit;</span><br><span class="line">        temp &lt;&lt;= (<span class="number">32</span> - iShiftBit);</span><br><span class="line">        result = val | temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>MagicInfo三星多显示器配置</title>
    <url>/MagicInfo%E4%B8%89%E6%98%9F%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p>三星MagicInfo显示器配置简单说明<br>重点在多图像切换的配置<br><span id="more"></span></p>
<h2 id="添加显示器设备"><a href="#添加显示器设备" class="headerlink" title="添加显示器设备"></a>添加显示器设备</h2><p>配置好各显示器IP等准备工作后, 进入网页配置界面添加显示器</p>
<p>添加设备前先创建设备组, 每个显示器都要添加相应的组<br><strong>命名中最好标识出显示器ID及当前显示器要显示的图像, 方便后续内容的添加</strong></p>
<p><img src="MagicInfo三星多显示器配置/设备组.png" alt="设备组"></p>
<p>添加完设备组后, 逐一批准设备到相应组内</p>
<p><img src="MagicInfo三星多显示器配置/批准设备.png" alt="批准设备"></p>
<h2 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h2><h3 id="上传要显示的图片"><a href="#上传要显示的图片" class="headerlink" title="上传要显示的图片"></a>上传要显示的图片</h3><p><img src="MagicInfo三星多显示器配置/内容.png" alt="内容"></p>
<p><strong>若每个显示器只需要显示一张图</strong>下一章节不需要看,跳到 添加日程表</p>
<h3 id="创建WebAuthor内容"><a href="#创建WebAuthor内容" class="headerlink" title="创建WebAuthor内容"></a>创建WebAuthor内容</h3><p>如果显示器需要根据不同需求显示不同图片, 则需要上位机触发图片切换<br>需要在WebAuthor中为<strong>每个显示器</strong>创建包含多张图片的内容, 并设置触发图片切换的条件<br>点击WebAuthor进入WebAuthor主界面, 如下图配置, 点击创建</p>
<p><img src="MagicInfo三星多显示器配置/WebAuthor添加内容.png" alt="WebAuthor添加内容"></p>
<p>进入WebAuthor主界面</p>
<p><img src="MagicInfo三星多显示器配置/WebAuthor主界面.png" alt="WebAuthor主界面"></p>
<p>进入内容界面, 改变内容查看方式, 点击下方 … 显示Page页</p>
<p><img src="MagicInfo三星多显示器配置/WebAuthor内容.png" alt="WebAuthor内容"></p>
<p>将某个显示器需要显示的图片拉到右侧(若左侧没有图片, 需要先完成上一节的内容上传)</p>
<p><img src="MagicInfo三星多显示器配置/WebAuthor添加显示图片.png" alt="WebAuthor添加显示图片"></p>
<p>点击图片下方添加页面的按钮添加Page页并拖入需要显示的图片, Page页为显示器显示的内容, 下方时间为当前图片显示的时间, 若用上位机控制图片切换则将时间设置成23小时59分59秒, 即不自动切换.</p>
<p>点击新增全局页, 用于创建图片切换触发事件</p>
<p><img src="MagicInfo三星多显示器配置/WebAuthor添加多张图片.png" alt="WebAuthor添加多张图片"></p>
<p>配置好当前显示器需要显示的图片后, 双击全局页后点击编辑事件进入事件编辑页面</p>
<p><img src="MagicInfo三星多显示器配置/WebAuthor全局页添加事件.png" alt="WebAuthor全局页添加事件"></p>
<p>添加事件触发器, 选择网络端口后添加触发配置</p>
<p><strong>触发器</strong>: 接收到相应内容后执行后续操作, 如通过网络通讯接收到<code>1</code>后自动切换到Page1设置的图片, 收到<code>2</code>后自动切换到Page2设置的图片</p>
<p><img src="MagicInfo三星多显示器配置/WebAuthor全局页设置事件触发器.png" alt="WebAuthor全局页设置事件触发器"></p>
<p>改页面没有找到保存按钮, 完成上述配置后可点击右上角新建内容, 提示保存, 保存时命名推荐同上</p>
<h2 id="添加日程表"><a href="#添加日程表" class="headerlink" title="添加日程表"></a>添加日程表</h2><p>添加日程表前先添加日程表组, 命名同上</p>
<p><img src="MagicInfo三星多显示器配置/日程表.png" alt="日程表"></p>
<p>点击新时间表添加, 其中内容部分选择WebAuthor中创建的内容</p>
<h2 id="事件触发器验证"><a href="#事件触发器验证" class="headerlink" title="事件触发器验证"></a>事件触发器验证</h2><p>MagicInfo会创建监听5000端口的UDP Server</p>
<p>通过Socket助手创建UDP Client, IP配置需要测试的显示器IP或者设置成广播同时配置所有显示器, 端口设置5000<br>发送触发器创建时的内容进行图片切换</p>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>Web入门</title>
    <url>/Web%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<p>Web入门笔记<br><span id="more"></span></p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML: Hyper Text Markup Language-超文本标记语言</p>
<h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;editor-note&quot;</span>&gt;</span>Hello HTML<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>元素由 开始标签, 内容, 结束标签 组成<br>元素可以有属性, 属性包含了元素的额外信息且不显示在内容中.</p>
<h4 id="常见元素"><a href="#常见元素" class="headerlink" title="常见元素"></a>常见元素</h4><h5 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h5><p><code>&lt;img src=&quot;images/img.png&quot; alt=&quot;Image&quot; /&gt;</code></p>
<h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><p><code>&lt;p&gt;这是一个段落&lt;/p&gt;</code></p>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>列表分为有序列表(Ordered List)\<ol><br>无序列表(Unordered List)\<ul><br>列表中项目(List Item)\<li></p>
<h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><p>链接用\<a>(Anchor)表示<br>`<a href="https://www.xxx.com">xxx官网</a>`</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS: Cascading Style Sheets-层叠样式表<br>CSS用于给HTML元素添加样式</p>
<p>在HTML中用link元素引入</p>
<p><code>&lt;link href=&quot;styles/style.css&quot; rel=&quot;stylesheet&quot; /&gt;</code></p>
<h3 id="规则集"><a href="#规则集" class="headerlink" title="规则集"></a>规则集</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="选择器-Selector"><a href="#选择器-Selector" class="headerlink" title="选择器(Selector)"></a>选择器(Selector)</h4><p>HTML元素的名称位于规则集的开始</p>
<h4 id="声明-Declaration"><a href="#声明-Declaration" class="headerlink" title="声明(Declaration)"></a>声明(Declaration)</h4><p>一个单独的规则, 如<code>color: red</code></p>
<h4 id="属性-Properties"><a href="#属性-Properties" class="headerlink" title="属性(Properties)"></a>属性(Properties)</h4><p>改变样式的方法, 如<code>color</code></p>
<h4 id="属性值-Properties-Value"><a href="#属性值-Properties-Value" class="headerlink" title="属性值(Properties Value)"></a>属性值(Properties Value)</h4><p>指定声明中属性的值</p>
<h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>CSS布局主要是基于Div</p>
<h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h4><p>内边距: div盒子中内容到border的空间</p>
<h4 id="border"><a href="#border" class="headerlink" title="border"></a>border</h4><p>边框: div盒子中有效区域边框线条</p>
<h4 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h4><p>外边距: div盒子中border到最外围的空间</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>为网站添加交互功能</p>
<p>在HTML中用script引入<br><code>&lt;script src=&quot;scripts/main.js&quot; defer&gt;&lt;/script&gt;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myHeading = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">myHeading.<span class="property">textContent</span> = <span class="string">&quot;Hello world!&quot;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>ToString</title>
    <url>/ToString.html</url>
    <content><![CDATA[<p>C# ToString数字格式<br><span id="more"></span></p>
<h2 id="ToString"><a href="#ToString" class="headerlink" title=".ToString"></a>.ToString</h2><p>常用格式</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">格式符</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">十进制数</td>
<td style="text-align:center">10.ToString(“D1”)</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">十进制数</td>
<td style="text-align:center">10.ToString(“D2”)</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">十进制数</td>
<td style="text-align:center">10.ToString(“D3”)</td>
<td style="text-align:center">010</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">十进制数</td>
<td style="text-align:center">10.ToString(“D5”)</td>
<td style="text-align:center">00010</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">浮点数</td>
<td style="text-align:center">10.ToString(“F1”)</td>
<td style="text-align:center">10.0</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">浮点数</td>
<td style="text-align:center">10.ToString(“F2”)</td>
<td style="text-align:center">10.00</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">十六进制数</td>
<td style="text-align:center">10.ToString(“X”)</td>
<td style="text-align:center">A</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">十六进制数</td>
<td style="text-align:center">10.ToString(“X1”)</td>
<td style="text-align:center">0A</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">十六进制数</td>
<td style="text-align:center">10.ToString(“X2”)</td>
<td style="text-align:center">00A</td>
</tr>
</tbody>
</table>
</div>
]]></content>
  </entry>
  <entry>
    <title>Git 添加gitignore后不起作用</title>
    <url>/Git-%E6%B7%BB%E5%8A%A0gitignore%E5%90%8E%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8.html</url>
    <content><![CDATA[<p>gitignore - Specifies intentionally untracked files to ignore<br><span id="more"></span></p>
<h2 id="gitignore官方文档"><a href="#gitignore官方文档" class="headerlink" title=".gitignore官方文档"></a>.gitignore官方文档</h2><p>A <code>gitignore</code> file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected<br>To stop tracking a file that is currently tracked, use <code>git rm --cached</code> to remove the file from the index. The filename can then be added to the <code>.gitignore</code> file to stop the file from being reintroduced in later commits.</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>.gitignore</code>文件只会作用于未跟踪(untracked)的文件，如果需要作用于已经跟踪(tracked)的文件，加入ignore文件时需要先停止跟踪(stop tracking)从暂存中删除才会生效</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update .gitignore&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>UDS DTC格式解析</title>
    <url>/UDS-DTC%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<p>UDS DTC故障码解析说明<br><span id="more"></span></p>
<h2 id="格式结构"><a href="#格式结构" class="headerlink" title="格式结构"></a>格式结构</h2><p>ISO 14229-1的故障诊断码格式规定, 故障码信息由四个字节组成: DTCHightByte,DTCMiddleByte,DTCLowByte,StatusofDTC<br>DTCHightByte,DTCMiddleByte两个字节表示故障内码, StatusofDTC表示故障码状态</p>
<table>
    <tr>
        <td colspan="8" style="text-align:center;">DTCHightByte</td>>
        <td colspan="8" style="text-align:center;">DTCMiddleByte</td>>
    </tr>
    <tr>
        <td style="text-align:center;">Bit7</td>
        <td style="text-align:center;">Bit6</td>
        <td style="text-align:center;">Bit5</td>
        <td style="text-align:center;">Bit4</td>
        <td style="text-align:center;">Bit3</td>
        <td style="text-align:center;">Bit2</td>
        <td style="text-align:center;">Bit1</td>
        <td style="text-align:center;">Bit0</td>
        <td style="text-align:center;">Bit7</td>
        <td style="text-align:center;">Bit6</td>
        <td style="text-align:center;">Bit5</td>
        <td style="text-align:center;">Bit4</td>
        <td style="text-align:center;">Bit3</td>
        <td style="text-align:center;">Bit2</td>
        <td style="text-align:center;">Bit1</td>
        <td style="text-align:center;">Bit0</td>
    </tr>
    <tr>
        <td colspan="2" style="text-align:center;">第一位</td>
        <td colspan="2" style="text-align:center;">第二位</td>
        <td colspan="4" style="text-align:center;">第三位</td>
        <td colspan="8" style="text-align:center;">第四五位</td>
    </tr>
</table>

<h3 id="故障内码"><a href="#故障内码" class="headerlink" title="故障内码"></a>故障内码</h3><p>故障内码由DTCHightByte,DTCMiddleByte两个字节解析出的5位字符组成</p>
<h4 id="第一位"><a href="#第一位" class="headerlink" title="第一位"></a>第一位</h4><p>由DTCHightByte高两位(Bit8Bit7)解析而来</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Bit7Bit6</th>
<th style="text-align:center">标准故障码字符</th>
<th style="text-align:center">所属系统</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00</td>
<td style="text-align:center">P</td>
<td style="text-align:center">Powertrain动力系统故障</td>
</tr>
<tr>
<td style="text-align:center">01</td>
<td style="text-align:center">C</td>
<td style="text-align:center">Chassis底盘故障</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">B</td>
<td style="text-align:center">Body车身故障</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">U</td>
<td style="text-align:center">Network and vehicle integration网络和车辆集成</td>
</tr>
</tbody>
</table>
</div>
<h4 id="第二位"><a href="#第二位" class="headerlink" title="第二位"></a>第二位</h4><p>第二位数字为0,1,2或3表示故障类型,由DTCHightByte的Bit6Bit5解析而来</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Bit5Bit4</th>
<th style="text-align:center">标准故障码字符</th>
<th style="text-align:center">故障类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00</td>
<td style="text-align:center">0</td>
<td style="text-align:center">ISO/SAE标准定义的故障码</td>
</tr>
<tr>
<td style="text-align:center">01</td>
<td style="text-align:center">1</td>
<td style="text-align:center">制造商自定义故障码</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">2</td>
<td style="text-align:center">ISO/SAE标准定义的故障码</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">3</td>
<td style="text-align:center">ISO/SAE保留</td>
</tr>
</tbody>
</table>
</div>
<h4 id="第三位"><a href="#第三位" class="headerlink" title="第三位"></a>第三位</h4><p>第三位字符表示故障所属子系统,由DTCHightByte的低四位解析而来</p>
<h4 id="第四五位"><a href="#第四五位" class="headerlink" title="第四五位"></a>第四五位</h4><p>最后两位表示具体故障对象和类型(hex)</p>
<h3 id="DTCLowByte"><a href="#DTCLowByte" class="headerlink" title="DTCLowByte"></a>DTCLowByte</h3><p>DTCLowByte描述故障种类和子类型(hex), 遵循ISO15031-6, 不需要该字节的DTC填充为0x00</p>
<h3 id="StatusofDTC"><a href="#StatusofDTC" class="headerlink" title="StatusofDTC"></a>StatusofDTC</h3><p>故障码状态位:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Bit</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">英文描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">当前故障</td>
<td style="text-align:center">testFailed</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">当前测试循环故障</td>
<td style="text-align:center">testFailedThisOperationCycle</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">待确定DTC</td>
<td style="text-align:center">pendingDTC</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">确认的DTC(历史故障)</td>
<td style="text-align:center">confirmedDTC</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">故障清除后测试没有完成</td>
<td style="text-align:center">testNotCompletedSinceLastClear</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">故障清除后测试失败</td>
<td style="text-align:center">testFailedSinceLastClear</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">当前操作循环没有完成</td>
<td style="text-align:center">testNotCompletedThisOperationCycle</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">故障指示请求</td>
<td style="text-align:center">warningIndicatorRequested</td>
</tr>
</tbody>
</table>
</div>
]]></content>
  </entry>
  <entry>
    <title>小米DSA状态字节定义</title>
    <url>/%E5%B0%8F%E7%B1%B3DSA%E7%8A%B6%E6%80%81%E5%AD%97%E8%8A%82%E5%AE%9A%E4%B9%89.html</url>
    <content><![CDATA[<p>小米DSA通讯部分说明<br><span id="more"></span></p>
<h2 id="四轮"><a href="#四轮" class="headerlink" title="四轮"></a>四轮</h2><h3 id="车型信息"><a href="#车型信息" class="headerlink" title="车型信息"></a>车型信息</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">ServiceID</th>
<th style="text-align:center">StartByte</th>
<th style="text-align:center">Length</th>
<th style="text-align:center">UserDefine</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">04</td>
<td style="text-align:center">23</td>
<td style="text-align:center">17</td>
<td style="text-align:center">VIN</td>
</tr>
<tr>
<td style="text-align:center">04</td>
<td style="text-align:center">12</td>
<td style="text-align:center">3</td>
<td style="text-align:center">ZTS</td>
</tr>
</tbody>
</table>
</div>
<h3 id="设备状态"><a href="#设备状态" class="headerlink" title="设备状态"></a>设备状态</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Byte</th>
<th style="text-align:center">bit</th>
<th style="text-align:left">UserDefine</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">1</td>
<td style="text-align:left">PLCFault(Communication_NCA_IN_System_Fault)或非自动模式(Communication_NCA_IN_System_AutoMode)或放弃测试按钮(Communication_NCA_IN_CycleAbort)</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">0</td>
<td style="text-align:left">四轮对中完成(Communication_NCA_IN_Centered)</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">1</td>
<td style="text-align:left">四轮测试完成标志位(System_BEP_NewData)</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">2</td>
<td style="text-align:left">轮眉测试完成标志位</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">3</td>
<td style="text-align:left">空悬标定完成滚筒启动后置位</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">4</td>
<td style="text-align:left">近光测试完成(Communication_NCA_IN_HLA*LowDone)</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">5</td>
<td style="text-align:left">远光测试完成(Communication_NCA_IN_HLA*HighDone)</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">6</td>
<td style="text-align:left">ADB测试完成(Communication_NCA_IN_HLA*ADBDone)</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">7</td>
<td style="text-align:left">四轮调整完成按钮信号(Communication_NCA_IN_CycleComplete)</td>
</tr>
</tbody>
</table>
</div>
<h2 id="ADAS"><a href="#ADAS" class="headerlink" title="ADAS"></a>ADAS</h2><h3 id="接收DSA信息"><a href="#接收DSA信息" class="headerlink" title="接收DSA信息"></a>接收DSA信息</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">ServiceID</th>
<th style="text-align:center">StartByte</th>
<th style="text-align:center">Length</th>
<th style="text-align:left">UserDefine</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">04</td>
<td style="text-align:center">8</td>
<td style="text-align:center">17</td>
<td style="text-align:left">VIN</td>
</tr>
<tr>
<td style="text-align:center">04</td>
<td style="text-align:center">25</td>
<td style="text-align:center">1</td>
<td style="text-align:left">ZTS</td>
</tr>
<tr>
<td style="text-align:center">0A</td>
<td style="text-align:center">8</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_ACC_TargetX</td>
</tr>
<tr>
<td style="text-align:center">0A</td>
<td style="text-align:center">10</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_ACC_TargetY</td>
</tr>
<tr>
<td style="text-align:center">0A</td>
<td style="text-align:center">12</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_ACC_TargetZ</td>
</tr>
<tr>
<td style="text-align:center">0D</td>
<td style="text-align:center">8</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_HUD_TargetX</td>
</tr>
<tr>
<td style="text-align:center">0D</td>
<td style="text-align:center">10</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_HUD_TargetY</td>
</tr>
<tr>
<td style="text-align:center">0D</td>
<td style="text-align:center">12</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_HUD_TargetZ</td>
</tr>
<tr>
<td style="text-align:center">0D</td>
<td style="text-align:center">14</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_HUD_TargetRX</td>
</tr>
<tr>
<td style="text-align:center">0D</td>
<td style="text-align:center">16</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_HUD_TargetRY</td>
</tr>
<tr>
<td style="text-align:center">0D</td>
<td style="text-align:center">18</td>
<td style="text-align:center">2</td>
<td style="text-align:left">CarParam_HUD_TargetRZ</td>
</tr>
</tbody>
</table>
</div>
<h3 id="设备状态-1"><a href="#设备状态-1" class="headerlink" title="设备状态"></a>设备状态</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Byte</th>
<th style="text-align:center">bit</th>
<th style="text-align:left">UserDefine</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">0</td>
<td style="text-align:left">Communication_FAS_IN_System_EStop</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">1</td>
<td style="text-align:left">Communication_FAS_IN_System_Fault</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
<td style="text-align:left">Communication_FAS_IN_System_AutoMode</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:left">!Communication_FAS_IN_System_AutoMode</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">7</td>
<td style="text-align:left">上述信号正常</td>
</tr>
</tbody>
</table>
</div>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><h3 id="四轮-1"><a href="#四轮-1" class="headerlink" title="四轮"></a>四轮</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_02_STOP</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ExecuteProAndCheckReturn(<span class="string">&quot;MainThread_Monitor_CancelTest&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_03_DeviceInit</span>()<span class="comment">//设备回初始状态</span></span></span><br><span class="line">&#123;</span><br><span class="line">    ExecuteProAndCheckReturn(<span class="string">&quot;MainThread_Monitor_CancelTest&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_04_VehicleInformation</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> sZTS = RecvData[<span class="number">12</span>].ToString() + RecvData[<span class="number">13</span>].ToString() + RecvData[<span class="number">14</span>].ToString(); <span class="comment">//GetString(12, 3);</span></span><br><span class="line">    Pt[<span class="string">&quot;CarParam_VIN&quot;</span>] = GetString(<span class="number">23</span>, <span class="number">17</span>);</span><br><span class="line">    Pt[<span class="string">&quot;CarParam_ZTS&quot;</span>] = sZTS;</span><br><span class="line">    <span class="comment">//CkProj(&quot;MainThread_Vehicle_SendToNCA&quot;);//IDT_SERVICE4</span></span><br><span class="line">    ExecutePlatTeam(<span class="string">&quot;MainThread_Vehicle_SendToNCA&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_05_TOE_F_Pre_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LFPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LFPreset_Result&quot;</span>].Value);<span class="comment">//确认是否有调整前判定</span></span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LFPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LFPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RFPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RFPreset_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RFPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RFPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SetValue(26, XmlFO.PubObjects[&quot;@NCA.Toe_FTotalPreset&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetResult(28, XmlFO.PubObjects[&quot;@NCA.Toe_FTotalPreset_Result&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(29, XmlFO.PubObjects[&quot;@NCA.Toe_FTotalPresetMax&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(31, XmlFO.PubObjects[&quot;@NCA.Toe_FTotalPresetMin&quot;].Value);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_06_TOE_R_Pre_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LRPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LRPreset_Result&quot;</span>].Value);<span class="comment">//确认是否有调整前判定</span></span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LRPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LRPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RRPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RRPreset_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RRPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RRPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SetValue(26, XmlFO.PubObjects[&quot;@NCA.Toe_RTotalPreset&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetResult(28, XmlFO.PubObjects[&quot;@NCA.Toe_RTotalPreset_Result&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(29, XmlFO.PubObjects[&quot;@NCA.Toe_RTotalPresetMax&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(31, XmlFO.PubObjects[&quot;@NCA.Toe_RTotalPresetMin&quot;].Value);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_07_TOE_F_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LF&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LFMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LFMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RF&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RFMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RFMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">26</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FTotal&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">28</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FTotal_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">29</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FTotalMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">31</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FTotalMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_08_TOE_R_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LR&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LR_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LRMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_LRMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RR&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RR_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RRMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RRMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">26</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RTotal&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">28</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RTotal_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">29</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RTotalMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">31</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RTotalMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_09_CAMBER_F_Pre_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LFPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LFPreset_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LFPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LFPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RFPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RFPreset_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RFPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RFPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SetValue(26, XmlFO.PubObjects[&quot;@NCA.Camber_FCrossPreset&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetResult(28, XmlFO.PubObjects[&quot;@NCA.Camber_FCross_Result&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(29, XmlFO.PubObjects[&quot;@NCA.Camber_FCrossPresetMax&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(31, XmlFO.PubObjects[&quot;@NCA.Camber_FCrossPresetMin&quot;].Value);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0A_CAMBER_R_Pre_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LRPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LRPreset_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LRPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LRPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RRPreset&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RRPreset_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RRPresetMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RRPresetMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SetValue(26, XmlFO.PubObjects[&quot;@NCA.Camber_RCrossPreset&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetResult(28, XmlFO.PubObjects[&quot;@NCA.Camber_RCross_Result&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(29, XmlFO.PubObjects[&quot;@NCA.Camber_RCrossPresetMax&quot;].Value);</span></span><br><span class="line">    <span class="comment">//SetValue(31, XmlFO.PubObjects[&quot;@NCA.Camber_RCrossPresetMin&quot;].Value);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0B_CAMBER_F_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LF&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LFMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LFMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RF&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RFMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RFMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">26</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_FCross&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">28</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_FCross_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">29</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_FCrossMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">31</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_FCrossMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0C_CAMBER_R_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LR&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LR_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LRMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_LRMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RR&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RR_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RRMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RRMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">26</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RCross&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">28</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RCross_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">29</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RCrossMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">31</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Camber_RCrossMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0D_ThrustSWA_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_R&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_R_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_RMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_RMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SWA&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SWA_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SWAMax&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SWAMin&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0E_Light_L_Low_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_Hor&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_Hor_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_HorMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_HorMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_Ver&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_Ver_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_VerMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_L_VerMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0F_Light_R_Low_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_Hor&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_Hor_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_HorMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_HorMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_Ver&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_Ver_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_VerMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.Low_R_VerMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_10_Light_L_High_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_Hor&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_Hor_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_HorMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_HorMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_Ver&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_Ver_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_VerMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_VerMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">26</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_Int&quot;</span>].Value, <span class="number">0.1</span>);</span><br><span class="line">    SetResult(<span class="number">28</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_Int_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">29</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_IntMax&quot;</span>].Value, <span class="number">0.1</span>);</span><br><span class="line">    SetValue(<span class="number">31</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_L_IntMin&quot;</span>].Value, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_11_Light_R_High_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_Hor&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_Hor_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_HorMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_HorMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_Ver&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_Ver_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_VerMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_VerMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">26</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_Int&quot;</span>].Value, <span class="number">0.1</span>);</span><br><span class="line">    SetResult(<span class="number">28</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_Int_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">29</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_IntMax&quot;</span>].Value, <span class="number">0.1</span>);</span><br><span class="line">    SetValue(<span class="number">31</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.High_R_IntMin&quot;</span>].Value, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_12_WBH_F_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.ListObject[<span class="string">&quot;Device_WBH_FL&quot;</span>].xValue, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">    SetValue(<span class="number">15</span>, <span class="number">0</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.ListObject[<span class="string">&quot;Device_WBH_FR&quot;</span>].xValue, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">    SetValue(<span class="number">22</span>, <span class="number">0</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_13_WBH_R_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.ListObject[<span class="string">&quot;Device_WBH_RL&quot;</span>].xValue, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">    SetValue(<span class="number">15</span>, <span class="number">0</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.ListObject[<span class="string">&quot;Device_WBH_RR&quot;</span>].xValue, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">    SetValue(<span class="number">22</span>, <span class="number">0</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_14_Weight_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@Weight.LF&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@Weight.RF&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">16</span>, XmlFO.PubObjects[<span class="string">&quot;@Weight.Front&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">18</span>, XmlFO.PubObjects[<span class="string">&quot;@Weight.LR&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">20</span>, XmlFO.PubObjects[<span class="string">&quot;@Weight.RR&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@Weight.Rear&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@Weight.Vehicle&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_15_Caster_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_LF&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_LF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_LFMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_LFMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_RF&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_RF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_RFMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Caster_RFMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SendData[<span class="number">26</span>] = (<span class="built_in">byte</span>)(XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_CasterEnable&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>) ? <span class="number">1</span> : <span class="number">0</span>); <span class="comment">//1表示抽检测试, 0表示不测试</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_16_Sai_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_LF&quot;</span>].Value, <span class="number">300</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_LF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_LFMax&quot;</span>].Value, <span class="number">300</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_LFMin&quot;</span>].Value, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_RF&quot;</span>].Value, <span class="number">300</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_RF_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_RFMax&quot;</span>].Value, <span class="number">300</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.SAI_RFMin&quot;</span>].Value, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    SendData[<span class="number">26</span>] = (<span class="built_in">byte</span>)(XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_CasterEnable&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>) ? <span class="number">1</span> : <span class="number">0</span>); <span class="comment">//1表示抽检测试, 0表示不测试</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_17_LTL_In_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_In&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_In_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_InMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_InMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_In&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_In_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_InMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_InMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转角差--看四轮数据中是否存在,存在直接接收,否则计算</span></span><br><span class="line">    <span class="comment">/*SetValue(26, XmlFO.PubObjects[&quot;@LTL.LF_Turn_In&quot;].Value);</span></span><br><span class="line"><span class="comment">    SetResult(28, XmlFO.PubObjects[&quot;@LTL.LF_Turn_In_Result&quot;].Value);</span></span><br><span class="line"><span class="comment">    SetValue(29, XmlFO.PubObjects[&quot;@LTL.LF_Turn_InMax&quot;].Value);</span></span><br><span class="line"><span class="comment">    SetValue(31, XmlFO.PubObjects[&quot;@LTL.LF_Turn_InMin&quot;].Value);*/</span></span><br><span class="line"></span><br><span class="line">    SendData[<span class="number">33</span>] = (<span class="built_in">byte</span>)(XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_L2LEnable&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>) ? <span class="number">1</span> : <span class="number">0</span>); <span class="comment">//1表示抽检测试, 0表示不测试</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_18_LTL_Out_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_Out&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_Out_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_OutMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.LF_Turn_OutMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_Out&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_Out_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_OutMax&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@LTL.RF_Turn_OutMin&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转角差</span></span><br><span class="line">    <span class="comment">/*SetValue(26, XmlFO.PubObjects[&quot;@LTL.LF_Turn_In&quot;].Value);</span></span><br><span class="line"><span class="comment">    SetResult(28, XmlFO.PubObjects[&quot;@LTL.LF_Turn_In_Result&quot;].Value);</span></span><br><span class="line"><span class="comment">    SetValue(29, XmlFO.PubObjects[&quot;@LTL.LF_Turn_InMax&quot;].Value);</span></span><br><span class="line"><span class="comment">    SetValue(31, XmlFO.PubObjects[&quot;@LTL.LF_Turn_InMin&quot;].Value);*/</span></span><br><span class="line"></span><br><span class="line">    SendData[<span class="number">33</span>] = (<span class="built_in">byte</span>)(XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_L2LEnable&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>) ? <span class="number">1</span> : <span class="number">0</span>); <span class="comment">//1表示抽检测试, 0表示不测试</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_19_WBHTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ((xDvBaseClient)XmlFO.ListObject[<span class="string">&quot;Communication_NCA_OUT_StopMotor&quot;</span>]).SetTrue(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    SendData[<span class="number">7</span>] &amp;= <span class="number">0xFB</span>;<span class="comment">//bit2置0</span></span><br><span class="line">    <span class="comment">//启动轮眉测量</span></span><br><span class="line">    ExecutePlatTeam(<span class="string">&quot;Device_StepItem_WBH&quot;</span>, () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        SetState(IDTState.OK);</span><br><span class="line">        SendData[<span class="number">7</span>] |= <span class="number">1</span> &lt;&lt; <span class="number">2</span>; <span class="comment">//轮眉测试标志位,收到25号服务置0,轮眉测试完置1</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空气悬架标定完成</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1A_ASUDone</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ((xDvBaseClient)XmlFO.ListObject[<span class="string">&quot;Communication_NCA_OUT_StopMotor&quot;</span>]).SetFalse(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    SendData[<span class="number">7</span>] |= <span class="number">1</span> &lt;&lt; <span class="number">3</span>; <span class="comment">//是否需要一直保持</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1B_HLA_LowBeamOn</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1C_HLA_FullBeamOn</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1D_ADB_On</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//((xDvBaseClient)XmlFO.ListObject[&quot;Communication_NCA_OUT_ADBReady&quot;]).SetTrue(&quot;&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1E_EPSTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将停止滚筒放在Always流程中调用</span></span><br><span class="line">    ExecutePlatTeam(<span class="string">&quot;Device_Public_DSA_StopRolls&quot;</span>);</span><br><span class="line">    ((xDvBaseClient)XmlFO.ListObject[<span class="string">&quot;Communication_NCA_OUT_StopMotor&quot;</span>]).SetTrue(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1F_EPSTestDone</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ((xDvBaseClient)XmlFO.ListObject[<span class="string">&quot;Communication_NCA_OUT_StopMotor&quot;</span>]).SetFalse(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_20_HEAD_ADB_Left_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Hor&quot;</span>].Value, <span class="number">100</span>);<span class="comment">//LeftEmaxX</span></span><br><span class="line">    SetValue(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Hor_SetPoint&quot;</span>].Value, <span class="number">100</span>);<span class="comment">//LeftEmaxY</span></span><br><span class="line">    SetValue(<span class="number">16</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Hor_Max&quot;</span>].Value, <span class="number">100</span>);<span class="comment">//LeftP0X</span></span><br><span class="line">    SetValue(<span class="number">18</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Hor_Min&quot;</span>].Value, <span class="number">100</span>);<span class="comment">//LeftP0Y</span></span><br><span class="line">    SetValue(<span class="number">20</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Hor_Offset&quot;</span>].Value, <span class="number">100</span>);<span class="comment">//LeftP1X</span></span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Hor_Module_Offset&quot;</span>].Value, <span class="number">100</span>);<span class="comment">//LeftP1Y</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_21_HEAD_ADB_Right_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Ver&quot;</span>].Value, <span class="number">100</span>);<span class="comment">//Right</span></span><br><span class="line">    SetValue(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Ver_SetPoint&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">    SetValue(<span class="number">16</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Ver_Max&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">    SetValue(<span class="number">18</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Ver_Min&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">    SetValue(<span class="number">20</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Ver_Offset&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@HLA.DASM_Ver_Module_Offset&quot;</span>].Value, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_22_TOECross_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FCross&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FCross_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">15</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FCrossMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">17</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_FCrossMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">19</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RCross&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">21</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RCross_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">22</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RCrossMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">24</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Toe_RCrossMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    SetValue(<span class="number">26</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_F&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetResult(<span class="number">28</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_F_Result&quot;</span>].Value);</span><br><span class="line">    SetValue(<span class="number">29</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_FMax&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">    SetValue(<span class="number">31</span>, XmlFO.PubObjects[<span class="string">&quot;@NCA.Thrust_FMin&quot;</span>].Value, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SendBeforeHandle</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Byte5 bit0:急停 bit1:fault bit4:Automode bit5:Manualmode bit6:calmode bit7:ready</span></span><br><span class="line">    <span class="built_in">int</span> byte5 = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">//bool ems = Pt[&quot;Communication_NCA_IN_System_EStop&quot;].zString().StartsWith(&quot;T&quot;);</span></span><br><span class="line">    <span class="built_in">bool</span> fault = Pt[<span class="string">&quot;Communication_NCA_IN_System_Fault&quot;</span>].zString().StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> automode = Pt[<span class="string">&quot;Communication_NCA_IN_System_AutoMode&quot;</span>].zString().StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> centered = Pt[<span class="string">&quot;Communication_NCA_IN_Centered&quot;</span>].zString().StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> abort = Pt[<span class="string">&quot;Communication_NCA_IN_CycleAbort&quot;</span>].zString().StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//byte5 = ems ? (byte5 | (1 &lt;&lt; 0)) : byte5;</span></span><br><span class="line">    byte5 = fault || !automode || abort ? (byte5 | (<span class="number">1</span> &lt;&lt; <span class="number">1</span>)) : byte5;</span><br><span class="line">    SendData[<span class="number">5</span>] = (<span class="built_in">byte</span>)byte5;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> byte7 = <span class="number">0x00</span>;</span><br><span class="line">    <span class="built_in">bool</span> bepNewData = Pt[<span class="string">&quot;System_BEP_NewData&quot;</span>].zString().StartsWith(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">    byte7 = centered ? (byte7 | (<span class="number">1</span> &lt;&lt; <span class="number">0</span>)) : byte7; <span class="comment">//四轮对中完成</span></span><br><span class="line">    byte7 = bepNewData ? (byte7 | (<span class="number">1</span> &lt;&lt; <span class="number">1</span>)) : byte7; <span class="comment">//四轮调整完成标志位</span></span><br><span class="line">    SendData[<span class="number">7</span>] |= (<span class="built_in">byte</span>)byte7;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> ADB</span></span><br><span class="line">    <span class="built_in">bool</span> hlaLeftLow = XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_HLALeftLowDone&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> hlaRightLow = XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_HLARightLowDone&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> hlaLeftHigh = XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_HLALeftHighDone&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> hlaRightHigh = XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_HLARightHighDone&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> hlaLeftADB = XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_HLALeftADBDone&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> hlaRightADB = XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_HLARightADBDone&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    SendData[<span class="number">7</span>] |= (<span class="built_in">byte</span>)(!(hlaLeftLow || hlaRightLow) ? <span class="number">0x01</span> &lt;&lt; <span class="number">4</span> : <span class="number">0x00</span>);<span class="comment">//近光测试完成</span></span><br><span class="line">    SendData[<span class="number">7</span>] |= (<span class="built_in">byte</span>)(!(hlaLeftHigh || hlaRightHigh) ? <span class="number">0x01</span> &lt;&lt; <span class="number">5</span> : <span class="number">0x00</span>);<span class="comment">//远光测试完成</span></span><br><span class="line">    SendData[<span class="number">7</span>] |= (<span class="built_in">byte</span>)(!(hlaLeftADB || hlaRightADB) ? <span class="number">0x01</span> &lt;&lt; <span class="number">6</span> : <span class="number">0x00</span>);<span class="comment">//ADB测试完成</span></span><br><span class="line">    SendData[<span class="number">7</span>] |= (<span class="built_in">byte</span>)(XmlFO.ListObject[<span class="string">&quot;Communication_NCA_IN_CycleComplete&quot;</span>].xValue.StartsWith(<span class="string">&quot;T&quot;</span>) ? <span class="number">0x01</span> &lt;&lt; <span class="number">7</span> : <span class="number">0x00</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">byte</span> xor = <span class="number">0x00</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; (SendData.Length - <span class="number">2</span>); i++)</span><br><span class="line">        xor ^= SendData[i];</span><br><span class="line">    SendData[SendData.Length - <span class="number">2</span>] = xor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetResult</span>(<span class="params"><span class="built_in">int</span> index, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> sval = Convert.ToString(<span class="keyword">value</span>).ToUpper();</span><br><span class="line">    <span class="keyword">switch</span>(sval)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">            SendData[index] = <span class="number">0x01</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;T&quot;</span>:</span><br><span class="line">            SendData[index] = <span class="number">0x01</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;P&quot;</span>:</span><br><span class="line">            SendData[index] = <span class="number">0x01</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;N&quot;</span>:</span><br><span class="line">            SendData[index] = <span class="number">0x00</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;F&quot;</span>:</span><br><span class="line">            SendData[index] = <span class="number">0x00</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            SendData[index] = <span class="number">0x01</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ADAS-1"><a href="#ADAS-1" class="headerlink" title="ADAS"></a>ADAS</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0E_VehicleInformation</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> sZTS = RecvData[<span class="number">25</span>].ToString();</span><br><span class="line">        <span class="built_in">string</span> sVIN = GetString(<span class="number">8</span>, <span class="number">17</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_VIN&quot;</span>] = sVIN;</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_ZTS&quot;</span>] = sZTS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_07_DeviceReturnHome</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ExecutePlatTeam(<span class="string">&quot;MainThread_Monitor_CancelTest&quot;</span>, <span class="string">&quot;Communication_IDT_PlatReturnHomeStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0A_ACCBoardMove</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_ACC_TargetX&quot;</span>] = GetValue(<span class="number">8</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_ACC_TargetY&quot;</span>] = GetValue(<span class="number">10</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_ACC_TargetZ&quot;</span>] = GetValue(<span class="number">12</span>);</span><br><span class="line">        ExecutePlatTeam(<span class="string">&quot;Device_FAS_ACC_设备就位&quot;</span>, <span class="string">&quot;Communication_IDT_PlatACCMoveStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0B_ACCBoardReturnHome</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ExecutePlatTeam(<span class="string">&quot;Device_FAS_ACC_设备回位&quot;</span>, <span class="string">&quot;Communication_IDT_PlatACCReturnHomeStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0C_Center</span>()<span class="comment">//协议中未定义</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//if (RecvData[12] == 0x01 &amp;&amp; RecvData[13] == 0x01)</span></span><br><span class="line">        <span class="comment">//CkProj(&quot;Device_FAS_摆正器_设备就位&quot;);</span></span><br><span class="line">        <span class="comment">//if (RecvData[12] == 0x00 &amp;&amp; RecvData[13] == 0x00)</span></span><br><span class="line">        <span class="comment">//CkProj(&quot;Device_FAS_摆正器_设备回位&quot;);</span></span><br><span class="line">        ExecutePlatTeam(<span class="string">&quot;Device_FAS_摆正器_设备就位&quot;</span>, <span class="string">&quot;Communication_IDT_PlatCenterStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0D_RobotMove</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_HUD_Route&quot;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_HUD_TargetX&quot;</span>] = GetValue(<span class="number">8</span>, <span class="number">0.1</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_HUD_TargetY&quot;</span>] = GetValue(<span class="number">10</span>, <span class="number">0.1</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_HUD_TargetZ&quot;</span>] = GetValue(<span class="number">12</span>, <span class="number">0.1</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_HUD_TargetRX&quot;</span>] = GetValue(<span class="number">14</span>, <span class="number">0.001</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_HUD_TargetRY&quot;</span>] = GetValue(<span class="number">16</span>, <span class="number">0.001</span>);</span><br><span class="line">        Pt[<span class="string">&quot;CarParam_HUD_TargetRZ&quot;</span>] = GetValue(<span class="number">18</span>, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line">        ExecutePlatTeam(<span class="string">&quot;Device_FAS_HUD_设备就位&quot;</span>, <span class="string">&quot;Communication_IDT_PlatRobotMoveStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_0F_WBH_Result</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ExecutePlatTeam(<span class="string">&quot;Device_StepItem_WBH&quot;</span>, <span class="string">&quot;Communication_IDT_PlatWBHStatus&quot;</span>, () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        SetState(IDTState.OK);</span><br><span class="line"></span><br><span class="line">        SetValue(<span class="number">12</span>, XmlFO.PubObjects[<span class="string">&quot;@WBHTest.WBH_FL&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">        SetResult(<span class="number">20</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">        SetValue(<span class="number">14</span>, XmlFO.PubObjects[<span class="string">&quot;@WBHTest.WBH_FR&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">        SetResult(<span class="number">21</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">        SetValue(<span class="number">16</span>, XmlFO.PubObjects[<span class="string">&quot;@WBHTest.WBH_RL&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">        SetResult(<span class="number">22</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">        SetValue(<span class="number">18</span>, XmlFO.PubObjects[<span class="string">&quot;@WBHTest.WBH_RR&quot;</span>].Value, <span class="number">10</span>);</span><br><span class="line">        SetResult(<span class="number">23</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Byte 07</span></span><br><span class="line"><span class="comment">//BIT0: 改位置 1 表示 BBK LDA 测量结束</span></span><br><span class="line"><span class="comment">//BIT1: 改位置 1 表示 BBK 畸变测量结束</span></span><br><span class="line"><span class="comment">//BIT2: 改位置 1 表示 BBK FOV 测量结束</span></span><br><span class="line"><span class="comment">//BIT3: 改位置 1 表示 BBK 重影测量结束</span></span><br><span class="line"><span class="comment">//BIT4: 改位置 1 表示 BBK VID 测量结束</span></span><br><span class="line"><span class="comment">//BIT5: 改位置 1 表示 BBK LOA 测量结束</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_10_LDA</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        HUDTestServiceHandle(<span class="number">0</span>, <span class="string">&quot;Device_FAS_HUD_LDA&quot;</span>, <span class="string">&quot;Communication_IDT_PlatLDAStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_11_LDAResult</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetResult(<span class="number">10</span>, zjHUD.ValueLDA.bResult);</span><br><span class="line">        SetResult(<span class="number">11</span>, zjHUD.ValueLDACalibrable.bResult);</span><br><span class="line">        SetValue(<span class="number">12</span>, zjHUD.ValueLDAOffset.Value);</span><br><span class="line">        SetValue(<span class="number">14</span>, zjHUD.ValueLDA.Value.Value, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Byte 07 BIT1: 改位置 1 表示 BBK 畸变 测量结束</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_12_Distortion</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//zjHUD.eyeBoxPos = &quot;M&quot;;</span></span><br><span class="line">        HUDTestServiceHandle(<span class="number">1</span>, <span class="string">&quot;Device_FAS_HUD_Distortion&quot;</span>, <span class="string">&quot;Communication_IDT_PlatDistortionStatus&quot;</span>);</span><br><span class="line">        <span class="comment">//HUDTestServiceHandle(1, &quot;Device_FAS_HUD_RotateAngle&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_13_DistortionResult</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetResult(<span class="number">10</span>, zjHUD.ValueDistortion.bResult &amp;&amp;</span><br><span class="line">                      zjHUD.ValueDistortionMaxH.bResult &amp;&amp;</span><br><span class="line">                      zjHUD.ValueDistortionMaxV.bResult &amp;&amp;</span><br><span class="line">                      zjHUD.ValueDistortionRotation.bResult);</span><br><span class="line">        SetResult(<span class="number">11</span>, zjHUD.ValueDistortionHCalibrable.bResult &amp;&amp;</span><br><span class="line">                       zjHUD.ValueDistortionVCalibrable.bResult &amp;&amp;</span><br><span class="line">                       zjHUD.ValueDistortionRCalibrable.bResult);</span><br><span class="line">        SetValue(<span class="number">12</span>, zjHUD.ValueDistortionMaxH.Value.Value, <span class="number">100</span>);</span><br><span class="line">        SetValue(<span class="number">14</span>, zjHUD.ValueDistortionMaxV.Value.Value, <span class="number">100</span>);</span><br><span class="line">        SetValue(<span class="number">16</span>, zjHUD.ValueDistortionRotation.Value.Value, <span class="number">100</span>);</span><br><span class="line">        SetValue(<span class="number">18</span>, zjHUD.ValueDistortion.Value.Value, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 畸变刷写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_14_DistortionParam1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Array.Copy(zjHUD.warpParamMsg, <span class="number">0</span>, SendData, <span class="number">12</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_15_DistortionParam2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Array.Copy(zjHUD.warpParamMsg, <span class="number">25</span>, SendData, <span class="number">12</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_16_DistortionParam3</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Array.Copy(zjHUD.warpParamMsg, <span class="number">50</span>, SendData, <span class="number">12</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_17_DistortionParam4</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Array.Copy(zjHUD.warpParamMsg, <span class="number">75</span>, SendData, <span class="number">12</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_18_DistortionParam5</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Array.Copy(zjHUD.warpParamMsg, <span class="number">100</span>, SendData, <span class="number">12</span>, <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_19_FOVTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//zjHUD.eyeBoxPos = &quot;M&quot;;</span></span><br><span class="line">        HUDTestServiceHandle(<span class="number">2</span>, <span class="string">&quot;Device_FAS_HUD_FOV&quot;</span>, <span class="string">&quot;Communication_IDT_PlatFOVStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1A_FOVResult</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetResult(<span class="number">10</span>, zjHUD.ValueHorFOVDistance.bResult &amp;&amp; zjHUD.ValueVerFOVDistance.bResult);</span><br><span class="line">        SetValue(<span class="number">12</span>, zjHUD.ValueHorFOVDistance.Value.Value, <span class="number">10</span>);</span><br><span class="line">        SetValue(<span class="number">14</span>, zjHUD.ValueVerFOVDistance.Value.Value, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1B_GhostTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (RecvData[<span class="number">8</span>] == <span class="number">0x00</span>)</span><br><span class="line">            zjHUD.EyeBoxPos.Value = <span class="string">&quot;Top&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (RecvData[<span class="number">8</span>] == <span class="number">0x01</span>)</span><br><span class="line">            zjHUD.EyeBoxPos.Value = <span class="string">&quot;Mid&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (RecvData[<span class="number">8</span>] == <span class="number">0x02</span>)</span><br><span class="line">            zjHUD.EyeBoxPos.Value = <span class="string">&quot;Bot&quot;</span>;</span><br><span class="line">        HUDTestServiceHandle(<span class="number">3</span>, <span class="string">&quot;Device_FAS_HUD_Ghost&quot;</span>, <span class="string">&quot;Communication_IDT_PlatGhostStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1C_GhostResult</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetResult(<span class="number">10</span>, zjHUD.ValueGhost.bResult);</span><br><span class="line">        SetValue(<span class="number">12</span>, zjHUD.ValueGhost.Value.Value, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1D_VIDTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        HUDTestServiceHandle(<span class="number">4</span>, <span class="string">&quot;Device_FAS_HUD_Distance&quot;</span>, <span class="string">&quot;Communication_IDT_PlatDistanceStatus&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1E_VIDResult</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetResult(<span class="number">10</span>, zjHUD.ValueDistance.bResult);</span><br><span class="line">        SetValue(<span class="number">12</span>, zjHUD.ValueDistance.Value.Value, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_1F_LOATest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//TestServiceHandle(4, &quot;Device_FAS_HUD_Distance&quot;);//FOV中测试完成</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IDT_SERVICE_20_LOAResult</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetResult(<span class="number">10</span>, zjHUD.ValueLLA.Result.Value);</span><br><span class="line">        SetValue(<span class="number">12</span>, zjHUD.ValueLLA.Value.Value, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log(ex.ToString());</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HUDTestServiceHandle</span>(<span class="params"><span class="built_in">int</span> bits, <span class="built_in">string</span> proName, <span class="built_in">string</span> checkObject</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span> shift = <span class="number">0x01</span>;</span><br><span class="line">    SendData[<span class="number">7</span>] &amp;= (<span class="built_in">byte</span>)~(shift &lt;&lt; bits);</span><br><span class="line">    ExecutePlatTeam(proName, checkObject, () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        SetState(IDTState.OK);</span><br><span class="line">        SendData[<span class="number">7</span>] |= (<span class="built_in">byte</span>)(shift &lt;&lt; bits);</span><br><span class="line">    &#125;, () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        SetState(IDTState.NOK);</span><br><span class="line">        SendData[<span class="number">7</span>] |= (<span class="built_in">byte</span>)(shift &lt;&lt; bits);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SendBeforeHandle</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Byte5 bit0:急停 bit1:fault bit4:Automode bit5:Manualmode bit6:calmode bit7:ready</span></span><br><span class="line">    <span class="built_in">int</span> byte5 = <span class="number">0x00</span>;</span><br><span class="line">    <span class="built_in">bool</span> ems = Pt[<span class="string">&quot;Communication_FAS_IN_System_EStop&quot;</span>].zString().StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> fault = Pt[<span class="string">&quot;Communication_FAS_IN_System_Fault&quot;</span>].zString().StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> autoMode = Pt[<span class="string">&quot;Communication_FAS_IN_System_AutoMode&quot;</span>].zString().StartsWith(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">    <span class="built_in">bool</span> ready = !ems &amp;&amp; !fault &amp;&amp; autoMode;</span><br><span class="line"></span><br><span class="line">    byte5 = ems ? (byte5 | (<span class="number">1</span> &lt;&lt; <span class="number">0</span>)) : byte5;</span><br><span class="line">    byte5 = fault ? (byte5 | (<span class="number">1</span> &lt;&lt; <span class="number">1</span>)) : byte5;</span><br><span class="line">    byte5 = autoMode ? (byte5 | (<span class="number">1</span> &lt;&lt; <span class="number">4</span>)) : byte5;</span><br><span class="line">    byte5 = !autoMode ? (byte5 | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>)) : byte5;</span><br><span class="line">    byte5 = ready ? (byte5 | (<span class="number">1</span> &lt;&lt; <span class="number">7</span>)) : byte5;</span><br><span class="line">    SendData[<span class="number">5</span>] = (<span class="built_in">byte</span>)byte5;</span><br><span class="line">    <span class="comment">//8-11 车型信息--未知</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//12-13 前后对中状态</span></span><br><span class="line">    <span class="comment">//RecvData[12] = RecvData[13] = (byte)(Pt[&quot;Communication_FAS_IN_Center_TestPos&quot;].zString().StartsWith(&quot;T&quot;) ? 0x01 : 0x00);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//17-18 PLC心跳</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//21-24 坐标信息</span></span><br><span class="line">    <span class="comment">//SetValue(20, Pt[&quot;Communication_FAS_IN_ACC_XDirection_CurrentValue&quot;]);</span></span><br><span class="line">    <span class="comment">//SetValue(21, Pt[&quot;Communication_FAS_IN_ACC_Hori_CurrentValue&quot;]);</span></span><br><span class="line">    <span class="comment">//SetValue(22, Pt[&quot;Communication_FAS_IN_ACC_Vertical_CurrentValue&quot;]);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">byte</span> xor = <span class="number">0x00</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; (SendData.Length - <span class="number">2</span>); i++)</span><br><span class="line">        xor ^= SendData[i];</span><br><span class="line">    SendData[SendData.Length - <span class="number">2</span>] = xor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetResult</span>(<span class="params"><span class="built_in">int</span> index, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> sval = Convert.ToString(<span class="keyword">value</span>).ToUpper();</span><br><span class="line">    <span class="keyword">if</span> (sval.StartsWith(<span class="string">&quot;Y&quot;</span>))</span><br><span class="line">        SendData[index] = <span class="number">0x01</span>;</span><br><span class="line">    <span class="keyword">if</span> (sval.StartsWith(<span class="string">&quot;T&quot;</span>))</span><br><span class="line">        SendData[index] = <span class="number">0x01</span>;</span><br><span class="line">    <span class="keyword">if</span> (sval.StartsWith(<span class="string">&quot;N&quot;</span>))</span><br><span class="line">        SendData[index] = <span class="number">0x00</span>;</span><br><span class="line">    <span class="keyword">if</span> (sval.StartsWith(<span class="string">&quot;F&quot;</span>))</span><br><span class="line">        SendData[index] = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统</title>
    <url>/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>分布式系统是其组件分布在连网的计算机上, 组件之间通过传递消息进行通讯和动作协调的系统<br>具有组件的并发性.缺乏全局时钟.组件故障独立性的特征</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构</title>
    <url>/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84.html</url>
    <content><![CDATA[<p>软件架构入门笔记<br><span id="more"></span></p>
<h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><p>常见: 展示层-&gt;业务层-&gt;数据层</p>
<h2 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h2><p>事件驱动架构模式是⼀一种主流的异步分发事件架构模式，常⽤用于设计⾼高度可拓展的应⽤</p>
<p>中介拓扑模式, 代理拓扑模式</p>
<h2 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h2><p>插件化应用架构</p>
<p>核心系统, 插件模块</p>
<h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>是一种分布式架构<br>常见的有: 基于REST API的拓扑结构, 基于REST的应用拓扑结构, 集中式消息拓扑结构</p>
<h2 id="基于空间的架构"><a href="#基于空间的架构" class="headerlink" title="基于空间的架构"></a>基于空间的架构</h2><p>云架构模型</p>
]]></content>
  </entry>
  <entry>
    <title>Git拆分仓库</title>
    <url>/Git%E6%8B%86%E5%88%86%E4%BB%93%E5%BA%93.html</url>
    <content><![CDATA[<p>将功能复杂的版本库拆分为功能单一的版本库并保存所有相关提交信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># project</span></span><br><span class="line">git subtree <span class="built_in">split</span> -P &lt;name-of-folder&gt; -b &lt;name-of-new-branch&gt;</span><br><span class="line">git subtree <span class="built_in">split</span> -P Project/Pro1 -b Project1</span><br><span class="line"></span><br><span class="line"><span class="comment"># subProject</span></span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;分离仓库&quot;</span></span><br><span class="line"></span><br><span class="line">git pull ../ Project1</span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>比如, Project版本库中存在Pro1和Pro2两个项目文件, 现在我们要将Pro1项目拆分到单独的版本库中进行维护, 并且要保留原有提交信息</p>
<p>文件路径如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:.</span><br><span class="line">├─Project</span><br><span class="line">│  └─Pro1</span><br><span class="line">│     └─File1</span><br><span class="line">│     └─File2</span><br><span class="line">│  └─Pro2</span><br><span class="line">│     └─File1</span><br><span class="line">│     └─File2</span><br></pre></td></tr></table></figure>
<h2 id="1-分离相关提交到新建分支"><a href="#1-分离相关提交到新建分支" class="headerlink" title="1.分离相关提交到新建分支"></a>1.分离相关提交到新建分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Project中执行</span></span><br><span class="line"><span class="comment"># &lt;name-of-folder&gt; : 要拆分出来的文件夹</span></span><br><span class="line"><span class="comment"># &lt;name-of-new-branch&gt; : 分离提交到新建分支</span></span><br><span class="line">git subtree <span class="built_in">split</span> -P &lt;name-of-folder&gt; -b &lt;name-of-new-branch&gt;</span><br><span class="line">git subtree <span class="built_in">split</span> -P Pro1 -b Project1</span><br></pre></td></tr></table></figure>
<h2 id="2-提取分离后的分支"><a href="#2-提取分离后的分支" class="headerlink" title="2.提取分离后的分支"></a>2.提取分离后的分支</h2><h3 id="2-1在新路径保存分支"><a href="#2-1在新路径保存分支" class="headerlink" title="2.1在新路径保存分支"></a>2.1在新路径保存分支</h3><p>在合适位置新建文件夹后初始化Git, 然后拉取刚才新建的Project1分支即可<br>查看git log</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;path-of-Project&gt; : 步骤1中创建分支所在的路径, 即Project</span></span><br><span class="line"><span class="comment"># &lt;name-of-new-branch&gt; : 分离后新建分支名</span></span><br><span class="line">git pull &lt;path-of-Project&gt; &lt;name-of-new-branch&gt;</span><br><span class="line">git pull &lt;path-of-Project&gt; Project1</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2在Pro1中初始化Git-不更改原文件夹结构"><a href="#2-2在Pro1中初始化Git-不更改原文件夹结构" class="headerlink" title="2.2在Pro1中初始化Git, 不更改原文件夹结构"></a>2.2在Pro1中初始化Git, 不更改原文件夹结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Pro1中执行</span></span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br><span class="line"></span><br><span class="line">git pull .. Project1</span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HUD机器人标定及验证</title>
    <url>/HUD%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%A7%92%E5%BA%A6%E9%AA%8C%E8%AF%81%E7%AE%97%E6%B3%95.html</url>
    <content><![CDATA[<p>HUD相机标定完成后辅助调节机器人角度时角度的计算方法<br><span id="more"></span></p>
<h2 id="坐标系说明"><a href="#坐标系说明" class="headerlink" title="坐标系说明"></a>坐标系说明</h2><h3 id="车辆坐标系"><a href="#车辆坐标系" class="headerlink" title="车辆坐标系"></a>车辆坐标系</h3><p><img src="HUD机器人角度验证算法/X-Z.png" alt="X-Z"><br><img src="HUD机器人角度验证算法/X-Y.png" alt="X-Y"><br><img src="HUD机器人角度验证算法/Y-Z.png" alt="Y-Z"></p>
<h2 id="标定说明"><a href="#标定说明" class="headerlink" title="标定说明"></a>标定说明</h2><ol>
<li>根据标靶四孔的三坐标计算出标靶中心坐标$O$</li>
<li>相机走到与$O$点相同的$YZ$坐标处, 保证相机中心与$O$点在同一轴线上</li>
<li>将标靶左上角圆孔中心坐标填入<strong>标定点.Point3DXYZ</strong>中</li>
<li>测量相机感光芯片到标靶的距离填入<strong>特征点.DotDistance</strong>中</li>
<li>调整相机角度使得图像中心十字位于标靶中心$O$处, 且目测图像角度偏差不大</li>
<li>拍照识别四个圆孔</li>
<li>标定内外参</li>
<li>将ROI框住某个圆孔点击标定验证, 查看输出角度进行微调后重复567步, 直到输出满足要求</li>
<li>若角度偏差大但图像很正, 可能是坐标参数的输入有问题</li>
<li>若某个点的偏移量大, 可适当调整曝光使识别更准确后再验证</li>
</ol>
<h2 id="图像说明"><a href="#图像说明" class="headerlink" title="图像说明"></a>图像说明</h2><p><img src="HUD机器人角度验证算法/HUDCalResult1.PNG" alt="标定结果图1"><br><img src="HUD机器人角度验证算法/HUDCalResult2.PNG" alt="标定结果图2"><br><img src="HUD机器人角度验证算法/HUDVerify.PNG" alt="标定验证"><br><img src="HUD机器人角度验证算法/HUDVerifyWithPCenter.PNG" alt="标定验证输出PCenter"><br><img src="HUD机器人角度验证算法/HUDVerifyCtrlByPC.PNG" alt="PC控制运动到标定点验证"></p>
<p>左上角为P1,右上角为P3<br>左下角为P7,右下角为P9</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">PointF3D Point3d = CameraAgorithm.Pixel2World(p, Camera, Camera.Extrinsics_Tz_mm - Camera.Point3DZ);</span><br><span class="line"></span><br><span class="line">PointF3D P1 = CameraAgorithm.Pixel2World(_calibrationAgorithm.DotLeftTop, Camera, Camera.Extrinsics_Tz_mm - Camera.Point3DZ);</span><br><span class="line">PointF3D P3 = CameraAgorithm.Pixel2World(_calibrationAgorithm.DotRightTop, Camera, Camera.Extrinsics_Tz_mm - Camera.Point3DZ);</span><br><span class="line">PointF3D P7 = CameraAgorithm.Pixel2World(_calibrationAgorithm.DotLeftBottom, Camera, Camera.Extrinsics_Tz_mm - Camera.Point3DZ);</span><br><span class="line">PointF3D P9 = CameraAgorithm.Pixel2World(_calibrationAgorithm.DotRightBottom, Camera, Camera.Extrinsics_Tz_mm - Camera.Point3DZ);</span><br><span class="line"></span><br><span class="line"><span class="comment">//PCenter为图像中心点坐标在世界坐标系中的点</span></span><br><span class="line"><span class="comment">//PCenter.P_X=&gt;车辆坐标系的Y</span></span><br><span class="line"><span class="comment">//PCenter.P_Y=&gt;车辆坐标系的Z</span></span><br><span class="line"><span class="comment">//PCenter.P_Z=&gt;车辆坐标系的X</span></span><br><span class="line"><span class="comment">//Camera.Point3DX=&gt;车辆坐标系的Y</span></span><br><span class="line"><span class="comment">//Camera.Point3DY=&gt;车辆坐标系的Z</span></span><br><span class="line"><span class="comment">//Camera.Point3DZ=&gt;车辆坐标系的X</span></span><br><span class="line">PointF3D PCenter = CameraAgorithm.Pixel2World(<span class="keyword">new</span> PointF(Camera.PixelWidth/<span class="number">2</span>,Camera.PixelHeight/<span class="number">2</span>), Camera, Camera.Extrinsics_Tz_mm - Camera.Point3DZ);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面两点的倾斜度</span></span><br><span class="line"><span class="built_in">double</span> RX = Math.Atan((P3.P_Y - P1.P_Y) / (P3.P_X - P1.P_X)) * <span class="number">180</span> / Math.PI;</span><br><span class="line"><span class="comment">//图像中心相对相机中心(机器人坐标)水平方向偏移</span></span><br><span class="line"><span class="built_in">double</span> RY = Math.Atan(((PCenter.P_X - m_Motion.Data_YPos.xValue.zFloat())) / (Camera.Extrinsics_Tz_mm - Camera.Point3DZ)) * <span class="number">180</span> / Math.PI;</span><br><span class="line"><span class="comment">//图像中心相对相机中心(机器人坐标)竖直方向偏移</span></span><br><span class="line"><span class="built_in">double</span> RZ = Math.Atan(((PCenter.P_Y - m_Motion.Data_ZPos.xValue.zFloat())) / (Camera.Extrinsics_Tz_mm - Camera.Point3DZ)) * <span class="number">180</span> / Math.PI;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>3D轮眉相机软件解读</title>
    <url>/3D%E8%BD%AE%E7%9C%89%E7%9B%B8%E6%9C%BA%E8%BD%AF%E4%BB%B6%E8%A7%A3%E8%AF%BB.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="13c5a61bf43a3a563d9380769ce9932e028d8161033f169c0b86714ee53cf478"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>BBK</tag>
        <tag>轮眉</tag>
      </tags>
  </entry>
  <entry>
    <title>3D轮眉标定</title>
    <url>/3D%E8%BD%AE%E7%9C%89%E6%A0%87%E5%AE%9A.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3c1f2425cea97bf562d6599cb18960e7c35c0a1627bc59441b5818104d0036bc">2a136ff4e8d63812c42116b4c696cbbd091db5544a6db7ba2d81ddbb1250c4d7d797267d2260e5c9a7c7302d4cf8d2d00c2d5b63c758dd13ca598717f74002aa80508256bff4b68aed8392ab9260fe2c61abdb3defeb2e80fa8ae0bdf1eeb642cbf81a8fb42eeaf3c4bbda58ef0c62b19c4df19c8c149b7532c34c7b01d36b18f2ac2109fb2dd5852b71a0f58140cb6d0aab40d588db1d7dc5f7cd1acec0d262a883d9dbc5a9c6d31a47fbf1f60e9e16d1cbd24f3a79264d03253ee9ab960afbd7a6489cddc88143ea68aa10a0739ecb9108fef75189df25ed40449065a98a1ea508c5fc440c1f6eaebe34159bdfb69f152520cdf406a2f136b0eba29822480aa42b1df28decb921e7b3a741d7a10217b791352aeae8ef91ebf9016f2118124bf07b60cc432b4d336db5510280300c848262fcaec44f3fa8145c821816b37121096d8a666b410d109ee32bd773e77c65f687e1d7a5341ccc11066c1e8f0bccfc0f9c8f207e656d2099648026f35a138449fcde6326bf4d21b41906a283317c71bb03b5d4a5d5db6a9563c01da473154f985754ee14dbd85f02f930f21154c56c9899ebb4e0f6fd02b592701be4b38764162eefc408e99113de612b4b7c4cef95821c1cee199eda09a8820c15e22ea7d4856d5cc1c1396a42558f4295d0959669f16ba700381ead034ad6ba30ef2c83c1a4b7fdd8b63eb68e5b26c3b01ab6b24afbea052b041e68deb1c5e0ceded24a8371391a34db5cb880bb31c08615f91422367d80f983e5905460d4607dace51a3f043f6d15ebf83c4fdbd1ae2cd65104bb23323cf6b9b849c92cef6876e9d7fe2786a5638ac0636f0d27aefd6973bc030757a625c18a3249b53f5d8927364d16df0e3f47bbad6bdc98302fc8c2058cfedd0a9cd6a6b2558194b39055d03ebc9e5e71141439de0109d51d0fbbc77818e0fcf5c7962c7c1742275fa4efc893ad2ae905075c7f310b1429e3b7e066e350fe4b4331a0920dc5818c2d22c6b7742a7768b758b87ac400e00353c7adb7e2bf89bd489047622d74c4b0522b6a2d80ed8eaf197a29bdf94855af1a364682bccdd4cd647163d858d6097dbc014b0a240ceeea48a2a4632a8b9401dbaa25bfbaf8defc5713385b5941b7678a00bce7b9e12d7226d5c89da7ede2ead9a363d24d645249aa5db86d55b5430feec5882c2a922a2b6fa15312bbf746b8f243d5033337f9ca14e1150b38740ac34356970fd7eef32c921aeebfd8e6837f6850e0a26ba6db2546ae93558b4b886f077dbda728f2a8bdbfc7a6062e4efbe6928ba50c07d32c1e8119eaa8b91430ec49168049189261a9ba304e0387c9f27771f7bb2e7d7b7eb9bce85591a913fd607531f25e9b68d5e19b0cfe0b1e2cb944ece2f43a3f5471ffaf6b243685dccb7da3f306d2633f810c2f9700789e019de1d27a5675ded14c4acc353f320093dce3119c3f8d54918ada64896a398dc12efdfd3200b8f47525e09ea7fd99e01a88aa7801c1de7345052833278cbc61c378b06d44aa0a7e2cc002d9b2478df09a72a8b1d9e256eeb1c8f2e3d46ff908d77c574610e986b24a8d400d6201bfb9766b2c7314d302f1b1bc4857fa40bbb936b11036b50cc9f2b2b928300f29d03957cd891d38202a58ce8944989860e2c66a250876c31f78cd235a3d7d257a7545c12f74cdbf3756f4761a31c2b5c137676e4996e18d797bace56ba96716c18fdbddfb6f005520e7632d01e8d3a8a48b9a6f9fa229858de027cb21dff15a7de2ce1453271d57c084883a0980f13ee2f9a5c8f31713b872dda6ab6ae1dd890136210319b88b70e6fe920c40754c497abf6ecd306dc98d894ef4c76543597e7252f6f2c68059344ec1afc950d61160c8312922019ade266cdbb17b722542ff70e893e69fb3454bd3ab1f1d32969e187312897c814abb3aa723fdbeaa629f744c80b4c0f38a291b3f2697ea5bc0e1e2ef59f993a53d1b72783c9bd1e5562160ac803c7fa70ac98768b4fc0b4a16ab9b53815d42d1f335043bd0c11adcbd674eeea995b48bfcdbbe249babfe17b3648e48c4a3b5e181eb9c7be951063a006642b5feb87cd8e4754252bbb9ffe93ad16341db7136e44d38f655750fa81319222dcde56a780e20acf87b3ea78c2bae1ab8328880f5bdc38a8f5db5523c6f960ca4820ea0747e5baa17d473bbba53d7611bea1fa5cb1f041268646c39cbb6e7178385c851404e3cb998983ee0068ef41a6c445879f8ae52879493e0da99a5ebb862299d2b43f044401bb54ff786dc91c7dfa6e01195101d0b2f701493fdaf4330c5acd5caf8faa807b39114b5cf29aca699c7a0124bdd3a0d395ae5409547d376a72ddae88f0585fc009ae1c18aaba381a7879f697ac8098a4598959cff76cf99fea055526a351a5210b21b615408bbe297b927f7267ebb511a9947791ed0f5f1df2e7af2f7497be3f71e93a41789868a0d7257ae197ca3a61b72e09c469cab6deaf5ef9a745d720325571c90197952d647c7811667dbd54632680d4fdb17843c1ea2a046f7d45e50fd369e5c46d93d91cb83da3ce6fd124fa187724637fa5a806d73f97ebd41eb103b2e3ddafd0f8cd9174e7396b07b199a77f0210483784c2c9140896dc59371a46bc272bc05882d4b926068a7bc6d5fc95c70bb7c510fbf910c89729cc6d690fcd4d78222dba2d25ca544bdaacf493867c574f23f10db175d99b89d5de807e7a6697583c4e47223a529ed7b0470cdfb928fc13333f09d2969a96108e6832cb250381e5ad4b939b605aa27d550b87637da9ff75bddbea8548cd6e901f0660e7dd48e96b46b96691b303870f2722adedc919b4ad9da47313a0cbc38fde0eb7cf0550d1391311679106a5a4b7d7e4883f391bd6596c7fc98051948169990dc62a74e71d59bf3d58ff099ab88c7eae037efd956c77108edf7095cd17ba27247aa94a00c630d5ee0690f465616cd649b293c0be0ae6a4f29f6d40feb91dd5534f0259f68a69e61af822e58aa2eb23849c049cf8764ac6f68f2e7a04fc9faac9ac13f67c2ad9c76fcae119bda9889f36de41ec9cca379a7c9da7a85f8007be7694934487e13792c80a01b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>聚类算法</title>
    <url>/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95.html</url>
    <content><![CDATA[<p>聚类: 将相似或满足条件的样本归类到同一类别中<br><span id="more"></span></p>
<h2 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h2><p>DBSCAN(Density-Based Spatial Clustering of Applications with Noise)基于密度的聚类算法</p>
<p><img src="聚类算法/DBSCAN.gif" alt="DBSCAN"></p>
<h3 id="聚类方式"><a href="#聚类方式" class="headerlink" title="聚类方式"></a>聚类方式</h3><ol>
<li>以任一点开始, 判断当前点ep范围内点数是否大于minPts, 若大于则为核心点, 否则为噪点</li>
<li>然后以邻域内任一点重复步骤1, 将样本归类为不同簇</li>
</ol>
<h3 id="算法参数"><a href="#算法参数" class="headerlink" title="算法参数"></a>算法参数</h3><p>ep: 邻域半径<br>minPts: 最少点数</p>
<h3 id="点类别"><a href="#点类别" class="headerlink" title="点类别"></a>点类别</h3><ol>
<li>核心点是指那些在邻域内具有足够多的点的对象(&gt;minPts)</li>
<li>边界点则是那些邻近核心点但自身不是核心点的点</li>
<li>噪声点则既不是核心点也不是边界点</li>
</ol>
<h2 id="K-MEANS"><a href="#K-MEANS" class="headerlink" title="K-MEANS"></a>K-MEANS</h2><p><img src="聚类算法/K-MEANS.gif" alt="DBSCAN"></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp冷知识-await</title>
    <url>/CSharp%E5%86%B7%E7%9F%A5%E8%AF%86-await.html</url>
    <content><![CDATA[<p>await 可以作用于任何提供GetAwaiter方法的类<br><span id="more"></span></p>
<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常用</span></span><br><span class="line"><span class="keyword">await</span> FuncAsync();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">FuncAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义</span></span><br><span class="line"><span class="keyword">var</span> myDelay = <span class="keyword">new</span> MyDelay(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">await</span> myDelay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyDelay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> second;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDelay</span>(<span class="params"><span class="built_in">int</span> second</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskAwaiter <span class="title">GetAwaiter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Task.Delay(TimeSpan.FromSeconds(second)).GetAwaiter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进阶</span></span><br><span class="line"><span class="keyword">var</span> myDelay = <span class="keyword">new</span> MyDelay(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">await</span> myDelay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyDelay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> second;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDelay</span>(<span class="params"><span class="built_in">int</span> second</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyExtensions</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> MyDelay md</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Task.Delay(TimeSpan.FromSeconds(md.second)).GetAwaiter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进进阶</span></span><br><span class="line"><span class="keyword">await</span> TimeSpan.FromSeconds(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyExtensions</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> MyDelay md</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Task.Delay(TimeSpan.FromSeconds(md.second)).GetAwaiter();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> TimeSpan ts</span>)</span></span><br><span class="line">        =&gt;Task.Delay(ts).GetAwaiter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进进进阶</span></span><br><span class="line"><span class="keyword">await</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyExtensions</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> MyDelay md</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Task.Delay(TimeSpan.FromSeconds(md.second)).GetAwaiter();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> TimeSpan ts</span>)</span></span><br><span class="line">        =&gt;Task.Delay(ts).GetAwaiter();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">int</span> second</span>)</span></span><br><span class="line">        =&gt;Task.Delay(TimeSpan.FromSeconds(second)).GetAwaiter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp闭包</title>
    <url>/CSharp%E9%97%AD%E5%8C%85.html</url>
    <content><![CDATA[<p>闭包是指有权访问另一个函数作用域中的变量的函数<br><span id="more"></span><br>局部方法调用外部参数时会将传入的参数封装到一个类中</p>
<p>静态局部方法或静态匿名表达式不能访问外部参数, 因此不会形成闭包</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//此处将count封装到一个类中传入</span></span><br><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Demo(()=&gt;count++);</span><br><span class="line"><span class="comment">//count = 0</span></span><br><span class="line">demo.Do();</span><br><span class="line"><span class="comment">//count = 1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Demo</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Action _callBack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span>(<span class="params">Action action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _callBack = action;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Do</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _callBack.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cnt = CreateCounter();</span><br><span class="line">cnt.Invoke();<span class="comment">//counter = 1</span></span><br><span class="line">cnt.Invoke();<span class="comment">//counter = 2</span></span><br><span class="line">cnt.Invoke();<span class="comment">//counter = 3</span></span><br><span class="line">cnt.Invoke();<span class="comment">//counter = 4</span></span><br><span class="line"><span class="function">Action <span class="title">CreateCounter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ()=&gt;Console.Write(++counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> actions = CreateActions();</span><br><span class="line">actions[<span class="number">0</span>].Invoke(<span class="number">10</span>);</span><br><span class="line">actions[<span class="number">1</span>].Invoke(<span class="number">10</span>);</span><br><span class="line">actions[<span class="number">2</span>].Invoke(<span class="number">10</span>);</span><br><span class="line"><span class="function">Action&lt;<span class="built_in">int</span>&gt;[] <span class="title">CreateActions</span>(<span class="params"><span class="built_in">int</span> count = <span class="number">3</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> actions = <span class="keyword">new</span> Action&lt;<span class="built_in">int</span>&gt;[count];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        action[i] = x =&gt; Console.WriteLine(x * i);<span class="comment">//此处传入匿名函数时会在for循环外将i封装到一个类中, 导致最终的i为3, 具体可看编译后的IL</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出均为30</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> actions = CreateActions();</span><br><span class="line">actions[<span class="number">0</span>].Invoke(<span class="number">10</span>);</span><br><span class="line">actions[<span class="number">1</span>].Invoke(<span class="number">10</span>);</span><br><span class="line">actions[<span class="number">2</span>].Invoke(<span class="number">10</span>);</span><br><span class="line"><span class="function">Action&lt;<span class="built_in">int</span>&gt;[] <span class="title">CreateActions</span>(<span class="params"><span class="built_in">int</span> count = <span class="number">3</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> actions = <span class="keyword">new</span> Action&lt;<span class="built_in">int</span>&gt;[count];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> j = i;</span><br><span class="line">        action[i] = x =&gt; Console.WriteLine(x * j);<span class="comment">//此处传入匿名函数时会在for循环内将j封装到一个类中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出均为0, 10, 20</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp冷知识-IEnumerator</title>
    <url>/CSharp%E5%86%B7%E7%9F%A5%E8%AF%86-IEnumerator.html</url>
    <content><![CDATA[<p>类实现 IEnumerator 接口可以实现foreach循环</p>
<p>只要提供IEnumerator GetEnumerator便可实现foreach循环<br><span id="more"></span></p>
<h2 id="IEnumerator"><a href="#IEnumerator" class="headerlink" title="IEnumerator"></a>IEnumerator</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> mc)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">IEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> length;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">int</span> length</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> mc)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> length;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">int</span> length</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerator <span class="title">GetEnumerator</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">int</span> count</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Tcp程序</title>
    <url>/%E5%B8%B8%E7%94%A8Tcp%E7%A8%8B%E5%BA%8F.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1>]]></content>
  </entry>
  <entry>
    <title>HUD单双目测距说明</title>
    <url>/HUD%E5%8D%95%E5%8F%8C%E7%9B%AE%E6%B5%8B%E8%B7%9D%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1>]]></content>
      <tags>
        <tag>BBK</tag>
      </tags>
  </entry>
  <entry>
    <title>WindowsTerminal配置</title>
    <url>/WindowsTerminal%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p>配置windows终端<br><span id="more"></span></p>
<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p>可于windows应用商店下载</p>
<h3 id="2-下载安装Scoop"><a href="#2-下载安装Scoop" class="headerlink" title="2. 下载安装Scoop"></a>2. 下载安装Scoop</h3><p>2.1 设置远程权限<br><code>Set-ExecutionPolicy RemoteSigned -scope CurrentUser</code><br>2.2 下载安装<br><code>irm get.scoop.sh | iex</code></p>
<h3 id="3-安装-PSReadline-包，该插件可以让命令行很好用，类似-zsh"><a href="#3-安装-PSReadline-包，该插件可以让命令行很好用，类似-zsh" class="headerlink" title="3. 安装 PSReadline 包，该插件可以让命令行很好用，类似 zsh"></a>3. 安装 PSReadline 包，该插件可以让命令行很好用，类似 zsh</h3><p><code>Install-Module -Name PSReadLine  -Scope CurrentUser</code></p>
<h3 id="4-安装-posh-git-包，让你的-git-更好用"><a href="#4-安装-posh-git-包，让你的-git-更好用" class="headerlink" title="4. 安装 posh-git 包，让你的 git 更好用"></a>4. 安装 posh-git 包，让你的 git 更好用</h3><p><code>Install-Module posh-git  -Scope CurrentUser</code></p>
<h3 id="5-安装-oh-my-posh-包，让你的命令行更酷炫、优雅"><a href="#5-安装-oh-my-posh-包，让你的命令行更酷炫、优雅" class="headerlink" title="5. 安装 oh-my-posh 包，让你的命令行更酷炫、优雅"></a>5. 安装 oh-my-posh 包，让你的命令行更酷炫、优雅</h3><p><code>Install-Module oh-my-posh -Scope CurrentUser</code></p>
<h3 id="6-添加Powershell配置参数"><a href="#6-添加Powershell配置参数" class="headerlink" title="6. 添加Powershell配置参数"></a>6. 添加Powershell配置参数</h3><p><code>notepad $Profile</code></p>
<p>在文件中添加如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 ps-read-line</span></span><br><span class="line">Import-Module PSReadLine</span><br><span class="line"></span><br><span class="line"><span class="comment"># oh-my-posh init pwsh | Invoke-Expression</span></span><br><span class="line"><span class="comment">#oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH/jandedobbeleer.omp.json&quot; | Invoke-Expression</span></span><br><span class="line"><span class="comment">#oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH/1_shell.omp.json&quot; | Invoke-Expression</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;<span class="variable">$env</span>:POSH_THEMES_PATH/kushal.omp.json&quot;</span> | Invoke-Expression</span><br><span class="line"><span class="comment">#oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH/montys.omp.json&quot; | Invoke-Expression</span></span><br><span class="line"><span class="comment">#oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH/honukai.omp.json&quot; | Invoke-Expression</span></span><br><span class="line"><span class="comment">#oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH/atomic.omp.json&quot; | Invoke-Expression</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置预测文本来源为历史记录</span></span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次回溯输入历史，光标定位于输入内容末尾</span></span><br><span class="line">Set-PSReadLineOption -HistorySearchCursorMovesToEnd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Tab 为菜单补全和 Intellisense</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Tab&quot;</span> -Function MenuComplete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+d 为退出 PowerShell</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key <span class="string">&quot;Ctrl+d&quot;</span> -Function ViExit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+z 为撤销</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Ctrl+z&quot;</span> -Function Undo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置向上键为后向搜索历史记录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置向下键为前向搜索历史纪录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br><span class="line"></span><br><span class="line">Import-Module posh-git <span class="comment"># git的自动补全</span></span><br><span class="line">Import-Module -Name Terminal-Icons</span><br><span class="line"></span><br><span class="line">Set-Alias cl clear</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="7-添加完成后执行"><a href="#7-添加完成后执行" class="headerlink" title="7. 添加完成后执行"></a>7. 添加完成后执行</h3><p><code>. $PROFILE</code></p>
<h3 id="8-美化icon"><a href="#8-美化icon" class="headerlink" title="8. 美化icon"></a>8. 美化icon</h3><p><code>Install-Module -Name Terminal-Icons -Repository PSGallery</code></p>
<h3 id="9-安装Busybox"><a href="#9-安装Busybox" class="headerlink" title="9. 安装Busybox"></a>9. 安装Busybox</h3><p>可使用linux的部分命令</p>
<p>安装方式<code>scoop</code></p>
<h3 id="10-设置别名"><a href="#10-设置别名" class="headerlink" title="10. 设置别名"></a>10. 设置别名</h3><ol>
<li><p><code>Set-Alias cl clear</code></p>
</li>
<li><p><code>function ll &#123;busybox ls -l&#125;</code></p>
</li>
</ol>
<h3 id="11-下载字体"><a href="#11-下载字体" class="headerlink" title="11. 下载字体"></a>11. 下载字体</h3><p>推荐使用 Nerd Font 下载 <a href="https://www.nerdfonts.com/font-downloads">https://www.nerdfonts.com/font-downloads</a><br>如: JetBrainsMono Nerd Font Mono</p>
<h3 id="12-主题"><a href="#12-主题" class="headerlink" title="12. 主题"></a>12. 主题</h3><p>查看主题样式后在<code>$Profile</code>中更改主题名即可<br><a href="https://ohmyposh.dev/docs/themes/">https://ohmyposh.dev/docs/themes/</a></p>
]]></content>
      <categories>
        <category>WindowsTerminal</category>
      </categories>
  </entry>
  <entry>
    <title>合并不同仓库的历史提交</title>
    <url>/%E5%90%88%E5%B9%B6%E4%B8%8D%E5%90%8C%E4%BB%93%E5%BA%93%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4.html</url>
    <content><![CDATA[<p>目的:<br>如两个开发人员分别在本地创建了自己的仓库进行同一项目的开发工作, 后需合并的同时需要保留所有历史提交或其中某个重要的历史提交</p>
<span id="more"></span>
<h2 id="合并部分提交"><a href="#合并部分提交" class="headerlink" title="合并部分提交"></a>合并部分提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如将repo1合并到repo中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在repo中添加repo1为远程分支</span></span><br><span class="line">git remote add rrepo1 //repo1的路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取repo1的变更记录</span></span><br><span class="line">git fetch rrepo1 <span class="comment"># 自动创建rrepo1/master的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看rrepo1/master的历史提交</span></span><br><span class="line">git <span class="built_in">log</span> rrepo1/master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并某一次提交</span></span><br><span class="line">git cherry-pick &lt;commit-hash&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并连续的几次提交</span></span><br><span class="line">git cherry-pick A..B <span class="comment"># 合并从A~B的提交(不含A)</span></span><br><span class="line">git cherry-pick A^..B <span class="comment"># 合并从A~B的提交(含A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h2 id="合并所有提交"><a href="#合并所有提交" class="headerlink" title="合并所有提交"></a>合并所有提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如将repo1合并到repo中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在repo中添加repo1为远程分支</span></span><br><span class="line">git remote add rrepo1 //repo1的路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取repo1的变更记录</span></span><br><span class="line">git fetch rrepo1 <span class="comment"># 自动创建rrepo1/master的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并到repo</span></span><br><span class="line">git merge rrepo1/master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp冷知识-特性</title>
    <url>/CSharp%E5%86%B7%E7%9F%A5%E8%AF%86-%E7%89%B9%E6%80%A7.html</url>
    <content><![CDATA[<p>特性的一些特殊用法<br><span id="more"></span></p>
<h2 id="Conditional"><a href="#Conditional" class="headerlink" title="Conditional"></a>Conditional</h2><p>满足特定条件才会执行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ABC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> test = <span class="keyword">new</span> Test()</span><br><span class="line">        test.Func1();</span><br><span class="line">        test.Func2();<span class="comment">//只有定义了ABC后才会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Func1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只能用于void函数</span></span><br><span class="line">    [<span class="meta">Conditional(<span class="string">&quot;ABC&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Func2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>特性</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp Linq</title>
    <url>/CSharp-Linq.html</url>
    <content><![CDATA[<p>Linqpad8 linq<br><span id="more"></span></p>
<h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">numbers.Add (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">IEnumerable&lt;<span class="built_in">int</span>&gt; query = numbers.Select (n =&gt; n * <span class="number">10</span>);    <span class="comment">// Build query</span></span><br><span class="line"></span><br><span class="line">numbers.Add (<span class="number">2</span>);                    <span class="comment">// Sneak in an extra element</span></span><br><span class="line"></span><br><span class="line">query.Dump (<span class="string">&quot;Notice both elements are returned in the result set&quot;</span>);</span><br><span class="line"></span><br><span class="line">numbers.Add (<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">query.Dump();<span class="comment">//10,20,30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. </span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; timesTen = numbers</span><br><span class="line"> .Select (n =&gt; n * <span class="number">10</span>) </span><br><span class="line"> .ToList();                      <span class="comment">// Executes immediately into a List&lt;int&gt;</span></span><br><span class="line"></span><br><span class="line">numbers.Clear();</span><br><span class="line">timesTen.Count.Dump (<span class="string">&quot;Still two elements present&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="built_in">int</span>[] numbers = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> factor = <span class="number">10</span>;</span><br><span class="line">IEnumerable&lt;<span class="built_in">int</span>&gt; query = numbers.Select (n =&gt; n * factor);</span><br><span class="line"></span><br><span class="line">factor = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">query.Dump (<span class="string">&quot;Notice both numbers are multiplied by 20, not 10&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>AlgorithmLearning-D&amp;C</title>
    <url>/AlgorithmLearning-D-C.html</url>
    <content><![CDATA[<p>Divide and Conquer分治<br><span id="more"></span></p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span>(<span class="params"><span class="built_in">int</span>[] data, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">int</span> i = left;</span><br><span class="line">    <span class="built_in">int</span> j = right;</span><br><span class="line">    <span class="built_in">int</span> mark = data[left];</span><br><span class="line">    <span class="keyword">while</span> (i != j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (data[j] &gt;= mark &amp;&amp; i &lt; j)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">while</span> (data[i] &lt;= mark &amp;&amp; i &lt; j)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> temp = data[i];</span><br><span class="line">            data[i] = data[j];</span><br><span class="line">            data[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data[left] = data[i];</span><br><span class="line">    data[i] = mark;</span><br><span class="line">    QuickSort(data, left, i - <span class="number">1</span>);</span><br><span class="line">    QuickSort(data, i + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>AlgorithmLearning-DFS</title>
    <url>/AlgorithmLearning-DFS.html</url>
    <content><![CDATA[<p>深度优先<br><span id="more"></span></p>
<h2 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>XXX + XXX = XXX<br>将数字1~9分别填入X中,每个数字只能使用一次使得等式成立, 如173+286=459为一组结果, 求总共有多少组. 注:173+286=459与286+173=459为一组.</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>每个X均有9中可能的数字, 第一个X</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];<span class="comment">//保存结果</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">1</span>;<span class="comment">//第几个X</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    result[x] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要保证每个数字只能出现一次, 增加标记</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];<span class="comment">//保存结果</span></span><br><span class="line"><span class="built_in">bool</span>[] marked = <span class="keyword">new</span> <span class="built_in">bool</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span> x = <span class="number">1</span>;<span class="comment">//第几个X</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(marked[i])</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    result[x] = i;</span><br><span class="line">    marked[i] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个X与第一个X相同, 将上述封装</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(marked[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        result[x] = i;</span><br><span class="line">        marked[i] = <span class="literal">true</span>;</span><br><span class="line">        dfs(x + <span class="number">1</span>);</span><br><span class="line">        marked[i] = <span class="literal">false</span>;<span class="comment">//当每次执行到最后一步后,再返回到前一步填入下一个数 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加入返回条件, 计算组数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> steps = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">10</span>)<span class="comment">//总共9个X</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((result[<span class="number">1</span>] * <span class="number">100</span> + result[<span class="number">2</span>] * <span class="number">10</span> + result[<span class="number">3</span>]) +</span><br><span class="line">        (result[<span class="number">4</span>] * <span class="number">100</span> + result[<span class="number">5</span>] * <span class="number">10</span> + result[<span class="number">6</span>]) == </span><br><span class="line">        (result[<span class="number">7</span>] * <span class="number">100</span> + result[<span class="number">8</span>] * <span class="number">10</span> + result[<span class="number">9</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            step++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(marked[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        result[x] = i;</span><br><span class="line">        marked[i] = <span class="literal">true</span>;</span><br><span class="line">        dfs(x + <span class="number">1</span>);</span><br><span class="line">        marked[i] = <span class="literal">false</span>;<span class="comment">//当每次执行到最后一步后,再返回到前一步填入下一个数 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];<span class="comment">//保存结果</span></span><br><span class="line"><span class="built_in">bool</span>[] marked = <span class="keyword">new</span> <span class="built_in">bool</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span> steps = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">10</span>)<span class="comment">//总共9个X</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//满足条件计数</span></span><br><span class="line">        <span class="keyword">if</span>((result[<span class="number">1</span>] * <span class="number">100</span> + result[<span class="number">2</span>] * <span class="number">10</span> + result[<span class="number">3</span>]) +</span><br><span class="line">        (result[<span class="number">4</span>] * <span class="number">100</span> + result[<span class="number">5</span>] * <span class="number">10</span> + result[<span class="number">6</span>]) == </span><br><span class="line">        (result[<span class="number">7</span>] * <span class="number">100</span> + result[<span class="number">8</span>] * <span class="number">10</span> + result[<span class="number">9</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            step++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(marked[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        result[x] = i;</span><br><span class="line">        marked[i] = <span class="literal">true</span>;</span><br><span class="line">        dfs(x + <span class="number">1</span>);</span><br><span class="line">        marked[i] = <span class="literal">false</span>;<span class="comment">//当每次执行到最后一步后,再返回到前一步填入下一个数 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">steps /= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Open Protocol</title>
    <url>/C-Open-Protocol.html</url>
    <content><![CDATA[<p>基于Open Protocol的扳手程序设计<br>基于TcpIP, 扳手为Server端口一般为4545<br><span id="more"></span></p>
<h2 id="数据组成"><a href="#数据组成" class="headerlink" title="数据组成"></a>数据组成</h2><p>通讯数据内容均为ASCII格式<br>数据包含三部分: Header, DataField和MessageEnd</p>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Byte</th>
<th style="text-align:center">parameter</th>
<th style="text-align:center">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1-4</td>
<td style="text-align:center">Length</td>
<td style="text-align:center">Header+DataField的长度</td>
</tr>
<tr>
<td style="text-align:center">5-8</td>
<td style="text-align:center">MID</td>
<td style="text-align:center">MessageID</td>
</tr>
<tr>
<td style="text-align:center">9-11</td>
<td style="text-align:center">Revision</td>
<td style="text-align:center">The revision of the MID</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">No ack lag</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">13-14</td>
<td style="text-align:center">Station ID</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">15-16</td>
<td style="text-align:center">Spindle ID</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">17-20</td>
<td style="text-align:center">Spare</td>
</tr>
</tbody>
</table>
</div>
<h3 id="DataField"><a href="#DataField" class="headerlink" title="DataField"></a>DataField</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Byte</th>
<th style="text-align:center">parameter</th>
<th style="text-align:center">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">21-22</td>
<td style="text-align:center">01</td>
<td style="text-align:center">Parameter ID</td>
</tr>
<tr>
<td style="text-align:center">23-n</td>
<td style="text-align:center">Parameter 01 value</td>
<td style="text-align:center">Parameter 01的内容</td>
</tr>
<tr>
<td style="text-align:center">n+1-n+2</td>
<td style="text-align:center">02</td>
<td style="text-align:center">Parameter ID</td>
</tr>
<tr>
<td style="text-align:center">n+3</td>
<td style="text-align:center">Parameter 02 value</td>
<td style="text-align:center">Parameter 02的内容</td>
</tr>
</tbody>
</table>
</div>
<h3 id="MessageEnd"><a href="#MessageEnd" class="headerlink" title="MessageEnd"></a>MessageEnd</h3><p>以空字符NUL结尾, ‘\0’或0x00</p>
<h2 id="程序部分"><a href="#程序部分" class="headerlink" title="程序部分"></a>程序部分</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Header</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Length &#123;  <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Mid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Revision &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> NoAckFlag &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? StationId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? SpindleId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> DefaultSize = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Header</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Length = DefaultSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder(Length.ToString(<span class="string">&quot;D4&quot;</span>));</span><br><span class="line">        <span class="comment">//var sb = new StringBuilder();</span></span><br><span class="line">        sb.Append(Mid.ToString(<span class="string">&quot;D4&quot;</span>));</span><br><span class="line">        sb.Append(Revision.ToString(<span class="string">&quot;D3&quot;</span>));</span><br><span class="line">        sb.Append(NoAckFlag ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        sb.Append(<span class="string">&quot;        &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mid</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Header Header &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? DataFieldsString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> PositiveResponse &#123; <span class="keyword">get</span> =&gt; Header.Mid == <span class="number">5</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mid</span>()</span></span><br><span class="line">    &#123; </span><br><span class="line">        Header = <span class="keyword">new</span> Header(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mid</span>(<span class="params">Header header</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Header = header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mid</span>(<span class="params"><span class="built_in">int</span> mid, <span class="built_in">int</span> revision, <span class="built_in">bool</span> noAckFlag = <span class="literal">false</span></span>) : <span class="title">this</span>(<span class="params"><span class="keyword">new</span> Header(</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Mid = mid,</span><br><span class="line">        Revision = revision,</span><br><span class="line">        NoAckFlag = noAckFlag</span><br><span class="line">    &#125;)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Mid <span class="title">AppendDataFields</span>(<span class="params"><span class="built_in">string</span> dataFields</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DataFieldsString = dataFields;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">Pack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DataFieldsString != <span class="literal">null</span>)</span><br><span class="line">            Header.Length += DataFieldsString.Length;</span><br><span class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> StringBuilder(Header.ToString());</span><br><span class="line">        builder.Append(DataFieldsString);</span><br><span class="line">        builder.Append(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析Header</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> Header <span class="title">ProcessHeader</span>(<span class="params"><span class="built_in">string</span> package</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (package.Length &lt; <span class="number">20</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            package = package.PadRight(<span class="number">20</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> header = <span class="keyword">new</span> Header</span><br><span class="line">        &#123;</span><br><span class="line">            Length = <span class="built_in">int</span>.Parse(package.Substring(<span class="number">0</span>, <span class="number">4</span>)),</span><br><span class="line">            Mid = <span class="built_in">int</span>.Parse(package.Substring(<span class="number">4</span>, <span class="number">4</span>)),</span><br><span class="line">            Revision = <span class="built_in">int</span>.TryParse(package.Substring(<span class="number">8</span>, <span class="number">3</span>), <span class="keyword">out</span> <span class="keyword">var</span> revision) ? revision : <span class="number">1</span>,</span><br><span class="line">            NoAckFlag = !<span class="built_in">string</span>.IsNullOrWhiteSpace(package.Substring(<span class="number">11</span>, <span class="number">1</span>)),</span><br><span class="line">            StationId = <span class="built_in">int</span>.TryParse(package.Substring(<span class="number">12</span>, <span class="number">2</span>), <span class="keyword">out</span> <span class="keyword">var</span> stationId) ? stationId : <span class="number">1</span>,</span><br><span class="line">            SpindleId = <span class="built_in">int</span>.TryParse(package.Substring(<span class="number">14</span>, <span class="number">2</span>), <span class="keyword">out</span> <span class="keyword">var</span> spindleId) ? spindleId : <span class="number">1</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//截取返回数据段</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="built_in">string</span> <span class="title">SubDataFieldsString</span>(<span class="params"><span class="built_in">string</span> package</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> package.Substring(<span class="number">20</span>, Header.Length - <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据给定数据字段解析, 要求加入所有字段或者ID从1开始连续的字段</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ProcessDataFields</span>(<span class="params">List&lt;DataField&gt; dataFields</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DataFieldsString == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;数据段为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">        dataFields = dataFields.OrderBy(df =&gt; df.id).ToList();</span><br><span class="line">        <span class="built_in">int</span> startIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> idCount = <span class="number">1</span>;</span><br><span class="line">        dataFields.ForEach(df =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (idCount++ == Convert.ToInt32(DataFieldsString.Substring(startIndex, <span class="number">2</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//throw new Exception(&quot;数据解析ID与实际不匹配&quot;);</span></span><br><span class="line">                <span class="keyword">if</span> (startIndex &gt; DataFieldsString.Length)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;接收到的数据长度不正确: 长度应大于&quot;</span> + startIndex + <span class="string">&quot;;实际长度=&quot;</span> + DataFieldsString.Length);</span><br><span class="line">                df.data = DataFieldsString.Substring(startIndex + <span class="number">2</span>, df.length).Trim().Trim(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">                startIndex += df.length + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                df.data = <span class="string">&quot;List Order Error&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据字段的索引值取值, 数据段起始为0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ProcessDataFieldsWithIndex</span>(<span class="params">List&lt;DataField&gt; dataFields, <span class="built_in">int</span> dataIndexOffset = <span class="number">0</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DataFieldsString == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;数据段为空&quot;</span>);</span><br><span class="line">        dataFields.ForEach(df =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            df.index -= dataIndexOffset;</span><br><span class="line">            <span class="keyword">if</span> (df.id == Convert.ToInt32(DataFieldsString.Substring(df.index, <span class="number">2</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (df.index + df.length &gt; DataFieldsString.Length)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;数据长度不正确&quot;</span>);</span><br><span class="line">                df.data = DataFieldsString.Substring(df.index + <span class="number">2</span>, df.length).Trim().Trim(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                df.data = <span class="string">&quot;Index Error&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析出Header和DateField</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Mid <span class="title">Parse</span>(<span class="params"><span class="built_in">string</span> package</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Header = ProcessHeader(package);</span><br><span class="line">        DataFieldsString = SubDataFieldsString(package);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Mid <span class="title">Parse</span>(<span class="params"><span class="built_in">byte</span>[] package</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pack = ToAscii(package);</span><br><span class="line">        <span class="keyword">return</span> Parse(pack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ToAscii</span>(<span class="params"><span class="built_in">byte</span>[] bytes</span>)</span> =&gt; Encoding.ASCII.GetString(bytes);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">ToBytes</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span> =&gt; Encoding.ASCII.GetBytes(<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataField</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> length;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> data;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> index;<span class="comment">//数据段起始为0(不计算Header长度)</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataField</span>(<span class="params">List&lt;DataField&gt; dfList, <span class="built_in">int</span> id, <span class="built_in">int</span> length</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.length = length;</span><br><span class="line">            <span class="keyword">this</span>.data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.index = <span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(dfList.Find(df =&gt; df.id == id) == <span class="literal">null</span>)</span><br><span class="line">                dfList.Add(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataField</span>(<span class="params">List&lt;DataField&gt; dfList, <span class="built_in">int</span> id, <span class="built_in">int</span> length, <span class="built_in">int</span> index</span>) : <span class="title">this</span>(<span class="params">dfList, id, length</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenProtocolClient</span> : <span class="title">xStringEx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> locker = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="keyword">private</span> xString Connected = <span class="keyword">new</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TcpClient tcpClient = <span class="keyword">new</span>();</span><br><span class="line">    <span class="keyword">public</span> Mid recvMid;</span><br><span class="line">    <span class="keyword">public</span> Mid lastRecvMid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> EnableLog = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> LogFile = <span class="string">&quot;DesoutterOpenProtocol&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> remoteIP = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> remotePort = <span class="number">502</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> recvTimeout = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bool</span> online = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OpenProtocolClient</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Connected = TCreate&lt;xString&gt;(<span class="keyword">new</span> xString(), <span class="string">&quot;Connected&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">Init</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            online = <span class="literal">false</span>;</span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; PortCif = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; <span class="string">&quot;IPAddr&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;PortNo&quot;</span>, <span class="number">502</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;RecvTimeout&quot;</span>, <span class="number">1000</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;EnableLog&quot;</span>, <span class="literal">true</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;LogFileName&quot;</span>, <span class="string">&quot;TCPClientOpra&quot;</span> &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            XmlFO.Configs.Get(<span class="string">&quot;TCPClient&quot;</span>, sPara, PortCif);</span><br><span class="line"></span><br><span class="line">            remoteIP = Convert.ToString(PortCif[<span class="string">&quot;IPAddr&quot;</span>]);</span><br><span class="line">            remotePort = Convert.ToInt32(PortCif[<span class="string">&quot;PortNo&quot;</span>]);</span><br><span class="line">            recvTimeout = Convert.ToInt32(PortCif[<span class="string">&quot;RecvTimeout&quot;</span>]);</span><br><span class="line">            EnableLog = Convert.ToBoolean(PortCif[<span class="string">&quot;EnableLog&quot;</span>]);</span><br><span class="line">            LogFile = Convert.ToString(PortCif[<span class="string">&quot;LogFileName&quot;</span>]);</span><br><span class="line"></span><br><span class="line">            ThreadEx.New(TcpRecvThread, <span class="string">&quot;TcpRecvThread&quot;</span>, <span class="number">50</span>);</span><br><span class="line">            ThreadEx.New(Online, <span class="string">&quot;Online&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">StartCommunication</span>(<span class="params"><span class="built_in">string</span> sParam</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            online = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            Mid mid;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                mid = SendAndRecv(<span class="keyword">new</span> Mid(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (mid == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (mid.Header.Mid != <span class="number">2</span> &amp;&amp; ++i &lt; <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (lastRecvMid != <span class="literal">null</span> &amp;&amp; recvMid.Header.Mid == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Connected.xValue = <span class="string">&quot;True&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Connected.xValue = <span class="string">&quot;False&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Connected.xValue = <span class="string">&quot;False&quot;</span>;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">StopCommunication</span>(<span class="params"><span class="built_in">string</span> sParam</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            online = <span class="literal">false</span>;</span><br><span class="line">            Mid mid = SendAndRecv(<span class="keyword">new</span> Mid(<span class="number">3</span>,<span class="number">1</span>));</span><br><span class="line">            Connected.xValue = <span class="string">&quot;False&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> mid.PositiveResponse ? xState.xTrue : xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">PostVehicleCode</span>(<span class="params"><span class="built_in">string</span> sParam</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> code = XmlFO.StringAnalysis(sParam);</span><br><span class="line">            <span class="keyword">if</span> (code.Length &lt; <span class="number">19</span>)</span><br><span class="line">                <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">            StartCommunication(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            Mid mid = SendAndRecv(<span class="keyword">new</span> Mid(<span class="number">50</span>, <span class="number">1</span>).AppendDataFields(code));</span><br><span class="line">            <span class="keyword">return</span> mid.PositiveResponse ? xState.xTrue : xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">SubscribeLastResult</span>(<span class="params"><span class="built_in">string</span> sParam</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Mid mid = SendAndRecv(<span class="keyword">new</span> Mid(<span class="number">60</span>, <span class="number">4</span>));</span><br><span class="line">            <span class="keyword">return</span> mid.PositiveResponse ? xState.xTrue : xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">RecvLastResult</span>(<span class="params"><span class="built_in">string</span> sParam</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRecvMid.Header.Mid != <span class="number">61</span>)</span><br><span class="line">                <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">            <span class="keyword">if</span> (lastRecvMid.DataFieldsString == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">            Mid61DataResult mid61Result = <span class="keyword">new</span> Mid61DataResult();</span><br><span class="line">            lastRecvMid.ProcessDataFields(Mid61DataResult.dfList);</span><br><span class="line">            <span class="built_in">double</span> torque = Convert.ToInt32(mid61Result.torque.data) / <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Online</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Online</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!online)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Mid mid = SendAndRecv(<span class="keyword">new</span> Mid(<span class="number">9999</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TcpRecvThread</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] tcpRecvByts;</span><br><span class="line">        <span class="comment">//while (true)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!IsOnline())</span><br><span class="line">            &#123;</span><br><span class="line">                Connect();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tcpRecvByts = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="built_in">int</span> recvLength = <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                recvLength = tcpClient.Client.Receive(tcpRecvByts);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                recvMid = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">byte</span>[] tmpRecvData = <span class="keyword">new</span> <span class="built_in">byte</span>[recvLength];</span><br><span class="line">            Array.Copy(tcpRecvByts, tmpRecvData, recvLength);</span><br><span class="line">            <span class="built_in">string</span> tcpRecvString = Encoding.ASCII.GetString(tmpRecvData);</span><br><span class="line">            Logout(<span class="string">&quot;Recv:&lt;-&quot;</span> + tcpRecvString);</span><br><span class="line">            recvMid = <span class="keyword">new</span> Mid().Parse(tcpRecvString);</span><br><span class="line">            lastRecvMid = recvMid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mid <span class="title">SendAndRecv</span>(<span class="params">Mid sendMid</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SendMsg(sendMid.Pack());</span><br><span class="line">        <span class="built_in">int</span> t = Environment.TickCount;</span><br><span class="line">        <span class="keyword">while</span> ((Environment.TickCount - t) &lt; recvTimeout)</span><br><span class="line">        &#123;</span><br><span class="line">            Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(recvMid != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> recvMid;</span><br><span class="line">        &#125;</span><br><span class="line">        Logout(<span class="string">&quot;Recv Timeout&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Recv Timeout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMsg</span>(<span class="params"><span class="built_in">string</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!IsOnline())</span><br><span class="line">            Connect();</span><br><span class="line">        <span class="keyword">lock</span> (locker)</span><br><span class="line">        &#123;</span><br><span class="line">            tcpClient.Client.Send(Encoding.ASCII.GetBytes(data));</span><br><span class="line">            recvMid = <span class="literal">null</span>;<span class="comment">//考虑发出去后置空, recv中好判断</span></span><br><span class="line">            Logout(<span class="string">&quot;Send:-&gt;&quot;</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Connect</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpClient == <span class="literal">null</span>)</span><br><span class="line">            tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line">        <span class="keyword">if</span> (tcpClient.Connected)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        tcpClient.Close();</span><br><span class="line">        tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line">        tcpClient.Connect(IPAddress.Parse(remoteIP), remotePort);</span><br><span class="line">        tcpClient.Client.ReceiveTimeout = recvTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsOnline</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpClient == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">bool</span> onLine = !((tcpClient.Client.Poll(<span class="number">100</span>, SelectMode.SelectRead) &amp;&amp; (tcpClient.Client.Available == <span class="number">0</span>)) || !tcpClient.Client.Connected);</span><br><span class="line">        <span class="keyword">if</span> (!onLine)</span><br><span class="line">            tcpClient = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> onLine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Logout</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = Environment.CurrentDirectory + <span class="string">&quot;\\Log&quot;</span>; </span><br><span class="line">        <span class="built_in">string</span> fullPath = path + <span class="string">&quot;\\log&quot;</span> + DateTime.Now.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>) + <span class="string">&quot;.log&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">            System.IO.Directory.CreateDirectory(path);</span><br><span class="line">        <span class="keyword">if</span> (EnableLog)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(fullPath, <span class="literal">true</span>)) &#123; sw.WriteLine(DateTime.Now.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:ffff &quot;</span>) + msg); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Just for test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mid61DataResult</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Mid.DataField&gt; dfList = <span class="keyword">new</span> List&lt;Mid.DataField&gt;();</span><br><span class="line">        <span class="keyword">public</span> DataField sensorID = <span class="keyword">new</span> DataField(dfList, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">public</span> DataField channelID = <span class="keyword">new</span> DataField(dfList, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">public</span> DataField controlerName = <span class="keyword">new</span> DataField(dfList, <span class="number">3</span>, <span class="number">25</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">public</span> DataField torque = <span class="keyword">new</span> DataField(dfList, <span class="number">4</span>, <span class="number">40</span>,<span class="number">37</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> TorqueResult &#123;  <span class="keyword">get</span> =&gt; Convert.ToDouble(torque.data) ; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>AlgorithmLearning-二分查找</title>
    <url>/AlgorithmLearning-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html</url>
    <content><![CDATA[<p>二分查找法<br><span id="more"></span></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回一组数中某个数的索引</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">BinarySearch</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; list, <span class="built_in">int</span> target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> high = list.Count - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> tmp = list[mid];</span><br><span class="line">        <span class="keyword">if</span>(tmp == target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(tmp &gt; target)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> pos = BinarySearch(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;, <span class="number">3</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C#范围运算符</title>
    <url>/C-%E8%8C%83%E5%9B%B4%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<p>用于快速截取序列, C#8.0<br><span id="more"></span></p>
<p>主要用于操作数组, 字符串和Span类型数据序列</p>
<ol>
<li>start..end, 表示从start索引(<strong>包含start</strong>)处开始, 截取到end索引(<strong>不包含end</strong>)处</li>
<li>start.., 表示从start索引(包含start)处开始, 截取到序列结尾</li>
</ol>
<p>范围运算符也可也用负数表示倒数截取</p>
<p><code>^</code>为末尾运算符<br><code>arr[^1]等于arr[arr.Length - 1]</code>为最后一个元素<br><code>arr[^0]等于arr[arr.Length]</code></p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>C#集合表达式</title>
    <url>/C-%E9%9B%86%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content><![CDATA[<p>集合表达式是一种简洁的语法, 可用于创建常见的集合值, 在<code>[]</code>之间包含元素的序列. C# 12<br><span id="more"></span></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = [<span class="string">&quot;Sun&quot;</span>, <span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="分布元素"><a href="#分布元素" class="headerlink" title="分布元素"></a>分布元素</h2><p>使用<code>..</code>在集合表达式中使用内联集合值</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] num1 = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>];</span><br><span class="line"><span class="built_in">string</span>[] num2 = [<span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>];</span><br><span class="line"><span class="built_in">string</span>[] num = [.. num1, .. num2, <span class="string">&quot;0&quot;</span>];</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>C#高精度定时器</title>
    <url>/C-%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9A%E6%97%B6%E5%99%A8.html</url>
    <content><![CDATA[<p>结论: 推荐调用timeBeginPeriod后使用Sleep(1)精度在2ms以内<br><span id="more"></span></p>
<h2 id="DateTime-Now"><a href="#DateTime-Now" class="headerlink" title="DateTime.Now"></a>DateTime.Now</h2><p>该属性发解析取决于系统计时器, 后者取决于基础操作系统, 精度一般介于0.5~15ms之间<br>该属性通常用于度量性能, 由于分辨路较低不适合用于测试工具, 推荐使用Stopwatch类</p>
<h2 id="Stopwatch"><a href="#Stopwatch" class="headerlink" title="Stopwatch"></a>Stopwatch</h2><p>Stopwatch内部使用系统API <code>QueryPerformanceCounter / QueryPerformanceFrequency</code>来进行高精度计时,<br>精度依赖于硬件通常高达几十纳秒(ns)</p>
<h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">sw.Start();</span><br><span class="line">Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">sw.Stop();</span><br><span class="line">TimeSpan timeSpan = sw.Elapsed;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> ms = timeSpan.TotalMilliseconds;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际定时时间大约15.6ms</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该测试取决于系统时钟, Windows默认时钟频率为每秒64次即15.625ms</span></span><br><span class="line"><span class="comment">小于16ms的Sleep不会生效</span></span><br><span class="line"><span class="comment">可以调用timeBeginPeriod更改时钟频率</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport(<span class="string">&quot;winmm.dll&quot;</span>, EntryPoint = <span class="string">&quot;timeBeginPeriod&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">BeginPeriod</span>(<span class="params"><span class="built_in">uint</span> ms</span>)</span>;</span><br><span class="line">BeginPeriod(<span class="number">1</span>);</span><br><span class="line">Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">sw.Start();</span><br><span class="line">Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">sw.Stop();</span><br><span class="line">TimeSpan timeSpan = sw.Elapsed;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> ms = timeSpan.TotalMilliseconds;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际定时时间大约1.8ms</span></span><br></pre></td></tr></table></figure>
<h3 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">short</span> <span class="title">QueryPerformanceCounter</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">long</span> x</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">short</span> <span class="title">QueryPerformanceFrequency</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">long</span> x</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delay</span>(<span class="params"><span class="built_in">long</span> delayTime</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">long</span> stopValue = <span class="number">0</span>, startValue = <span class="number">0</span>, freq = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">    QueryPerformanceFrequency(<span class="keyword">ref</span> freq);</span><br><span class="line">    <span class="built_in">long</span> count = delayTime * freq / <span class="number">1000000</span>;<span class="comment">//1000us = 1ms</span></span><br><span class="line">    QueryPerformanceCounter(<span class="keyword">ref</span> startValue);</span><br><span class="line">    <span class="keyword">while</span>(n &lt; count)</span><br><span class="line">    &#123;</span><br><span class="line">        QueryPerformanceCounter(<span class="keyword">ref</span> stopValue);</span><br><span class="line">        n = stopValue - startValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">sw.Start();</span><br><span class="line">delay(<span class="number">1000</span>);</span><br><span class="line">sw.Stop();</span><br><span class="line">TimeSpan timeSpan = sw.Elapsed;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> ms = timeSpan.TotalMilliseconds;</span><br><span class="line"><span class="comment">//实际定时时间大约1.3ms</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
</search>
