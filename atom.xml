<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silencejql</title>
  
  
  <link href="https://silencejql.github.io/atom.xml" rel="self"/>
  
  <link href="https://silencejql.github.io/"/>
  <updated>2025-07-26T13:14:48.915Z</updated>
  <id>https://silencejql.github.io/</id>
  
  <author>
    <name>Justin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WPF MVVM示例一</title>
    <link href="https://silencejql.github.io/WPF-MVVM%E7%A4%BA%E4%BE%8B%E4%B8%80.html"/>
    <id>https://silencejql.github.io/WPF-MVVM%E7%A4%BA%E4%BE%8B%E4%B8%80.html</id>
    <published>2025-07-26T12:22:34.000Z</published>
    <updated>2025-07-26T13:14:48.915Z</updated>
    
    <content type="html"><![CDATA[<p>深入浅出<code>WPF</code>示例, 理解Binding实现</p><span id="more"></span><h2 id="示例">示例</h2><p>功能: 实现按钮计算更新<code>TextBox</code>数据</p><p><img src="WPF-MVVM%E7%A4%BA%E4%BE%8B%E4%B8%80/20250726202642.png" alt="Cal"></p><h3 id="数据属性NotificationObject">数据属性<code>NotificationObject</code></h3><p>当属性被赋值时调用<code>RaisePropertyChanged</code>触发<code>PropertyChanged</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NotificationObject</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RaisePropertyChanged</span>(<span class="params"><span class="built_in">string</span> propertyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(propertyName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令属性DelegateCommand">命令属性<code>DelegateCommand</code></h3><p><code>View</code>中按钮按下等触发命令后执行<code>Execute</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DelegateCommand</span> : <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler CanExecuteChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CanExecute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(CanExcuteFunc == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> CanExcuteFunc(parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ExecuteAction == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ExecuteAction(parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">object</span>&gt; ExecuteAction &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">object</span>, <span class="built_in">bool</span>&gt; CanExcuteFunc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MainWindowViewModel"><code>MainWindowViewModel</code></h3><p>示例中<code>Cal``Button</code>按下后触发执行<code>CanExecute</code>若返回<code>true</code>则执行<code>Execute</code>, 在构造中添加<code>ExecuteAction</code>执行方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainWindowViewModel</span> : <span class="title">NotificationObject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> num1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">double</span> Num1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span> &#123; <span class="keyword">return</span> num1; &#125;</span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">&#123;</span><br><span class="line">num1 = <span class="keyword">value</span>;</span><br><span class="line">RaisePropertyChanged(<span class="keyword">nameof</span>(Num1));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Num2</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> num2++; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            num2 = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChanged(<span class="keyword">nameof</span>(Num2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> num3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Num3</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> num3; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            num3 = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChanged(<span class="keyword">nameof</span>(Num3));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DelegateCommand AddCommand &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">object</span> param</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Num3 = Num1 + Num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AddCommand = <span class="keyword">new</span> DelegateCommand</span><br><span class="line">        &#123;</span><br><span class="line">            ExecuteAction = Add</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据层DataContext">数据层<code>DataContext</code></h3><p><code>DataContext = new MainWindowViewModel();</code></p><p>指定<code>Banding</code>上下文即业务逻辑</p><p>如上述示例 <code>Banding</code>绑定的是<code>MainWindowViewModel</code>类里的属性名</p><h4 id="DataContext设置方法"><code>DataContext</code>设置方法</h4><h5 id="1-初始化时添加">1. 初始化时添加</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    <span class="keyword">this</span>.DataContext = <span class="keyword">new</span> MainWindowViewModel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-xaml中d-DataContext指定">2. <code>xaml</code>中<code>d:DataContext</code>指定</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:viewmodel=&quot;clr-namespace:LearnWpf.ViewModel&quot; </span><br><span class="line">d:DataContext=&quot;&#123;d:DesignInstance Type=viewmodel:MainWindowViewModel&#125;&quot;</span><br></pre></td></tr></table></figure><h5 id="3-xaml中添加">3. <code>xaml</code>中添加</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.DataContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">viewmodel:MainWindowViewModel</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.DataContext</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Banding-DataContext说明"><code>Banding DataContext</code>说明</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意此时我已经在初始化代码中设置DataContext 为 ClassA，DataContext = new ClassA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Name</span>=<span class="string">&quot;MyWindow&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataContext 没有被指定,所以继承自父类 的 DataContext,也就是 ClassA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataContext 继承自父类,也就是 ClassA, 所以这里会显示 ClassA.Name --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding Name&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataContext 仍然是ClassA, 但是我们通过binding设置为ClassA.ClassB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">DataContext</span>=<span class="string">&quot;&#123;Binding ClassB&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataContext 继承自父类，也就是ClassB，所以这里会显示 ClassB.Name --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding Name&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DataContext i仍然是 ClassB, 但是我们binding 到了Window&#x27;s DataContext.Name, 也就是 ClassA.Name --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding ElementName=MyWindow, Path=DataContext.Name&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- We&#x27;ve left the StackPanel with its DataContext bound to ClassB, so this Label&#x27;s DataContext is ClassA (inherited from parent StackPanel), and we are binding to ClassA.ClassB.Name --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding ClassB.Name&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;深入浅出&lt;code&gt;WPF&lt;/code&gt;示例, 理解Binding实现&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/CSharp/"/>
    
    <category term="WPF" scheme="https://silencejql.github.io/categories/CSharp/WPF/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="WPF" scheme="https://silencejql.github.io/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-MVVM</title>
    <link href="https://silencejql.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-MVVM.html"/>
    <id>https://silencejql.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-MVVM.html</id>
    <published>2025-07-26T09:01:18.000Z</published>
    <updated>2025-07-26T13:21:28.158Z</updated>
    
    <content type="html"><![CDATA[<p><code>MVVM-&gt;Model View ViewModel</code></p><span id="more"></span><h2 id="MVVM-Model-View-ViewModel"><code>MVVM (Model-View-ViewModel)</code></h2><p><strong>概念解析：</strong></p><ul><li><p><code>MVVM</code>作为<code>MVC</code>模式的改良版，尤其受到现代前端开发青睐，常见于与<code>Vue</code>、<code>Angular</code>、<code>React</code>等框架的深度融合。</p></li><li><p><strong><code>Model</code></strong>：与<code>MVC</code>中一样，负责数据管理与业务逻辑处理。</p></li><li><p><strong><code>View</code></strong>：负责渲染用户界面，但不再直接与<code>Model</code>交流。</p></li><li><p><strong><code>ViewModel</code></strong>：作为新增角色，充当<code>View</code>与<code>Model</code>之间的枢纽，封装视图逻辑，并实现数据绑定，让<code>Model</code>与<code>View</code>的同步实现自动化。</p></li></ul><p><strong>运作机制详解：</strong></p><ul><li><strong>双向数据绑定</strong>：<code>ViewModel</code>与<code>Mode</code>l建立绑定关系，一旦<code>Model</code>数据发生变更，<code>ViewModel</code>会自动更新，并通过数据绑定技术将变化同步到<code>View</code>；反之，用户在<code>View</code>的操作也会通过双向绑定自动反应到<code>ViewModel</code>和<code>Model</code>中。</li><li><strong>观察者模式</strong>：<code>MVVM</code>通常采用观察者模式实现数据绑定，<code>ViewModel</code>监控<code>Model</code>变化并自动更新视图。</li></ul><p><strong>优缺点评估：</strong></p><ul><li><strong>优点</strong>：通过数据绑定技术大大减轻了手动维护视图状态的工作量，提升了开发效率，降低了代码耦合度。</li><li><strong>缺点</strong>：新手理解数据绑定机制可能存在一定的难度，另外，在大型或高性能应用中，若未经合理优化，可能会产生较多<code>DOM</code>操作，影响性能表现。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;MVVM-&amp;gt;Model View ViewModel&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://silencejql.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/CSharp/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="设计模式" scheme="https://silencejql.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SICK RFID RFU630读写标签</title>
    <link href="https://silencejql.github.io/SICK-RFID-RFU630%E8%AF%BB%E5%86%99%E6%A0%87%E7%AD%BE.html"/>
    <id>https://silencejql.github.io/SICK-RFID-RFU630%E8%AF%BB%E5%86%99%E6%A0%87%E7%AD%BE.html</id>
    <published>2025-07-21T02:56:50.000Z</published>
    <updated>2025-07-21T04:58:17.584Z</updated>
    
    <content type="html"><![CDATA[<p><code>SICK RFID RFU630</code>通电后默认启动<code>192.168.0.1 2112</code> <code>tcp</code>服务, 客户端可直接发送读写命令正常使用, 若需配置功率等则要安装<code>SOPAS_Engineering_Tool</code> 工具进行配置<br><span id="more"></span></p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p><img src="SICK-RFID-RFU630读写标签/Memory.png" alt="Memory"></p><h3 id="读写命令"><a href="#读写命令" class="headerlink" title="读写命令"></a>读写命令</h3><p><img src="SICK-RFID-RFU630读写标签/Read.png" alt="Read"></p><p><img src="SICK-RFID-RFU630读写标签/Write.png" alt="Write"></p><h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><p>读写<code>Bank=0b11=3</code> 用户存储区域数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;STX&gt;sMN TAreadTagData 0 3 0 9 32&lt;ETX&gt;</span><br><span class="line">0: 从0位开始</span><br><span class="line">9: 读取9word, 9*2=18byte, 9*2*2=36位字符. 即9*2个xx-&gt;18字节-&gt;36个字符</span><br><span class="line"></span><br><span class="line">&lt;STX&gt;sMN TAwriteTagData 0 3 0 1 32 +4 0000&lt;ETX&gt;</span><br><span class="line">1:1word-&gt;2个字节xx xx-&gt;-&gt;4位字符-&gt;+4</span><br><span class="line">&lt;STX&gt;sMN TAwriteTagData 0 3 0 2 32 +8 0000&lt;ETX&gt;</span><br><span class="line">2:2word-&gt;4字节xx xx xx xx-&gt;8位-&gt;+8</span><br><span class="line"></span><br><span class="line">写入01234567891234567</span><br><span class="line">&lt;STX&gt;sMN TAwriteTagData 0 3 0 9 32 +36 303132333435363738393132333435363700&lt;ETX&gt;</span><br><span class="line">0: 从0位开始写入</span><br><span class="line">9: 写入9word-&gt;18byte-&gt;36位字符</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">RFID_SICK_RFU630</span> : <span class="title">xStringEx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> xString Connected = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> xString Enable = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> xString SendString = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> xString RecvString = <span class="keyword">new</span> xString();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TcpClient tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> EnableLog = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> LogFile = <span class="string">&quot;RFID_SICK_RFU630&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> remoteIP = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> remotePort = <span class="number">2112</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> recvTimeout = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RFID_SICK_RFU630</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Connected = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;Connected&quot;</span>);</span><br><span class="line">        Enable = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;Enable&quot;</span>);</span><br><span class="line">        SendString = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;SendString&quot;</span>);</span><br><span class="line">        RecvString = TCreate(<span class="keyword">new</span> xString(), <span class="string">&quot;RecvString&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">Init</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; PortCif = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; <span class="string">&quot;IPAddr&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;PortNo&quot;</span>, <span class="number">2112</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;RecvTimeout&quot;</span>, <span class="number">1000</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;EnableLog&quot;</span>, <span class="literal">true</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&quot;LogFileName&quot;</span>, LogFile &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            XmlFO.Configs.Get(<span class="string">&quot;TCPClient&quot;</span>, sPara, PortCif);</span><br><span class="line"></span><br><span class="line">            remoteIP = Convert.ToString(PortCif[<span class="string">&quot;IPAddr&quot;</span>]);</span><br><span class="line">            remotePort = Convert.ToInt32(PortCif[<span class="string">&quot;PortNo&quot;</span>]);</span><br><span class="line">            recvTimeout = Convert.ToInt32(PortCif[<span class="string">&quot;RecvTimeout&quot;</span>]);</span><br><span class="line">            EnableLog = Convert.ToBoolean(PortCif[<span class="string">&quot;EnableLog&quot;</span>]);</span><br><span class="line">            LogFile = Convert.ToString(PortCif[<span class="string">&quot;LogFileName&quot;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            xErrorOutException(e);</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">RFIDRecv</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!IsOnline())</span><br><span class="line">                Connect();</span><br><span class="line">            <span class="built_in">string</span> sendData = <span class="string">&quot;\u0002&quot;</span> + XmlFO.StringAnalysis(sPara) + <span class="string">&quot;\u0003&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> tcpRecvString = TCPSendRecv(sendData);</span><br><span class="line">            <span class="keyword">if</span> (tcpRecvString.Length &lt; <span class="number">40</span>)</span><br><span class="line">                <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">            tcpRecvString = tcpRecvString.Substring(<span class="number">24</span>, <span class="number">40</span>).Trim();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> length = tcpRecvString.Length;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[length / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                bytes[i / <span class="number">2</span>] = Convert.ToByte(tcpRecvString.Substring(i, <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            tcpRecvString = Encoding.ASCII.GetString(bytes).Trim(<span class="string">&#x27;\0&#x27;</span>).Trim();</span><br><span class="line">            RecvString.xValue = tcpRecvString;</span><br><span class="line">            Logout(<span class="string">&quot;Recv -&gt; VIN: &quot;</span> + tcpRecvString);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Logout(ex.ToString());</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> xState <span class="title">RFIDWriteVIN</span>(<span class="params"><span class="built_in">string</span> sPara</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!IsOnline())</span><br><span class="line">                Connect();</span><br><span class="line">            <span class="built_in">string</span> vin = XmlFO.StringAnalysis(sPara.Trim());</span><br><span class="line">            Logout(<span class="string">&quot;写入VIN: &quot;</span> + vin);</span><br><span class="line">            <span class="built_in">string</span> vinHexString = <span class="built_in">string</span>.Empty;</span><br><span class="line">            Encoding.ASCII.GetBytes(vin).ToList().ForEach(b =&gt; vinHexString += b.ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> sendString = <span class="string">&quot;\u0002&quot;</span> + <span class="string">&quot;sMN TAwriteTagData 0 3 0 9 32 +36 &quot;</span> + vinHexString.PadRight(<span class="number">36</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&quot;\u0003&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> tcpRecvString = TCPSendRecv(sendString);</span><br><span class="line">            RecvString.xValue = tcpRecvString;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> xState.xTrue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Logout(ex.ToString());</span><br><span class="line">            <span class="keyword">return</span> xState.xFalse;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">TCPSendRecv</span>(<span class="params"><span class="built_in">string</span> sendData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Logout(<span class="string">&quot;Send -&gt; &quot;</span> + sendData);</span><br><span class="line">        tcpClient.Client.Send(Encoding.ASCII.GetBytes(sendData));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] tcpRecvByts = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">int</span> recvLength = tcpClient.Client.Receive(tcpRecvByts);</span><br><span class="line">        <span class="keyword">if</span> (recvLength &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">byte</span>[] tmpRecvData = <span class="keyword">new</span> <span class="built_in">byte</span>[recvLength];</span><br><span class="line">        Array.Copy(tcpRecvByts, tmpRecvData, recvLength);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> tcpRecvString = Encoding.ASCII.GetString(tmpRecvData).Trim(<span class="string">&#x27;\0&#x27;</span>).Trim();</span><br><span class="line">        Logout(<span class="string">&quot;Recv -&gt; &quot;</span> + tcpRecvString);</span><br><span class="line">        <span class="keyword">return</span> tcpRecvString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Connect</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpClient == <span class="literal">null</span>)</span><br><span class="line">            tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line">        <span class="keyword">if</span> (tcpClient.Connected)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        tcpClient.Close();</span><br><span class="line">        tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line">        tcpClient.Connect(IPAddress.Parse(remoteIP), remotePort);</span><br><span class="line">        tcpClient.Client.ReceiveTimeout = recvTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsOnline</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpClient == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">bool</span> onLine = !((tcpClient.Client.Poll(<span class="number">100</span>, SelectMode.SelectRead) &amp;&amp; (tcpClient.Client.Available == <span class="number">0</span>)) || !tcpClient.Client.Connected);</span><br><span class="line">        <span class="keyword">if</span> (!onLine)</span><br><span class="line">            tcpClient = <span class="literal">null</span>;</span><br><span class="line">        Connected.xValue = onLine.ToString();</span><br><span class="line">        <span class="keyword">return</span> onLine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Logout</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(EnableLog)</span><br><span class="line">            OnlyOneStartUp.Log(LogFile, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;SICK RFID RFU630&lt;/code&gt;通电后默认启动&lt;code&gt;192.168.0.1 2112&lt;/code&gt; &lt;code&gt;tcp&lt;/code&gt;服务, 客户端可直接发送读写命令正常使用, 若需配置功率等则要安装&lt;code&gt;SOPAS_Engineering_Tool&lt;/code&gt; 工具进行配置&lt;br&gt;</summary>
    
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/CSharp/"/>
    
    <category term="BBK" scheme="https://silencejql.github.io/categories/CSharp/BBK/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="BBK" scheme="https://silencejql.github.io/tags/BBK/"/>
    
    <category term="RFID" scheme="https://silencejql.github.io/tags/RFID/"/>
    
  </entry>
  
  <entry>
    <title>CSharp调用C++ dll</title>
    <link href="https://silencejql.github.io/CSharp%E8%B0%83%E7%94%A8C-dll.html"/>
    <id>https://silencejql.github.io/CSharp%E8%B0%83%E7%94%A8C-dll.html</id>
    <published>2025-07-02T02:20:46.000Z</published>
    <updated>2025-07-02T02:24:33.475Z</updated>
    
    <content type="html"><![CDATA[<p>C#中动态加载C++ DLL文件<br><span id="more"></span></p><p>在C#中动态加载C++ DLL（动态链接库）可以通过几种方式实现。下面我将介绍最常用的方法：</p><h2 id="1-使用DllImport特性（静态加载）"><a href="#1-使用DllImport特性（静态加载）" class="headerlink" title="1. 使用DllImport特性（静态加载）"></a>1. 使用DllImport特性（静态加载）</h2><p>这是最常见的方式，虽然不是完全动态的，但值得了解：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 声明DLL中的函数</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;YourCppDll.dll&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">YourCppFunction</span>(<span class="params"><span class="built_in">int</span> param1, <span class="built_in">string</span> param2</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用DLL中的函数</span></span><br><span class="line">        <span class="built_in">int</span> result = YourCppFunction(<span class="number">123</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用LoadLibrary和GetProcAddress（真正动态加载）"><a href="#2-使用LoadLibrary和GetProcAddress（真正动态加载）" class="headerlink" title="2. 使用LoadLibrary和GetProcAddress（真正动态加载）"></a>2. 使用LoadLibrary和GetProcAddress（真正动态加载）</h2><p>如果你想在运行时决定加载哪个DLL，可以使用Windows API：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 导入Windows API函数</span></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">LoadLibrary</span>(<span class="params"><span class="built_in">string</span> dllToLoad</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetProcAddress</span>(<span class="params">IntPtr hModule, <span class="built_in">string</span> procedureName</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">FreeLibrary</span>(<span class="params">IntPtr hModule</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义委托类型匹配C++函数签名</span></span><br><span class="line">    [<span class="meta">UnmanagedFunctionPointer(CallingConvention.Cdecl)</span>]</span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">YourCppFunctionDelegate</span>(<span class="params"><span class="built_in">int</span> param1, <span class="built_in">string</span> param2</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IntPtr pDll = LoadLibrary(<span class="string">@&quot;YourCppDll.dll&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pDll == IntPtr.Zero)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Failed to load DLL&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        IntPtr pAddressOfFunctionToCall = GetProcAddress(pDll, <span class="string">&quot;YourCppFunction&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pAddressOfFunctionToCall == IntPtr.Zero)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Failed to find function&quot;</span>);</span><br><span class="line">            FreeLibrary(pDll);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将函数指针转换为委托</span></span><br><span class="line">        YourCppFunctionDelegate yourFunction = Marshal.GetDelegateForFunctionPointer&lt;YourCppFunctionDelegate&gt;(pAddressOfFunctionToCall);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用函数</span></span><br><span class="line">        <span class="built_in">int</span> result = yourFunction(<span class="number">123</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放DLL</span></span><br><span class="line">        FreeLibrary(pDll);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用COM-Interop（如果DLL是COM组件）"><a href="#3-使用COM-Interop（如果DLL是COM组件）" class="headerlink" title="3. 使用COM Interop（如果DLL是COM组件）"></a>3. 使用COM Interop（如果DLL是COM组件）</h2><p>如果C++ DLL是COM组件，可以使用COM互操作：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type comType = Type.GetTypeFromProgID(<span class="string">&quot;YourCOMComponent.YourClass&quot;</span>);</span><br><span class="line"><span class="built_in">dynamic</span> comObject = Activator.CreateInstance(comType);</span><br><span class="line">comObject.YourMethod(<span class="number">123</span>, <span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p><strong>调用约定</strong>：确保C#端和C++端的调用约定一致（通常C++使用<code>__cdecl</code>或<code>__stdcall</code>）。</p></li><li><p><strong>数据类型映射</strong>：注意C++和C#之间的数据类型转换，特别是字符串和指针类型。</p></li><li><p><strong>32/64位兼容性</strong>：确保DLL和应用程序的平台架构一致（同为x86或x64）。</p></li><li><p><strong>DLL位置</strong>：DLL文件需要放在应用程序可找到的路径（如exe所在目录或系统PATH中）。</p></li><li><p><strong>内存管理</strong>：如果DLL分配内存，确保有相应的释放机制，避免内存泄漏。</p></li><li><p><strong>异常处理</strong>：C++异常不能直接传递到C#，需要在C++端捕获并转换为错误码。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;C#中动态加载C++ DLL文件&lt;br&gt;</summary>
    
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/CSharp/"/>
    
    <category term="C++" scheme="https://silencejql.github.io/categories/CSharp/C/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="C" scheme="https://silencejql.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>AlgorithmLearning-汉诺塔(分治递归)</title>
    <link href="https://silencejql.github.io/AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92.html"/>
    <id>https://silencejql.github.io/AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92.html</id>
    <published>2025-06-19T05:10:17.000Z</published>
    <updated>2025-07-21T05:25:36.039Z</updated>
    
    <content type="html"><![CDATA[<p>利用分治处理汉诺塔问题</p><span id="more"></span><h2 id="问题">问题</h2><p>给定三根柱子，记为 A、B 和 C 。起始状态下，柱子A 上套着 𝑛 个圆盘，它们从上到下按照从小到大的顺序排列。我们的任务是要把这 𝑛 个圆盘移到柱子C 上，并保持它们的原有顺序不变</p><ol><li>圆盘只能从一根柱子顶部拿出，从另一根柱子顶部放入。</li><li>每次只能移动一个圆盘。</li><li>小圆盘必须时刻位于大圆盘之上。<br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133250.png" alt="AC"></li></ol><h3 id="问题分析">问题分析</h3><h4 id="对于问题-𝑓-1">对于问题 𝑓(1)</h4><p>即当只有一个圆盘时，我们将它直接从 A 移动至 C 即可<br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133711.png" alt="AC"></p><h4 id="对于问题-𝑓-2">对于问题 𝑓(2)</h4><p>即当有两个圆盘时， 由于要时刻满足小圆盘在大圆盘之上，因此需要借助<br>B 来完成移动。</p><ol><li>先将上面的小圆盘从 A 移至 B 。</li><li>再将大圆盘从 A 移至 C 。</li><li>最后将小圆盘从 B 移至 C 。<br>解决问题 𝑓(2) 的过程可总结为： 将两个圆盘借助 B 从 A 移至 C 。其中，C 称为目标柱、B 称为缓冲柱。<br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133805.png" alt="AC1"><br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133825.png" alt="AC2"><br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133831.png" alt="AC3"><br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133835.png" alt="AC4"></li></ol><h4 id="对于问题-𝑓-3">对于问题 𝑓(3)</h4><p>即当有三个圆盘时，情况变得稍微复杂了一些。<br>因为已知 𝑓(1) 和 𝑓(2) 的解，所以我们可从分治角度思考， 将 A 顶部的两个圆盘看作一个整体, 这样三个圆盘就被顺利地从 A 移至 C 了。</p><ol><li>令 B 为目标柱、 C 为缓冲柱，将两个圆盘从 A 移至 B 。</li><li>将 A 中剩余的一个圆盘从 A 直接移动至 C 。</li><li>令 C 为目标柱、 A 为缓冲柱，将两个圆盘从 B 移至 C 。<br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133859.png" alt="AC"><br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133903.png" alt="AC"><br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133907.png" alt="AC"><br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133919.png" alt="AC"></li></ol><p>从本质上看， 我们将问题 𝑓(3) 划分为两个子问题 𝑓(2) 和一个子问题 𝑓(1) 。按顺序解决这三个子问题之后，<br>原问题随之得到解决。这说明子问题是独立的，而且解可以合并。<br>至此，我们可总结出下图所示的解决汉诺塔问题的分治策略：将原问题 𝑓(𝑛) 划分为两个子问题 𝑓(𝑛-1)<br>和一个子问题 𝑓(1) ，并按照以下顺序解决这三个子问题。</p><ol><li>将 𝑛 - 1 个圆盘借助 C 从 A 移至 B 。</li><li>将剩余 1 个圆盘从 A 直接移至 C 。</li><li>将 𝑛 - 1 个圆盘借助 A 从 B 移至 C 。<br>对于这两个子问题 𝑓(𝑛 - 1) ， 可以通过相同的方式进行递归划分，直至达到最小子问题 𝑓(1) 。而 𝑓(1) 的<br>解是已知的，只需一次移动操作即可。<br><img src="AlgorithmLearning-%E6%B1%89%E8%AF%BA%E5%A1%94-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92/20250619133615.png" alt="AC"></li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 移动一个圆盘 */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; src, List&lt;<span class="built_in">int</span>&gt; target</span>)</span> </span><br><span class="line">&#123;  </span><br><span class="line"> <span class="comment">// 从 src 顶部拿出一个圆盘  </span></span><br><span class="line"> <span class="built_in">int</span> pan = src[^<span class="number">1</span>];  </span><br><span class="line"> src.RemoveAt(src.Count - <span class="number">1</span>);  </span><br><span class="line"> <span class="comment">// 将圆盘放入 target 顶部  </span></span><br><span class="line"> target.Add(pan);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 求解汉诺塔问题 f(i) */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span>(<span class="params"><span class="built_in">int</span> i, List&lt;<span class="built_in">int</span>&gt; src, List&lt;<span class="built_in">int</span>&gt; buffer, List&lt;<span class="built_in">int</span>&gt; target</span>)</span> &#123;  </span><br><span class="line"> <span class="comment">// 若 src 只剩下一个圆盘，则直接将其移到 target  </span></span><br><span class="line"> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;  </span><br><span class="line">  Move(src, target);  </span><br><span class="line">  <span class="keyword">return</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">// 子问题 f(i-1) ：将 src 顶部 i-1 个圆盘借助 target 移到 buffer  </span></span><br><span class="line"> DFS(i - <span class="number">1</span>, src, target, buffer);  </span><br><span class="line"> <span class="comment">// 子问题 f(1) ：将 src 剩余一个圆盘移到 target  </span></span><br><span class="line"> Move(src, target);  </span><br><span class="line"> <span class="comment">// 子问题 f(i-1) ：将 buffer 顶部 i-1 个圆盘借助 src 移到 target</span></span><br><span class="line"> DFS(i - <span class="number">1</span>, buffer, src, target);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 求解汉诺塔问题 */</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SolveHanota</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; A, List&lt;<span class="built_in">int</span>&gt; B, List&lt;<span class="built_in">int</span>&gt; C</span>)</span> &#123;  </span><br><span class="line"> <span class="built_in">int</span> n = A.Count;  </span><br><span class="line"> <span class="comment">// 将 A 顶部 n 个圆盘借助 B 移到 C  </span></span><br><span class="line"> DFS(n, A, B, C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用分治处理汉诺塔问题&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://silencejql.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/%E7%AE%97%E6%B3%95/CSharp/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="算法" scheme="https://silencejql.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AlgorithmLearning-二分查找(分治递归)</title>
    <link href="https://silencejql.github.io/AlgorithmLearning-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92.html"/>
    <id>https://silencejql.github.io/AlgorithmLearning-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92.html</id>
    <published>2025-06-19T04:50:21.000Z</published>
    <updated>2025-07-21T05:23:58.845Z</updated>
    
    <content type="html"><![CDATA[<p>基于分治的二分查找</p><span id="more"></span><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] sortedArray2 = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">46</span>, <span class="number">57</span>, <span class="number">68</span>, <span class="number">79</span> &#125;;  </span><br><span class="line">FindIndex(sortedArray2, <span class="number">25</span>, <span class="number">0</span>, <span class="number">9</span>);  </span><br><span class="line"><span class="comment">//查找target = 6的index  </span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">FindIndex</span>(<span class="params"><span class="built_in">int</span>[] sortedArray, <span class="built_in">int</span> target, <span class="built_in">int</span> start, <span class="built_in">int</span> end</span>)</span>  </span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(start &gt; end)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> <span class="built_in">int</span> mid = (start + end) / <span class="number">2</span>;  </span><br><span class="line">    mid.Dump();</span><br><span class="line">    <span class="keyword">if</span>(sortedArray[mid] == target)</span><br><span class="line">     <span class="keyword">return</span> mid;    </span><br><span class="line"> <span class="keyword">if</span>(sortedArray[mid] &lt; target)  </span><br><span class="line">    &#123;        </span><br><span class="line">     <span class="comment">//递归子问题f(m + 1, end)</span></span><br><span class="line">     <span class="keyword">return</span> FindIndex(sortedArray, target, mid + <span class="number">1</span>, end);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">     <span class="comment">//递归子问题f(start, m - 1) </span></span><br><span class="line">     <span class="keyword">return</span> FindIndex(sortedArray, target, start, mid - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于分治的二分查找&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://silencejql.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/%E7%AE%97%E6%B3%95/CSharp/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="算法" scheme="https://silencejql.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSharp补课笔记TypeConverter</title>
    <link href="https://silencejql.github.io/CSharp%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0TypeConverter.html"/>
    <id>https://silencejql.github.io/CSharp%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0TypeConverter.html</id>
    <published>2025-05-03T08:13:14.000Z</published>
    <updated>2025-05-03T08:23:29.681Z</updated>
    
    <content type="html"><![CDATA[<p>实现不同类型之间的转换, 如动态的将字符串转换为对象实例</p><span id="more"></span><h2 id="示例">示例</h2><h3 id="使用示例">使用示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestTypeConvert</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    TypeConverter tc = TypeDescriptor.GetConverter(<span class="keyword">typeof</span>(ColorRGB));</span><br><span class="line"></span><br><span class="line">    ColorRGB colorRGB1 = (ColorRGB)tc.ConvertFromString(<span class="string">&quot;#FF8800&quot;</span>);</span><br><span class="line">    ColorRGB colorRGB2 = (ColorRGB)tc.ConvertFromString(<span class="string">&quot;255, 136, 0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> colorString1 = tc.ConvertToString(colorRGB1);</span><br><span class="line">    <span class="built_in">string</span> colorString2 = tc.ConvertToString(colorRGB2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类型">自定义类型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将转换器与目标类型关联</span></span><br><span class="line">[<span class="meta">TypeConverter(typeof(ColorRGBConverter))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ColorRGB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> R; <span class="keyword">public</span> <span class="built_in">byte</span> G; <span class="keyword">public</span> <span class="built_in">byte</span> B;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorRGB</span>(<span class="params"><span class="built_in">byte</span> r, <span class="built_in">byte</span> g, <span class="built_in">byte</span> b</span>)</span></span><br><span class="line">    &#123; R = r; G = g; B = b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;#&#123;0:X2&#125;&#123;1:X2&#125;&#123;2:X2&#125;&quot;</span>, R, G, B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义类型转换器">定义类型转换器</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ColorRGBConverter</span> : <span class="title">TypeConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义可以从哪些类型转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanConvertFrom</span>(<span class="params">ITypeDescriptorContext context, Type sourceType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sourceType == <span class="keyword">typeof</span>(<span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanConvertTo</span>(<span class="params">ITypeDescriptorContext context, Type destinationType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.CanConvertTo(context, destinationType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现将字符串转化为对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ConvertFrom</span>(<span class="params">ITypeDescriptorContext context, CultureInfo culture, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span> <span class="keyword">is</span> <span class="built_in">string</span> strValue)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(strValue.StartsWith(<span class="string">&quot;#&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (strValue.Length == <span class="number">7</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ColorRGB(<span class="built_in">byte</span>.Parse(strValue.Substring(<span class="number">1</span>,<span class="number">2</span>), NumberStyles.HexNumber),</span><br><span class="line">                                            <span class="built_in">byte</span>.Parse(strValue.Substring(<span class="number">3</span>,<span class="number">2</span>), NumberStyles.HexNumber),</span><br><span class="line">                                            <span class="built_in">byte</span>.Parse(strValue.Substring(<span class="number">5</span>,<span class="number">2</span>), NumberStyles.HexNumber));                        </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span>[] parts = strValue.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> ColorRGB(<span class="built_in">byte</span>.Parse(parts[<span class="number">0</span>].Trim()),</span><br><span class="line">                                        <span class="built_in">byte</span>.Parse(parts[<span class="number">1</span>].Trim()),</span><br><span class="line">                                        <span class="built_in">byte</span>.Parse(parts[<span class="number">2</span>].Trim()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FormatException(<span class="string">&quot;格式不正确&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.ConvertFrom(context, culture, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ConvertTo</span>(<span class="params">ITypeDescriptorContext context, CultureInfo culture, <span class="built_in">object</span> <span class="keyword">value</span>, Type destinationType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span> <span class="keyword">is</span> ColorRGB &amp;&amp; destinationType == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>.ToString();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.ConvertTo(context, culture, <span class="keyword">value</span>, destinationType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展">扩展</h2><p>CultureInfo主要用于特定区域的数字, 日期, 货币等格式化设置</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现不同类型之间的转换, 如动态的将字符串转换为对象实例&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="CSharp 补课笔记" scheme="https://silencejql.github.io/tags/CSharp-%E8%A1%A5%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>BEP软件配置实现与BBK通讯</title>
    <link href="https://silencejql.github.io/BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF.html"/>
    <id>https://silencejql.github.io/BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF.html</id>
    <published>2025-05-03T05:14:45.000Z</published>
    <updated>2025-07-21T05:28:42.932Z</updated>
    
    <content type="html"><![CDATA[<p>配置BEP四轮软件和注册表实现BBK与BEP通讯</p><span id="more"></span><h2 id="通讯简介">通讯简介</h2><p>BBK与BEP软件之间可选择串口(232)和TCP两种通讯方式, 现场常用串口通讯<br>软件之间交互主要有两个, 1. BBK扫码后将车型信息发送给BEP; 2. BEP将测试结果发送给BBK软件</p><h2 id="注册表配置">注册表配置</h2><h3 id="选择通讯方式">选择通讯方式</h3><h4 id="串口">串口</h4><p><img src="BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF/RegSerial.PNG" alt="Reg"></p><p>如上图<code>Use Host</code>用于配置软件间的通讯方式, 1为串口通讯, 2为网络通讯<br>当选择串口通讯时需要在软件中配置串口号, BEP软件对串口号的列举有限制,若串口使用扩展设备时串口号大于限值则不会在软件中显示, 这时需要将限值改大后再选择对应串口, 对应更改上图中的<code>Number of Serial Ports on Machine</code>.</p><h4 id="网口">网口</h4><p><img src="BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF/RegTcpip.PNG" alt="Tcp"></p><p>若选择网口通讯则需要配置上图所示的IP及端口号</p><h3 id="Host配置">Host配置</h3><p>BEP与BBK软件通讯中有相应的协议规则, 为了更方便的使用需要屏蔽一些规则</p><p><img src="BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF/RegHost.PNG" alt="Host"></p><p>其中最主要的是要将<code>Use Host Handshaking</code>握手的配置改为0屏蔽掉, 否则无法直接与BEP软件进行数据交互<br>也可将图中所有<code>Use</code>开头值为1的配置改为0</p><h3 id="BEP软件配置">BEP软件配置</h3><h4 id="串口-v2">串口</h4><p><img src="BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF/BEPSerial.PNG" alt="Serial"></p><p>配置完注册表后需要配置BEP软件中的串口号<br>其中BEP软件通过HOST串口将测试数据发送给BBK<br>通过SCANNER串口接收BBK发送的车型信息<br>其他不需要的不用管或者在注册表中屏蔽</p><h4 id="网口-v2">网口</h4><p><img src="BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF/BEPTcp.PNG" alt="TCP"></p><p>若选择网口通讯则需要在上图中进行配置</p><h4 id="车型数据规则配置">车型数据规则配置</h4><p><img src="BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF/BEPVINConfig.PNG" alt="VIN"></p><p>BEP接收BBK发送车型数据字符串后会解析为VIN和ZTS, 由于ZTS可能存在不同长度所以需要配置不同的解析规则</p><p>具体配置参考上图, VIN为17位, ZTS为2位</p><p>BBK发送的车型数据也有一定规则, 在上图第二个标签也中进行配置, 默认为<code>0x02</code>STX开头, <code>0x03</code>ETX结尾</p><h4 id="测试结果发送配置">测试结果发送配置</h4><p><img src="BEP%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E4%B8%8EBBK%E9%80%9A%E8%AE%AF/BEPRsm.PNG" alt="rsm"></p><p>BEP通过图中<code>rsm_hoststring.xml</code>中配置的规则生成数据字符串后发送给BBK, BBK接收后通过同样的规则进行解析, 因此需要保证BEP和BBK调用该文件的一致性, 上图为BEP软件读取路径, 该路径在注册表配置HOST时可更改; BBK文件路径在相应Config文件下</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;配置BEP四轮软件和注册表实现BBK与BEP通讯&lt;/p&gt;</summary>
    
    
    
    
    <category term="BBK" scheme="https://silencejql.github.io/tags/BBK/"/>
    
  </entry>
  
  <entry>
    <title>Docker-composer常用指令</title>
    <link href="https://silencejql.github.io/Docker-composer%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html"/>
    <id>https://silencejql.github.io/Docker-composer%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html</id>
    <published>2025-04-01T07:21:20.000Z</published>
    <updated>2025-04-01T07:21:50.431Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id=""></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取工程中所有服务依赖的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pull</span></span><br><span class="line"><span class="comment"># 拉取工程中 nginx 服务依赖的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pull</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前台启动</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"><span class="comment"># -f 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">-f</span> <span class="string">docker-compose.yml</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出日志，不同的服务输出使用不同的颜色来区分</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">logs</span></span><br><span class="line"><span class="comment"># 跟踪日志输出</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">logs</span> <span class="string">-f</span></span><br><span class="line"><span class="comment"># 关闭颜色</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">logs</span> <span class="string">--no-color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">ps</span></span><br><span class="line"><span class="comment"># 列出工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">ps</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在工程中指定服务的容器上执行 echo &quot;helloworld&quot;</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">run</span> <span class="string">nginx</span> <span class="string">echo</span> <span class="string">&quot;helloworld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">exec</span> <span class="string">nginx</span> <span class="string">bash</span></span><br><span class="line"><span class="comment"># 当一个服务拥有多个容器时，可通过 --index 参数进入到该服务下的任何容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">exec</span> <span class="string">--index=1</span> <span class="string">nginx</span> <span class="string">bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pause</span></span><br><span class="line"><span class="comment"># 暂停工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">pause</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">unpause</span></span><br><span class="line"><span class="comment"># 恢复工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">unpause</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">restart</span></span><br><span class="line"><span class="comment"># 重启工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">start</span></span><br><span class="line"><span class="comment"># 启动工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">start</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止工程中所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span></span><br><span class="line"><span class="comment"># 停止工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过发送 SIGKILL 信号停止工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">kill</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有（停止状态）服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span></span><br><span class="line"><span class="comment"># 先停止所有服务的容器，再删除所有服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-s</span></span><br><span class="line"><span class="comment"># 不询问是否删除，直接删除</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-f</span></span><br><span class="line"><span class="comment"># 删除服务容器挂载的数据卷</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-v</span></span><br><span class="line"><span class="comment"># 删除工程中指定服务的容器</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">rm</span> <span class="string">-sv</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并删除工程中所有服务的容器、网络</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span></span><br><span class="line"><span class="comment"># 停止并删除工程中所有服务的容器、网络、镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">down</span> <span class="string">--rmi</span> <span class="string">all</span></span><br><span class="line"><span class="comment"># 停止并删除工程中所有服务的容器、网络、数据卷</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">down</span> <span class="string">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有服务的容器所对应的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">images</span></span><br><span class="line"><span class="comment"># 打印指定服务的容器所对应的镜像</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">images</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定服务容器的某个端口所映射的宿主机端口</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">port</span> <span class="string">nginx</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工程中所有服务的容器正在运行的进程</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">top</span></span><br><span class="line"><span class="comment"># 显示工程中指定服务的容器正在运行的进程</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">top</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker-composer常用指令</summary>
    
    
    
    
    <category term="Docker" scheme="https://silencejql.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装配置Docker</title>
    <link href="https://silencejql.github.io/Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEDocker.html"/>
    <id>https://silencejql.github.io/Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEDocker.html</id>
    <published>2025-04-01T06:12:25.000Z</published>
    <updated>2025-04-01T06:29:48.838Z</updated>
    
    <content type="html"><![CDATA[<p>windows安装docker, 示例部署gitlab</p><span id="more"></span><h2 id="安装">安装</h2><p>自行下载安装Docker Desktop</p><p>安装完成后命令行输入<code>docker -v</code>可查看Docker版本信息</p><h2 id="配置">配置</h2><h3 id="配置镜像源">配置镜像源</h3><ol><li><p>在配置中添加registry mirrors</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;registry-mirrors&quot;:</span> [</span><br><span class="line"> <span class="string">&quot;https://docker.1ms.run&quot;</span>,</span><br><span class="line"> <span class="string">&quot;https://docker.xuanyuan.me&quot;</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li><li><p>修改docker/daemon.json文件设置registry mirrors</p></li></ol><h3 id="拉去镜像">拉去镜像</h3><p>如: 拉取gitlab<code>docker pull gitlab/gitlab-ee:latest</code></p><h4 id="Gitlab配置">Gitlab配置</h4><p>新建文件路径存储Gitlab信息如:</p><blockquote><p>gitlab</p><blockquote><p>config<br>data<br>logs<br>docker-compose.yml</p></blockquote></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ee:latest&#x27;</span>  <span class="comment"># 使用 GitLab 企业版镜像，或将 &#x27;gitlab-ee&#x27; 改为 &#x27;gitlab-ce&#x27; 使用社区版</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;localhost&#x27;</span>  <span class="comment"># 配置 GitLab 的主机名，可以改为你自己的域名或 IP 地址</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        external_url &#x27;http://localhost&#x27;  # GitLab 的外部 URL，建议替换为你服务器的域名或 IP</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>    <span class="comment"># 映射 HTTP 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span>  <span class="comment"># 映射 HTTPS 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;22:22&#x27;</span>    <span class="comment"># 映射 SSH 端口，供 GitLab 使用</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gitlab/logs:/var/log/gitlab</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&#x27;json-file&#x27;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&#x27;2g&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="启动Gitlab">启动Gitlab</h4><p>使用命令<code>docker-compose up -d</code>启动容器需要一定时间, 期间可以用<code>docker ps</code>查看状态, 从starting转为healthy则启动成功<br>访问<a href="http://xn--localhostgitlab-ym1zi4dy26g750f">http://localhost即可登录gitlab</a><br>默认用户为：root 密码在gitlab部署目录下gitlab下的gitlab/config/initial_root_password文件中</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;windows安装docker, 示例部署gitlab&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://silencejql.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>BBK查询软件新增查询链接</title>
    <link href="https://silencejql.github.io/BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5.html"/>
    <id>https://silencejql.github.io/BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5.html</id>
    <published>2025-03-24T05:49:18.000Z</published>
    <updated>2025-03-24T11:45:53.004Z</updated>
    
    <content type="html"><![CDATA[<p>BBK查询软件新增或修改数据库链接字符串<br>可手动更改链接字符串或根据以下步骤自动生成</p><span id="more"></span><h2 id="新增本地链接Local">新增本地链接Local</h2><ol><li>登录管理员后勾选编辑模式</li><li>双击要更改的名称或点击添加连接<br><img src="BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5%5C%E9%80%89%E6%8B%A9%E9%93%BE%E6%8E%A5.png" alt="选择链接"></li><li>点击<strong>创建链接字符串</strong>选择相应的数据源, 本地PostgreSql选择如下<br><img src="BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5%5C%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E6%BA%90.png" alt="选择数据源"></li><li>配置连接属性如下, 其中Host可配置被访问数据库的ip<br><img src="BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5%5C%E8%BF%9E%E6%8E%A5%E5%B1%9E%E6%80%A7.png" alt="连接属性"></li><li>单击确定即可</li></ol><h2 id="新增服务器链接Server">新增服务器链接Server</h2><ol><li>登录管理员后勾选编辑模式</li><li>双击要更改的名称或点击添加连接后点击<strong>创建链接字符串</strong>选择相应的数据源, 服务器SQLServer选择如下<br><img src="BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5%5C%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E6%BA%90Server.png" alt="选择数据源"></li><li>配置链接属性如下, 其中Server name可配置被访问数据库的ip<br><img src="BBK%E6%9F%A5%E8%AF%A2%E8%BD%AF%E4%BB%B6%E6%96%B0%E5%A2%9E%E6%9F%A5%E8%AF%A2%E9%93%BE%E6%8E%A5%5C%E8%BF%9E%E6%8E%A5%E5%B1%9E%E6%80%A7Server.png" alt="连接属性"></li><li>单击确定即可</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;BBK查询软件新增或修改数据库链接字符串&lt;br&gt;
可手动更改链接字符串或根据以下步骤自动生成&lt;/p&gt;</summary>
    
    
    
    <category term="BBK" scheme="https://silencejql.github.io/categories/BBK/"/>
    
    
    <category term="BBK" scheme="https://silencejql.github.io/tags/BBK/"/>
    
  </entry>
  
  <entry>
    <title>Obsidain Dataview使用</title>
    <link href="https://silencejql.github.io/Obsidain-Dataview%E4%BD%BF%E7%94%A8.html"/>
    <id>https://silencejql.github.io/Obsidain-Dataview%E4%BD%BF%E7%94%A8.html</id>
    <published>2025-03-11T02:45:05.000Z</published>
    <updated>2025-03-11T02:45:05.425Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id=""></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;/h2&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo部署到Gitlab</title>
    <link href="https://silencejql.github.io/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Gitlab.html"/>
    <id>https://silencejql.github.io/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Gitlab.html</id>
    <published>2025-03-08T09:24:38.000Z</published>
    <updated>2025-03-24T11:46:43.005Z</updated>
    
    <content type="html"><![CDATA[<p>博客部署到Gitlab与部署到Github等生成静态页面不同, Gitlab中需要存储完整代码.</p><span id="more"></span><h2 id="完整步骤">完整步骤</h2><p>以下是使用 <strong>Hexo</strong> 部署到 <strong>GitLab Pages</strong> 创建个人博客的完整指南，包含详细步骤和常见问题排查：</p><hr><h3 id="一、准备工作">一、准备工作</h3><ol><li><p><strong>安装 Node.js 和 npm</strong><br>Hexo 基于 Node.js，需先安装 <a href="https://nodejs.org/">Node.js</a>（建议选择 LTS 版本）。</p></li><li><p><strong>安装 Git</strong><br>下载并安装 <a href="https://git-scm.com/">Git</a>，用于代码管理。</p></li><li><p><strong>注册 GitLab 账号</strong><br>访问 <a href="https://gitlab.com/">GitLab</a> 注册账号。</p></li></ol><hr><h3 id="二、安装-Hexo-并初始化博客">二、安装 Hexo 并初始化博客</h3><ol><li><p><strong>全局安装 Hexo 命令行工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 Hexo 项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init my-blog  <span class="comment"># 创建名为 my-blog 的博客目录</span></span><br><span class="line"><span class="built_in">cd</span> my-blog         <span class="comment"># 进入项目目录</span></span><br><span class="line">npm install        <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure></li><li><p><strong>本地预览</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server        <span class="comment"># 启动本地服务器</span></span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost:4000</code> 查看默认博客。</p></li></ol><hr><h3 id="三、关联-GitLab-仓库">三、关联 GitLab 仓库</h3><ol><li><p><strong>在 GitLab 创建新项目</strong></p><ul><li>登录 GitLab → <strong>New project</strong> → <strong>Create blank project</strong>。</li><li>填写项目名称（如 <code>my-blog</code>），可见性选择 <code>Public</code>。</li><li><strong>重要</strong>：项目名称需与 Hexo 的 <code>_config.yml</code> 中配置的路径一致（默认无需修改）。</li></ul></li><li><p><strong>本地关联 GitLab 仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://gitlab.com/你的用户名/my-blog.git</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="四、配置-Hexo-部署到-GitLab">四、配置 Hexo 部署到 GitLab</h3><ol><li><p><strong>安装 Hexo Git 部署插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p><strong>修改 Hexo 配置文件</strong><br>打开 <code>_config.yml</code>，找到 <code>deploy</code> 部分，修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitlab.com/你的用户名/my-blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># GitLab 默认分支是 main，不是 master！</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --deploy</span><br></pre></td></tr></table></figure><ul><li>此命令会将生成的静态文件（在 <code>public</code> 目录下）推送到 GitLab 的 <code>main</code> 分支。</li><li>但为了自动化构建，建议使用 GitLab CI/CD（见下一步）。</li></ul></li></ol><hr><h3 id="五、配置-GitLab-CI-CD-自动化部署">五、配置 GitLab CI/CD 自动化部署</h3><ol><li><p><strong>创建 <code>.gitlab-ci.yml</code> 文件</strong><br>在项目根目录新建文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node:16</span>  <span class="comment"># 使用 Node.js 16 环境</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node_modules/</span>  <span class="comment"># 缓存依赖加速构建</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span>  <span class="comment"># 全局安装 Hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span>  <span class="comment"># 生成静态文件到 public 目录</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span>  <span class="comment"># GitLab Pages 默认从 public 目录部署</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span>  <span class="comment"># 仅 main 分支触发构建</span></span><br></pre></td></tr></table></figure></li><li><p><strong>推送代码到 GitLab</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;初始化 Hexo 博客&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><p><strong>查看构建状态</strong></p><ul><li>进入 GitLab 项目 → <strong>CI/CD → Pipelines</strong>，查看流水线状态。</li><li>构建成功后，进入 <strong>Settings → Pages</strong>，确认网站地址。</li></ul></li></ol><hr><h3 id="六、访问博客">六、访问博客</h3><ul><li><p><strong>默认地址</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://你的用户名.gitlab.io/my-blog</span><br></pre></td></tr></table></figure><ul><li>如果项目名称为 <code>my-blog</code>，访问路径需包含项目名。</li><li>如果希望直接使用 <code>https://你的用户名.gitlab.io</code>，需将项目重命名为 <code>你的用户名.gitlab.io</code>（如 <code>john.gitlab.io</code>）。</li></ul></li></ul><hr><h3 id="七、自定义域名（可选）">七、自定义域名（可选）</h3><ol><li><p><strong>购买域名</strong><br>在域名服务商（如 GoDaddy、阿里云）购买域名（如 <code>example.com</code>）。</p></li><li><p><strong>配置 DNS 解析</strong></p><ul><li><p>添加 <code>CNAME</code> 记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主机名：blog  </span><br><span class="line">类型：CNAME  </span><br><span class="line">值：你的用户名.gitlab.io</span><br></pre></td></tr></table></figure></li><li><p>或添加 <code>A</code> 记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主机名：@  </span><br><span class="line">类型：A  </span><br><span class="line">值：35.185.44.232（GitLab Pages 的 IP）</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>GitLab 配置自定义域名</strong></p><ul><li><p>进入项目 → <strong>Settings → Pages</strong> → <strong>New Domain</strong>。</p></li><li><p>输入域名（如 <code>blog.example.com</code>），点击 <strong>Save</strong>。</p></li><li><p>在 Hexo 的 <code>source</code> 目录下创建 <code>CNAME</code> 文件（无后缀），内容为域名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.example.com</span><br></pre></td></tr></table></figure></li><li><p>推送代码使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add <span class="built_in">source</span>/CNAME</span><br><span class="line">git commit -m <span class="string">&quot;添加自定义域名&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="八、更新博客内容">八、更新博客内容</h3><ol><li><p><strong>新建文章</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure><ul><li>编辑文件 <code>source/_posts/我的第一篇文章.md</code>。</li></ul></li><li><p><strong>本地预览</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo server</span><br></pre></td></tr></table></figure></li><li><p><strong>部署到 GitLab</strong></p><ul><li><p><strong>方式一</strong>：手动生成并推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --deploy</span><br></pre></td></tr></table></figure></li><li><p><strong>方式二</strong>：触发 CI/CD 自动构建（推荐）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;添加新文章&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="九、常见问题解决">九、常见问题解决</h3><ol><li><p><strong>构建失败</strong></p><ul><li><strong>错误提示</strong>：<code>npm install</code> 失败。<ul><li>检查 <code>.gitlab-ci.yml</code> 中的 Node.js 版本是否与本地一致。</li></ul></li><li><strong>错误提示</strong>：<code>hexo generate</code> 报错。<ul><li>确保 <code>_config.yml</code> 中语法正确（避免使用 Tab 缩进，需用空格）。</li></ul></li></ul></li><li><p><strong>页面 404</strong></p><ul><li><strong>原因</strong>：访问路径错误。<ul><li>如果项目名为 <code>my-blog</code>，访问地址应为 <code>https://用户名.gitlab.io/my-blog</code>。</li><li>若希望根路径访问，需将项目重命名为 <code>用户名.gitlab.io</code>。</li></ul></li></ul></li><li><p><strong>自定义域名不生效</strong></p><ul><li>检查 <code>CNAME</code> 文件是否提交到仓库。</li><li>等待 DNS 解析生效（最长可能需要 48 小时）。</li></ul></li></ol><hr><p>按照以上步骤，你可以将 Hexo 博客无缝部署到 GitLab Pages，享受免费、稳定的静态网站托管服务！</p><h2 id="部署Github方式部署到Gitlab">部署Github方式部署到Gitlab</h2><ol><li><p>在<code>_config.yml</code>中增加部署仓库链接</p></li><li><p>新建<code>.gitlab-ci.yml</code>文件用于触发流水线</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pages:</span></span><br><span class="line"><span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">.public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">./*</span> <span class="string">.public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mv</span> <span class="string">.public</span> <span class="string">public</span></span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">$CI_DEFAULT_BRANCH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在执行完<code>hexo g</code>后先将<code>.gitlab-ci.yml</code>复制到<code>.deploy_git</code>中再执行<code>hexo d</code></p></li></ol><h2 id="官方方式">官方方式</h2><ol><li><p>如果你更希望你的站点部署在 <code>&lt;你的 GitLab 用户名&gt;.gitlab.io</code> 的子目录中，你的 <code>repository</code> 需要直接命名为子目录的名字，这样你的站点可以通过 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io/&lt;repository 的名字&gt;</code> 访问。 你需要检查你的 Hexo 配置文件，将 url 的值修改为 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io/&lt;repository 的名字&gt;</code>、将 root 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p></li><li><p>通过 Settings &gt; CI/CD &gt; Runners &gt; Enable shared runners for this project 启用共享运行程序。</p></li><li><p>将你的 Hexo 站点文件夹推送到 repository 中。 默认情况下 public 目录将不会（并且不应该）被推送到 repository 中，建议你检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。 整体文件夹结构应该与 示例储存库 大致相似。</p></li><li><p>使用 <code>node --version</code> 指令检查你电脑上的 Node.js 版本。 记下主要版本（例如，v16.y.z）</p></li><li><p>将 <code>.gitlab-ci.yml</code> 文件添加到您的版本库根目录（与 _config.yml &amp; package.json并列），内容如下（将16替换为您在上一步中注意到的 Node.js 主版本）</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node:16-alpine</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">$CI_DEFAULT_BRANCH</span></span><br></pre></td></tr></table></figure></li><li><p>GitLab CI 应该会自动开始运行，构建成功以后你应该可以在 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io</code> 查看你的网站。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;博客部署到Gitlab与部署到Github等生成静态页面不同, Gitlab中需要存储完整代码.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://silencejql.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo中修改KaTeX界定符</title>
    <link href="https://silencejql.github.io/Hexo%E4%B8%AD%E4%BF%AE%E6%94%B9KaTeX%E7%95%8C%E5%AE%9A%E7%AC%A6.html"/>
    <id>https://silencejql.github.io/Hexo%E4%B8%AD%E4%BF%AE%E6%94%B9KaTeX%E7%95%8C%E5%AE%9A%E7%AC%A6.html</id>
    <published>2025-03-07T05:51:28.000Z</published>
    <updated>2025-03-24T11:46:21.019Z</updated>
    
    <content type="html"><![CDATA[<p>在 Hexo 中修改 KaTeX 的界定符（定界符）</p><span id="more"></span><p>主要涉及 <strong>两个位置</strong>：<strong>主题模板文件</strong>和 <strong>KaTeX 初始化脚本</strong>。<br>以下是详细操作步骤：</p><hr><h3 id="1-修改位置：主题的-footer-模板文件"><strong>1. 修改位置：主题的 <code>footer</code> 模板文件</strong></h3><p>KaTeX 的界定符配置在初始化脚本中，通常位于 Next 主题的 <code>footer</code> 模板文件中。<br>文件路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">themes/next/layout/_partials/footer.njk</span><br><span class="line">或</span><br><span class="line">themes/next/layout/_partials/footer.swig</span><br></pre></td></tr></table></figure><h4 id="操作步骤："><strong>操作步骤：</strong></h4><ol><li><p>打开对应的 <code>footer</code> 文件（根据你的主题模板引擎，可能是 <code>.njk</code> 或 <code>.swig</code>）。</p></li><li><p>找到引入 <code>auto-render.min.js</code> 的脚本，修改 <code>delimiters</code> 参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">renderMathInElement</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">delimiters</span>: [</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改这里的 left 和 right 值</span></span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">left</span>: <span class="string">&#x27;$$&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;$$&#x27;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,   <span class="comment">// 块级公式</span></span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">left</span>: <span class="string">&#x27;$&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;$&#x27;</span>, <span class="attr">display</span>: <span class="literal">false</span>&#125;     <span class="comment">// 行内公式</span></span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">throwOnError</span>: <span class="literal">false</span>  <span class="comment">// 忽略公式错误</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将 <code>left</code> 和 <code>right</code> 的值改为你想要的界定符。例如：</p><ul><li><p><strong>改用 <code>\(...\)</code> 和 <code>\[...\]</code></strong>（LaTeX 标准风格）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">delimiters</span>: [</span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;\\[&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;\\]&#x27;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,  <span class="comment">// 块级公式</span></span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;\\(&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;\\)&#x27;</span>, <span class="attr">display</span>: <span class="literal">false</span>&#125;   <span class="comment">// 行内公式</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><strong>改用自定义符号</strong>（如 <code>@...@</code>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">delimiters</span>: [</span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;@@&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;@@&#x27;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,  <span class="comment">// 块级公式</span></span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="string">&#x27;@&#x27;</span>, <span class="attr">right</span>: <span class="string">&#x27;@&#x27;</span>, <span class="attr">display</span>: <span class="literal">false</span>&#125;     <span class="comment">// 行内公式</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="2-同步修改-Markdown-中的公式写法"><strong>2. 同步修改 Markdown 中的公式写法</strong></h3><p>修改界定符后，需在文章的 Markdown 中使用新的定界符。例如：</p><ul><li><p><strong>原写法</strong>：<code>$E = mc^2$</code> 和 <code>$$\sum_&#123;i=1&#125;^n i$$</code></p></li><li><p><strong>修改后</strong>（使用 <code>\(...\)</code> 和 <code>\[...\]</code>）：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">行内公式：<span class="keyword">\\</span>(E = mc<span class="built_in">^</span>2<span class="keyword">\\</span>)</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line"><span class="keyword">\\</span>[</span><br><span class="line"><span class="keyword">\sum</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>n i</span><br><span class="line"><span class="keyword">\\</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-处理转义问题"><strong>3. 处理转义问题</strong></h3><p>如果界定符包含特殊字符（如 <code>\</code> 或 <code>@</code>），需确保 Markdown 渲染器不会转义它们：</p><h4 id="1-在-Hexo-的-config-yml-中配置">(1) 在 Hexo 的 <code>_config.yml</code> 中配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span>      <span class="comment"># 允许 HTML 标签</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span>   <span class="comment"># 关闭自动换行转换</span></span><br><span class="line">  <span class="attr">linkify:</span> <span class="literal">false</span>  <span class="comment"># 关闭自动链接识别（避免 @ 被误识别）</span></span><br></pre></td></tr></table></figure><h4 id="2-转义反斜杠（仅限-和-场景）">(2) 转义反斜杠（仅限 <code>\(</code> 和 <code>\[</code> 场景）</h4><p>在 Markdown 中，如果使用 <code>\(...\)</code> 或 <code>\[...\]</code>，需在公式中写双反斜杠：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\\</span>[</span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>a<span class="built_in">^</span>b f(x) dx</span><br><span class="line"><span class="keyword">\\</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="4-测试修改结果"><strong>4. 测试修改结果</strong></h3><ol><li><p>清理缓存并生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure></li><li><p>启动本地服务器预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>检查公式是否按新界定符渲染，打开浏览器控制台（F12）：</p><ul><li>确保无 JS 报错。</li><li>检查公式是否被正确包裹（如 <code>&lt;span class=&quot;katex&quot;&gt;</code>）。</li></ul></li></ol><hr><h3 id="5-常见问题"><strong>5. 常见问题</strong></h3><h4 id="问题1：修改后公式未渲染"><strong>问题1：修改后公式未渲染</strong></h4><ul><li><strong>原因</strong>：界定符修改未同步到所有位置（如文章中的公式未改用新符号）。</li><li><strong>解决</strong>：全局搜索旧界定符（如 <code>$</code>），替换为新的。</li></ul><h4 id="问题2：-被转义为"><strong>问题2：<code>\</code> 被转义为 <code>\\</code></strong></h4><ul><li><p><strong>原因</strong>：Markdown 渲染器自动转义了反斜杠。</p></li><li><p><strong>解决</strong>：在 Hexo 配置中关闭转义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typographer:</span> <span class="literal">false</span>  <span class="comment"># 关闭智能符号转换</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="问题3：与代码高亮冲突"><strong>问题3：与代码高亮冲突</strong></h4><ul><li><strong>现象</strong>：<code>@</code> 或 <code>\</code> 被代码语法高亮干扰。</li><li><strong>解决</strong>：避免使用与代码语法冲突的界定符（如 <code>`</code> 或 <code>*</code>）。</li></ul><hr><h3 id="示例配置"><strong>示例配置</strong></h3><h4 id="目标界定符">目标界定符</h4><ul><li>行内公式：<code>\\(...\\)</code></li><li>块级公式：<code>\\[...\\]</code></li></ul><h4 id="修改后的-footer-模板脚本">修改后的 <code>footer</code> 模板脚本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">onload</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">    document.addEventListener(&#x27;DOMContentLoaded&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      renderMathInElement(document.body, &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">        delimiters: [</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#123;left: &#x27;\\[&#x27;, right: &#x27;\\]&#x27;, display: true&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#123;left: &#x27;\\(&#x27;, right: &#x27;\\)&#x27;, display: false&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">        ],</span></span></span><br><span class="line"><span class="string"><span class="tag">        throwOnError: false</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#125;);</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;);</span></span></span><br><span class="line"><span class="string"><span class="tag">  &quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="对应的-Markdown-公式写法">对应的 Markdown 公式写法</h4><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">行内公式：<span class="keyword">\\</span>( <span class="keyword">\sqrt</span>&#123;2&#125; <span class="keyword">\approx</span> 1.414 <span class="keyword">\\</span>)</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line"><span class="keyword">\\</span>[</span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;-<span class="keyword">\infty</span>&#125;<span class="built_in">^</span><span class="keyword">\infty</span> e<span class="built_in">^</span>&#123;-x<span class="built_in">^</span>2&#125; dx = <span class="keyword">\sqrt</span>&#123;<span class="keyword">\pi</span>&#125;</span><br><span class="line"><span class="keyword">\\</span>]</span><br></pre></td></tr></table></figure><hr><p>通过以上步骤，即可自定义 KaTeX 的界定符，解决与其他语法（如 Markdown 表格、代码块）的冲突问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Hexo 中修改 KaTeX 的界定符（定界符）&lt;/p&gt;</summary>
    
    
    
    <category term="KaTeX" scheme="https://silencejql.github.io/categories/KaTeX/"/>
    
    
    <category term="Hexo" scheme="https://silencejql.github.io/tags/Hexo/"/>
    
    <category term="KaTeX" scheme="https://silencejql.github.io/tags/KaTeX/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加KaTeX插件-问题处理</title>
    <link href="https://silencejql.github.io/Hexo%E6%B7%BB%E5%8A%A0KaTeX%E6%8F%92%E4%BB%B6-%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html"/>
    <id>https://silencejql.github.io/Hexo%E6%B7%BB%E5%8A%A0KaTeX%E6%8F%92%E4%BB%B6-%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html</id>
    <published>2025-03-07T05:49:29.000Z</published>
    <updated>2025-03-24T11:46:24.876Z</updated>
    
    <content type="html"><![CDATA[<p>如果按照 Hexo添加KaTeX插件 仍未生效，可能是某些环节配置错误或冲突导致</p><span id="more"></span><hr><h3 id="1-检查关键依赖安装"><strong>1. 检查关键依赖安装</strong></h3><p>确保以下依赖已正确安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保渲染器和插件存在</span></span><br><span class="line">npm list hexo-renderer-markdown-it</span><br><span class="line">npm list @traptitech/markdown-it-katex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果未安装，重新执行：</span></span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it @traptitech/markdown-it-katex --save</span><br></pre></td></tr></table></figure><hr><h3 id="2-确认-Hexo-全局配置"><strong>2. 确认 Hexo 全局配置</strong></h3><p>在 Hexo 根目录的 <code>_config.yml</code> 中，检查 <code>markdown-it</code> 的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span>  <span class="comment"># 必须开启，否则公式中的 HTML 标签会被转义</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;@traptitech/markdown-it-katex&quot;</span>  <span class="comment"># 确保插件名称正确</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-检查-Next-主题配置"><strong>3. 检查 Next 主题配置</strong></h3><p>在 <code>themes/next/_config.yml</code> 中，确保以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭 MathJax 和默认的数学公式渲染</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 启用 KaTeX</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 如果 vendor_css 设为 true，需手动添加 CSS（不建议新手开启）</span></span><br><span class="line">    <span class="attr">vendor_css:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-验证资源加载路径"><strong>4. 验证资源加载路径</strong></h3><h4 id="1-检查-CSS-和-JS-是否引入">(1) 检查 CSS 和 JS 是否引入</h4><ul><li><p><strong>CSS 位置</strong>：<br>打开生成的网页，按 <code>F12</code> 进入开发者工具 → <code>Network</code> 标签 → 刷新页面，检查是否有 <code>katex.min.css</code> 的请求。若未加载，说明主题模板未正确插入 CSS。</p></li><li><p><strong>JS 位置</strong>：<br>同样检查 <code>katex.min.js</code> 和 <code>auto-render.min.js</code> 是否加载。如果未加载，检查主题模板文件的修改是否正确。</p></li></ul><h4 id="2-修复资源路径">(2) 修复资源路径</h4><ul><li><p>如果使用的是旧版 Next 主题，模板文件路径可能是 <code>.swig</code> 或 <code>.njk</code>，确保修改了正确的文件：</p><ul><li><strong>CSS</strong>：<code>themes/next/layout/_partials/head/head.njk</code>（或 <code>.swig</code>）</li><li><strong>JS</strong>：<code>themes/next/layout/_partials/footer.njk</code>（或 <code>.swig</code>）</li></ul></li><li><p>手动指定最新版本 CDN（避免缓存问题）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-XjKyOOzGykjIg/xn6ACkxIRv6gm2t6/E2lbLU5ZqH7sBE4k1pL5qfhMcJcH4dZnF&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCkM5qKq6gYVvokzNvAQu3fT8KX4l&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">onload</span>=<span class="string">&quot;renderMathInElement(document.body, &#123; delimiters: [&#123;left: &#x27;$$&#x27;, right: &#x27;$$&#x27;, display: true&#125;, &#123;left: &#x27;$&#x27;, right: &#x27;$&#x27;, display: false&#125;] &#125;);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="5-检查文章-Front-matter"><strong>5. 检查文章 Front-matter</strong></h3><p>在需要渲染公式的文章头部，确保已添加 <code>katex: true</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">测试文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-01-01</span></span><br><span class="line"><span class="attr">katex:</span> <span class="literal">true</span>  <span class="comment"># 必须开启</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-处理特殊符号转义"><strong>6. 处理特殊符号转义</strong></h3><p>如果公式中的 <code>_</code> 或 <code>*</code> 被错误转义，需调整渲染器配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo 根目录的 _config.yml</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-清理缓存并重新生成"><strong>7. 清理缓存并重新生成</strong></h3><p>Hexo 的缓存可能导致修改未生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --debug</span><br></pre></td></tr></table></figure><p>生成后，检查 <code>public</code> 目录下对应文章的 HTML 文件：</p><ul><li>搜索 <code>katex.min.css</code> 和 <code>katex.min.js</code>，确认资源已插入。</li><li>检查公式是否被包裹在 <code>&lt;span class=&quot;katex&quot;&gt;...&lt;/span&gt;</code> 中。</li></ul><hr><h3 id="8-常见问题排查"><strong>8. 常见问题排查</strong></h3><h4 id="1-公式被渲染为纯文本">(1) 公式被渲染为纯文本</h4><ul><li><strong>原因</strong>：KaTeX 资源未加载或初始化失败。</li><li><strong>解决</strong>：按 <code>F12</code> 打开控制台，查看是否有 <code>ReferenceError</code> 或资源加载错误。如果发现 <code>renderMathInElement is not defined</code>，说明 <code>auto-render.min.js</code> 未正确加载。</li></ul><h4 id="2-公式显示错乱">(2) 公式显示错乱</h4><ul><li><p><strong>原因</strong>：<code>$</code> 或 <code>$$</code> 定界符被其他插件干扰。</p></li><li><p><strong>解决</strong>：在 <code>markdown-it</code> 配置中强制指定定界符：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo 的 _config.yml</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;@traptitech/markdown-it-katex&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">delimiters:</span> </span><br><span class="line">          <span class="attr">left:</span> <span class="string">&#x27;$&#x27;</span><span class="string">,</span> <span class="attr">right:</span> <span class="string">&#x27;$&#x27;</span><span class="string">,</span> <span class="attr">display:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">left:</span> <span class="string">&#x27;$$&#x27;</span><span class="string">,</span> <span class="attr">right:</span> <span class="string">&#x27;$$&#x27;</span><span class="string">,</span> <span class="attr">display:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-与代码高亮冲突">(3) 与代码高亮冲突</h4><ul><li><strong>原因</strong>：某些代码块语法与 KaTeX 冲突。</li><li><strong>解决</strong>：在公式前后添加空行，避免与其他内容粘连。</li></ul><hr><h3 id="9-终极测试"><strong>9. 终极测试</strong></h3><p>创建一个最简单的测试文章，内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: KaTeX 测试</span><br><span class="line">date: 2023-01-01</span><br><span class="line"><span class="section">katex: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">行内公式：$E = mc^2$</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line">$$ \sum<span class="emphasis">_&#123;i=1&#125;^n i = \frac&#123;n(n+1)&#125;&#123;2&#125; $$</span></span><br></pre></td></tr></table></figure><p>如果仍不生效，可能是主题兼容性问题。尝试：</p><ol><li>更新 Next 主题到最新版。</li><li>换用其他 KaTeX 集成方案（如 <a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a>）。</li></ol><hr><p>按以上步骤逐一排查，可解决 99% 的 KaTeX 未生效问题。如果问题依旧，请提供以下信息：</p><ol><li>浏览器控制台截图（Network 和 Console 标签）。</li><li>测试文章的生成后的 HTML 片段。</li><li>Hexo 和 Next 主题的版本号。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果按照 Hexo添加KaTeX插件 仍未生效，可能是某些环节配置错误或冲突导致&lt;/p&gt;</summary>
    
    
    
    <category term="KaTeX" scheme="https://silencejql.github.io/categories/KaTeX/"/>
    
    
    <category term="Hexo" scheme="https://silencejql.github.io/tags/Hexo/"/>
    
    <category term="KaTeX" scheme="https://silencejql.github.io/tags/KaTeX/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加KaTeX插件</title>
    <link href="https://silencejql.github.io/Hexo%E6%B7%BB%E5%8A%A0KaTeX%E6%8F%92%E4%BB%B6.html"/>
    <id>https://silencejql.github.io/Hexo%E6%B7%BB%E5%8A%A0KaTeX%E6%8F%92%E4%BB%B6.html</id>
    <published>2025-03-07T05:46:30.000Z</published>
    <updated>2025-03-24T11:46:33.780Z</updated>
    
    <content type="html"><![CDATA[<p>在 Hexo 的 Next 主题中集成 KaTeX 数学公式渲染</p><span id="more"></span><hr><h3 id="1-更换-Markdown-渲染器">1. <strong>更换 Markdown 渲染器</strong></h3><p>Hexo 默认的渲染器可能不支持 KaTeX，需更换为兼容的渲染器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save  <span class="comment"># 卸载默认渲染器</span></span><br><span class="line">npm i hexo-renderer-markdown-it --save  <span class="comment"># 安装 markdown-it 渲染器</span></span><br><span class="line">npm install @traptitech/markdown-it-katex --save  <span class="comment"># 安装 KaTeX 插件</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-配置-markdown-it">2. <strong>配置 <code>markdown-it</code></strong></h3><p>在 Hexo 根目录的 <code>_config.yml</code> 中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;@traptitech/markdown-it-katex&quot;</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-修改-Next-主题配置">3. <strong>修改 Next 主题配置</strong></h3><p>在 Next 主题的配置文件 (<code>themes/next/_config.yml</code>) 中：</p><ul><li><p><strong>关闭 MathJax</strong>（避免冲突）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启用 KaTeX</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copy_tex:</span> <span class="literal">true</span>  <span class="comment"># 允许复制公式代码</span></span><br><span class="line">  <span class="attr">vendor_css:</span> <span class="literal">false</span>  <span class="comment"># 如果手动加载 CSS 可设为 true</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-引入-KaTeX-资源">4. <strong>引入 KaTeX 资源</strong></h3><p>在主题布局文件中添加 KaTeX 的 CSS 和 JS：</p><ul><li><p>编辑 <code>themes/next/layout/_partials/head/head.swig</code>，在 <code>&lt;head&gt;</code> 内添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.katex.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css&quot;</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>themes/next/layout/_partials/footer.njk</code>（或类似文件），在末尾添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.katex.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">onload</span>=<span class="string">&quot;renderMathInElement(document.body, &#123; delimiters: [&#123;left: &#x27;$$&#x27;, right: &#x27;$$&#x27;, display: true&#125;, &#123;left: &#x27;$&#x27;, right: &#x27;$&#x27;, display: false&#125;] &#125;);&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="5-文章启用-KaTeX">5. <strong>文章启用 KaTeX</strong></h3><p>在文章的 Front-matter 中添加 <code>katex: true</code>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试文章</span><br><span class="line">date: 2023-01-01</span><br><span class="line"><span class="section">katex: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">行内公式：$E = mc^2$</span><br><span class="line"></span><br><span class="line">块级公式：</span><br><span class="line">$$ \sum<span class="emphasis">_&#123;i=1&#125;^n i = \frac&#123;n(n+1)&#125;&#123;2&#125; $$</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-处理特殊符号转义">6. <strong>处理特殊符号转义</strong></h3><p>若公式中的 <code>_</code> 被转义，需调整渲染器配置。在 Hexo 的 <code>_config.yml</code> 中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span>  <span class="comment"># 允许 HTML 标签</span></span><br><span class="line">  <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-测试与清理缓存">7. <strong>测试与清理缓存</strong></h3><p>生成并预览效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --debug &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost:4000</code> 查看公式是否正确渲染。</p><hr><h3 id="常见问题">常见问题</h3><ul><li><strong>公式未渲染</strong>：检查控制台是否有资源加载错误，确认 CDN 链接有效。</li><li><strong>符号错位</strong>：确保没有多余的转义字符，使用 <code>\\</code> 代替 <code>\</code>。</li><li><strong>主题版本差异</strong>：不同 Next 版本配置项可能不同，参考官方文档调整。</li></ul><p>完成以上步骤后，即可在 Hexo 博客中使用 KaTeX 渲染数学公式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Hexo 的 Next 主题中集成 KaTeX 数学公式渲染&lt;/p&gt;</summary>
    
    
    
    <category term="KaTeX" scheme="https://silencejql.github.io/categories/KaTeX/"/>
    
    
    <category term="Hexo" scheme="https://silencejql.github.io/tags/Hexo/"/>
    
    <category term="KaTeX" scheme="https://silencejql.github.io/tags/KaTeX/"/>
    
  </entry>
  
  <entry>
    <title>Katex Test</title>
    <link href="https://silencejql.github.io/Katex-Test.html"/>
    <id>https://silencejql.github.io/Katex-Test.html</id>
    <published>2025-03-07T03:34:34.000Z</published>
    <updated>2025-03-07T12:09:12.108Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>行内公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(E = mc^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>块级公式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>i</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n i = \frac{n(n+1)}{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>K</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">K = \begin{bmatrix}f_x &amp; 0 &amp; c_x \\0 &amp; f_y &amp; c_y \\0 &amp; 0 &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
    
    
    <summary type="html">测试Hexo Next中添加KaTeX插件效果</summary>
    
    
    
    <category term="KaTeX" scheme="https://silencejql.github.io/categories/KaTeX/"/>
    
    
    <category term="KaTeX" scheme="https://silencejql.github.io/tags/KaTeX/"/>
    
  </entry>
  
  <entry>
    <title>特性使用示例-1</title>
    <link href="https://silencejql.github.io/%E7%89%B9%E6%80%A7%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1.html"/>
    <id>https://silencejql.github.io/%E7%89%B9%E6%80%A7%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1.html</id>
    <published>2025-03-06T02:19:29.000Z</published>
    <updated>2025-03-24T11:47:21.956Z</updated>
    
    <content type="html"><![CDATA[<p>实现ini文件的序列化与反序列化</p><span id="more"></span><h2 id="反序列化">反序列化</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> KeyName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniAttribute</span>(<span class="params"><span class="built_in">string</span> keyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        KeyName = keyName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Result</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Ini(<span class="string">&quot;长(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> length;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Ini(<span class="string">&quot;宽(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> width;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Ini(<span class="string">&quot;高(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IniFile iniFile = <span class="keyword">new</span> IniFile(<span class="string">&quot;D:\\Test.ini&quot;</span>);</span><br><span class="line"><span class="comment">//读取ini文件键值对</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; resultDic = iniFile.ReadKeyValues(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">Result result = <span class="keyword">new</span> Result();</span><br><span class="line"><span class="comment">//获取所有字段</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> result.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取字段的特性</span></span><br><span class="line">    <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniAttribute;</span><br><span class="line">    <span class="keyword">if</span>(att != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//特性KeyName与ini中key匹配则给对应字段赋值</span></span><br><span class="line">        <span class="keyword">if</span>(resultDic.ContainsKey(att.KeyName))</span><br><span class="line">        &#123;</span><br><span class="line">            Type type = field.FieldType;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                field.SetValue(result, resultDic[att.KeyName]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                field.SetValue(result, Convert.ChangeType(resultDic[att.KeyName], type));</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取所有属性</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> result.GetType().GetProperties())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> att = prop.GetCustomAttributes(<span class="keyword">typeof</span>(IniAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniAttribute;</span><br><span class="line">    <span class="keyword">if</span>(att != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultDic.ContainsKey(att.KeyName))</span><br><span class="line">            prop.SetValue(result, resultDic[att.KeyName], <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进阶">进阶</h3><p>解析多个Session</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">IniFile iniFile = <span class="keyword">new</span> IniFile(<span class="string">&quot;D:\\Test.ini&quot;</span>);</span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; iniResultDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;();</span><br><span class="line">TestResult testResult = <span class="keyword">new</span> TestResult();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取特性作为Session</span></span><br><span class="line">    <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">    <span class="keyword">if</span>(attClass != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//存储该Session下的Key Value</span></span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; resultDic = iniFile.ReadKeyValues(attClass.SessionName);</span><br><span class="line">        <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">            <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">            <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultDic.ContainsKey(att.KeyName))</span><br><span class="line">                &#123;</span><br><span class="line">                    Type type = field.FieldType;</span><br><span class="line">                    <span class="keyword">if</span> (type == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                        field.SetValue(obj, resultDic[att.KeyName]);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        field.SetValue(obj, Convert.ChangeType(resultDic[att.KeyName], type));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        iniResultDic.Add(attClass.SessionName, resultDic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestResult</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniSession(<span class="string">&quot;Result&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Result result = <span class="keyword">new</span> Result();</span><br><span class="line">    [<span class="meta">IniSession(<span class="string">&quot;Info&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Info info = <span class="keyword">new</span> Info();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Result</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;长(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> length;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;宽(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> width;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;高(mm)&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Info</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;ID&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ID;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">IniKey(<span class="string">&quot;结果&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniKeyAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> KeyName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniKeyAttribute</span>(<span class="params"><span class="built_in">string</span> keyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        KeyName = keyName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniSessionAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SessionName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniSessionAttribute</span>(<span class="params"><span class="built_in">string</span> sessionName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SessionName = sessionName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="封装">封装</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IniFile iniFile = <span class="keyword">new</span> IniFile(path);</span><br><span class="line">    T testResult = (T)Activator.CreateInstance(<span class="keyword">typeof</span>(T));</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取特性作为Session</span></span><br><span class="line">        <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">        <span class="keyword">if</span> (attClass != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//存储该Session下的Key Value</span></span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; resultDic = iniFile.ReadKeyValues(attClass.SessionName);</span><br><span class="line">            <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">                <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">                <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resultDic.ContainsKey(att.KeyName))</span><br><span class="line">                    &#123;</span><br><span class="line">                        Type type = field.FieldType;</span><br><span class="line">                        <span class="keyword">if</span> (type == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                            field.SetValue(obj, resultDic[att.KeyName]);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            field.SetValue(obj, Convert.ChangeType(resultDic[att.KeyName], type));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> testResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化">序列化</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">IniFile iniFile = <span class="keyword">new</span> IniFile(<span class="string">&quot;D:\\Test1.ini&quot;</span>);</span><br><span class="line">Result result = <span class="keyword">new</span> Result();</span><br><span class="line">result.width = <span class="number">235</span>;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.AppendLine(<span class="string">&quot;[SessionName]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> result.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniAttribute;</span><br><span class="line">    <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">object</span> o = field.GetValue(result);</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, o.ToString())); &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">File.WriteAllText(<span class="string">&quot;D:\\Test1.ini&quot;</span>, sb.ToString());</span><br></pre></td></tr></table></figure><h3 id="进阶-v2">进阶</h3><p>序列化多个Session</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">TestResult testResult = <span class="keyword">new</span> TestResult();</span><br><span class="line">testResult.info.ID = <span class="number">235</span>;</span><br><span class="line">testResult.info.result = <span class="string">&quot;不合格&quot;</span>;</span><br><span class="line">testResult.result.length = <span class="number">0</span>;</span><br><span class="line">testResult.result.width = <span class="number">1</span>;</span><br><span class="line">testResult.result.height = <span class="string">&quot;&quot;</span>;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取特性作为Session</span></span><br><span class="line">    <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">    <span class="keyword">if</span> (fieldClass != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;[&#123;0&#125;]&quot;</span>, attClass.SessionName));</span><br><span class="line">        <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">            <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">            <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">                sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, field.GetValue(obj)));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">File.WriteAllText(<span class="string">&quot;D:\\Test1.ini&quot;</span>, sb.ToString());</span><br></pre></td></tr></table></figure><h3 id="封装-v2">封装</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Serialize</span>&lt;<span class="title">T</span>&gt;(<span class="params">T testResult</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> fieldClass <span class="keyword">in</span> testResult.GetType().GetFields())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取特性作为Session</span></span><br><span class="line">        <span class="keyword">var</span> attClass = fieldClass.GetCustomAttributes(<span class="keyword">typeof</span>(IniSessionAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniSessionAttribute;</span><br><span class="line">        <span class="keyword">if</span> (fieldClass != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;[&#123;0&#125;]&quot;</span>, attClass.SessionName));</span><br><span class="line">            <span class="keyword">var</span> obj = fieldClass.GetValue(testResult);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fieldClass.FieldType.GetFields())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取包含IniKey特性的字段</span></span><br><span class="line">                <span class="keyword">var</span> att = field.GetCustomAttributes(<span class="keyword">typeof</span>(IniKeyAttribute), <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> IniKeyAttribute;</span><br><span class="line">                <span class="keyword">if</span> (att != <span class="literal">null</span>)</span><br><span class="line">                    sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, field.GetValue(obj)));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sb.AppendLine(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, att.KeyName, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实现ini文件的序列化与反序列化</summary>
    
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="特性" scheme="https://silencejql.github.io/tags/%E7%89%B9%E6%80%A7/"/>
    
    <category term="反射" scheme="https://silencejql.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>CSharp读写Ini文件</title>
    <link href="https://silencejql.github.io/CSharp%E8%AF%BB%E5%86%99Ini%E6%96%87%E4%BB%B6.html"/>
    <id>https://silencejql.github.io/CSharp%E8%AF%BB%E5%86%99Ini%E6%96%87%E4%BB%B6.html</id>
    <published>2025-03-06T02:16:12.000Z</published>
    <updated>2025-03-25T03:26:27.113Z</updated>
    
    <content type="html"><![CDATA[<p>自用</p><span id="more"></span><h2 id="代码">代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IniFile</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">System.Runtime.InteropServices.DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">long</span> <span class="title">WritePrivateProfileString</span>(<span class="params"><span class="built_in">byte</span>[] section, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] val, <span class="built_in">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">System.Runtime.InteropServices.DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">GetPrivateProfileString</span>(<span class="params"><span class="built_in">byte</span>[] section, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] def, System.Text.StringBuilder retVal, <span class="built_in">int</span> size, <span class="built_in">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">System.Runtime.InteropServices.DllImport(<span class="string">&quot;kernel32&quot;</span>, EntryPoint = <span class="string">&quot;GetPrivateProfileString&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">GetPrivateProfileString2</span>(<span class="params"><span class="built_in">byte</span>[] section, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] def, <span class="built_in">byte</span>[] retVal, <span class="built_in">int</span> size, <span class="built_in">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> sPath = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IniFile</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.sPath = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// section=配置节，key=键名，value=键值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        WritePrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="keyword">value</span>), sPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span>, <span class="built_in">string</span> sPath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        WritePrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="keyword">value</span>), sPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// section=配置节，key=键名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReadIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> sPath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Text.StringBuilder temp = <span class="keyword">new</span> System.Text.StringBuilder(<span class="number">255</span>);</span><br><span class="line">        GetPrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="string">&quot;&quot;</span>), temp, <span class="number">255</span>, sPath);</span><br><span class="line">        <span class="comment">//return temp.ToString();</span></span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(Encoding.Default.GetBytes(temp.ToString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReadIni</span>(<span class="params"><span class="built_in">string</span> section, <span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Text.StringBuilder temp = <span class="keyword">new</span> System.Text.StringBuilder(<span class="number">255</span>);</span><br><span class="line">        GetPrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(<span class="string">&quot;&quot;</span>), temp, <span class="number">255</span>, sPath);</span><br><span class="line">        <span class="comment">//return temp.ToString();</span></span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(Encoding.Default.GetBytes(temp.ToString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreatIni</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            FileStream FS = <span class="keyword">new</span> FileStream(path, FileMode.CreateNew);</span><br><span class="line">            FS.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">byte</span>[] <span class="title">GetBytes</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> encodingName = <span class="string">&quot;utf-8&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> ? <span class="literal">null</span> : Encoding.GetEncoding(encodingName).GetBytes(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ReadSections</span>(<span class="params"><span class="built_in">string</span> iniFilename</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Byte[] buf = <span class="keyword">new</span> Byte[<span class="number">65536</span>];</span><br><span class="line">        <span class="built_in">uint</span> len = GetPrivateProfileString2(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, buf, buf.Length, iniFilename);</span><br><span class="line">        <span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            <span class="keyword">if</span> (buf[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(Encoding.UTF8.GetString(buf, j, i - j));</span><br><span class="line">                j = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ReadKeys</span>(<span class="params"><span class="built_in">string</span> SectionName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Byte[] buf = <span class="keyword">new</span> Byte[<span class="number">65536</span>];</span><br><span class="line">        <span class="built_in">uint</span> len = GetPrivateProfileString2(GetBytes(SectionName), <span class="literal">null</span>, <span class="literal">null</span>, buf, buf.Length, sPath);</span><br><span class="line">        <span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            <span class="keyword">if</span> (buf[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(Encoding.UTF8.GetString(buf, j, i - j));</span><br><span class="line">                j = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; <span class="title">ReadKeyValues</span>(<span class="params"><span class="built_in">string</span> SectionName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; keyValues = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; keys = ReadKeys(SectionName);</span><br><span class="line">        keys.ForEach((key) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            keyValues.Add(key, ReadIni(SectionName, key));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> keyValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;自用&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="Ini" scheme="https://silencejql.github.io/tags/Ini/"/>
    
  </entry>
  
  <entry>
    <title>利用反射给字段赋值</title>
    <link href="https://silencejql.github.io/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E7%BB%99%E5%AD%97%E6%AE%B5%E8%B5%8B%E5%80%BC.html"/>
    <id>https://silencejql.github.io/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E7%BB%99%E5%AD%97%E6%AE%B5%E8%B5%8B%E5%80%BC.html</id>
    <published>2025-03-05T10:41:27.000Z</published>
    <updated>2025-03-24T11:47:02.074Z</updated>
    
    <content type="html"><![CDATA[<p>在 C# 中通过反射给字段赋值是一种动态操作对象成员的常用方法，尤其适用于需要绕过编译时类型检查的场景。以下是完整的实现步骤和代码示例：</p><span id="more"></span><hr><h3 id="反射赋值的核心步骤"><strong>反射赋值的核心步骤</strong></h3><ol><li><strong>获取类型信息</strong>：通过 <code>Type</code> 类获取目标对象的类型元数据。</li><li><strong>获取字段信息</strong>：通过 <code>GetField</code> 或 <code>GetFields</code> 方法获取目标字段。</li><li><strong>设置字段值</strong>：使用 <code>FieldInfo.SetValue</code> 方法为字段赋值。</li><li><strong>处理类型转换</strong>：确保输入值与字段类型兼容（可能需要类型转换）。</li></ol><hr><h3 id="完整代码实现"><strong>完整代码实现</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> Age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Country = <span class="string">&quot;China&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReflectionDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象实例</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取类型信息</span></span><br><span class="line">        Type type = <span class="keyword">typeof</span>(Person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 设置公共字段</span></span><br><span class="line">        FieldInfo nameField = type.GetField(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">        nameField.SetValue(person, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Name: <span class="subst">&#123;person.Name&#125;</span>&quot;</span>); <span class="comment">// 输出: Alice</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 设置私有字段（需要 BindingFlags）</span></span><br><span class="line">        FieldInfo ageField = type.GetField(<span class="string">&quot;Age&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">        ageField.SetValue(person, <span class="number">30</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Age: <span class="subst">&#123;ageField.GetValue(person)&#125;</span>&quot;</span>); <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 设置静态字段</span></span><br><span class="line">        FieldInfo countryField = type.GetField(<span class="string">&quot;Country&quot;</span>, BindingFlags.Public | BindingFlags.Static);</span><br><span class="line">        countryField.SetValue(<span class="literal">null</span>, <span class="string">&quot;USA&quot;</span>); <span class="comment">// 静态字段实例参数传 null</span></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Country: <span class="subst">&#123;Person.Country&#125;</span>&quot;</span>); <span class="comment">// 输出: USA</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 动态类型转换示例</span></span><br><span class="line">        <span class="built_in">string</span> inputValue = <span class="string">&quot;42&quot;</span>;</span><br><span class="line">        FieldInfo dynamicField = type.GetField(<span class="string">&quot;Age&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">        dynamicField.SetValue(person, Convert.ChangeType(inputValue, <span class="keyword">typeof</span>(<span class="built_in">int</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="关键注意事项"><strong>关键注意事项</strong></h3><ol><li><p><strong>字段可见性</strong>：</p><ul><li><p>公共字段直接使用 <code>GetField(&quot;Name&quot;)</code>。</p></li><li><p>私有字段需要指定 <code>BindingFlags</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BindingFlags.NonPublic | BindingFlags.Instance</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>静态字段</strong>：</p><ul><li><p>设置静态字段时，<code>SetValue</code> 的第一个参数传 <code>null</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countryField.SetValue(<span class="literal">null</span>, <span class="string">&quot;USA&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>类型转换</strong>：</p><ul><li><p>如果字段类型与输入值类型不匹配，需手动转换：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Convert.ChangeType(<span class="keyword">value</span>, targetType);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li><p>反射操作较慢，频繁调用时可缓存 <code>FieldInfo</code> 对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> FieldInfo _cachedAgeField = <span class="keyword">typeof</span>(Person).GetField(...);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>安全性</strong>：</p><ul><li>修改私有字段可能破坏封装性，需谨慎使用。</li><li>可通过 <code>fieldInfo.IsInitOnly</code> 检查字段是否为只读。</li></ul></li></ol><hr><h3 id="高级用法：泛型扩展方法"><strong>高级用法：泛型扩展方法</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ReflectionExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetFieldValue</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T obj, <span class="built_in">string</span> fieldName, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FieldInfo field = <span class="keyword">typeof</span>(T).GetField(</span><br><span class="line">            fieldName,</span><br><span class="line">            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            field.SetValue(obj, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$&quot;Field <span class="subst">&#123;fieldName&#125;</span> not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.SetFieldValue(<span class="string">&quot;Age&quot;</span>, <span class="number">25</span>); <span class="comment">// 直接通过扩展方法赋值</span></span><br></pre></td></tr></table></figure><hr><h3 id="适用场景"><strong>适用场景</strong></h3><ol><li>动态配置加载（如将 JSON/XML 数据映射到对象）。</li><li>实现通用序列化/反序列化工具。</li><li>编写测试框架时动态修改对象状态。</li><li>依赖注入容器等底层框架开发。</li></ol><hr><h3 id="替代方案"><strong>替代方案</strong></h3><ul><li><p><strong>表达式树（Expression Trees）</strong>：<br>通过编译后的表达式树操作字段，性能接近直接赋值：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> param = Expression.Parameter(<span class="keyword">typeof</span>(Person));</span><br><span class="line"><span class="keyword">var</span> field = Expression.Field(param, <span class="string">&quot;Name&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> setter = Expression.Lambda&lt;Action&lt;Person, <span class="built_in">string</span>&gt;&gt;(</span><br><span class="line">    Expression.Assign(field, Expression.Convert(paramValue, <span class="keyword">typeof</span>(<span class="built_in">string</span>))),</span><br><span class="line">    param, paramValue</span><br><span class="line">).Compile();</span><br><span class="line"></span><br><span class="line">setter(person, <span class="string">&quot;Bob&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>dynamic 关键字</strong>：<br>简单场景下快速访问公共字段（但无法访问私有成员）：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> dynPerson = person;</span><br><span class="line">dynPerson.Name = <span class="string">&quot;Charlie&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><hr><p>通过反射赋值提供了极大的灵活性，但需权衡性能与代码可维护性。在需要高性能的场景，推荐使用预编译的表达式树或代码生成技术（如 Source Generators）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 C# 中通过反射给字段赋值是一种动态操作对象成员的常用方法，尤其适用于需要绕过编译时类型检查的场景。以下是完整的实现步骤和代码示例：&lt;/p&gt;</summary>
    
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/categories/CSharp/"/>
    
    
    <category term="CSharp" scheme="https://silencejql.github.io/tags/CSharp/"/>
    
    <category term="特性" scheme="https://silencejql.github.io/tags/%E7%89%B9%E6%80%A7/"/>
    
    <category term="反射" scheme="https://silencejql.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
</feed>
